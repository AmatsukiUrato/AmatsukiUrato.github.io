[{"contents":"Docker上のRailsアプリをVSCodeのデバッグを用いると、VSCodeのデバッグ行がハイライトされないはじめに 今回は勉強のために、Docker 上に構築した（docker-compose 利用）Rails 6 のアプリケーションを vscode のリモートデバッグを用いてデバッグをしようとしました。 一見 BreakPoint にも停止してくれてうまく行ったと思ったのですが、\n 停止行がハイライトされない VARIAVLES で値が参照できていない  といった、上記画像のような問題が発生しました。私の調べ方が悪いのか、調べてもなかなか出てこなかったため備忘録としてメモしておきます。\nTL;DR 原因は、remoteWorkspaceRoot のパスがずれていることです。\n .vscode/lanch.json の remoteWorkspaceRootを確認する。 コンテナ内のアプリケーション位置とパスを修正する（恐らくパスがずれているはず）。  詳しく VS Code を用いてリモートデバッグを行う場合、プロジェクトフォルダ/.vscode/lanch.json内に、リモートデバッグ用のコンフィグを記載していると思います。 そのコンフィグに記載している remoteWorkspaceRoot（リモート先のプロジェクトフォルダがある場所）が、実際の web サーバのコンテナ内で展開されているアプリケーションの場所とで、差異があるため起きる現象です。\n検索上位に出てくるサイトを参考にして構築した場合、恐らくルート直下に保存しているはずなので、remoteWorkspaceRoot に \u0026quot;/myapp\u0026quot; と記載します。 （myapp はコンテナ内で展開しているアプリケーションのフォルダ名）。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  { \u0026#34;version\u0026#34;: \u0026#34;0.2.0\u0026#34;, \u0026#34;configurations\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;rdebug-ide\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;Ruby\u0026#34;, \u0026#34;request\u0026#34;: \u0026#34;attach\u0026#34;, \u0026#34;cwd\u0026#34;: \u0026#34;${workspaceRoot}\u0026#34;, \u0026#34;remoteHost\u0026#34;: \u0026#34;0.0.0.0\u0026#34;, \u0026#34;remotePort\u0026#34;: \u0026#34;1234\u0026#34;, \u0026#34;remoteWorkspaceRoot\u0026#34;: \u0026#34;/myapp\u0026#34;, // ←ここ \u0026#34;useBundler\u0026#34;: true } ] }   上記を実行後にデバッグを確認すれば、正しく表示されるはずです。\n現状のコンテナがどうなっているのかがわからない場合  docker-compose psにて、コンテナが起動しているかを確認します。起動していない場合は docker-compose up -d で起動してから docker-compose ps で確認します。 docker-compose config --serviceで、Web サーバのコンテナ名を確認し、docker-compose exec web bash（web は自身が設定した web サーバコンテナ名）を行います。 web サーバのコンテナ内に入れるので、自身のアプリケーションがどこにあるのかの確認をします（恐らくルート直下にあるので、lsコマンドを打てば見つかるはず）。  上記で確認を終えたら、remoteWorkspaceRoot の設定を行ってください。\nさいごに 気づけば単純な問題でしたが、最初は原因に見当がつかず、結構悩んじゃいました。 気がつけたのは、web サーバの部分をローカルで動かしてみたからです。 ローカルでは正しく動いたので、恐らく VS Code - Container 間での問題と仮定してからはすぐでした。\n原因調査は、ちゃんと切り分けてやっていったほうがやっぱ早く解決できますね。 にしても、どうして開発は環境構築で必ず詰まってしまうのだろうか……\n参考  VS Code の変数確認  VS Code の設定をキレイに変数置換 - Qiita   DebugHighlight が背景色とかぶっていないかを確認する  Visual Studio Code の配色を好き勝手にカスタマイズした（settings.json） - Qiita DebugHighlight の指定: \u0026quot;workbench.colorCustomizations\u0026quot;:{\u0026quot;editor.stackFrameHighlightBackground\u0026quot;:\u0026quot;#ffa5\u0026quot;}   Debug 方法調査  Visual Studio Code を使って Rails をデバッグ実行してみよう - Qiita docker 環境の rails5 を step 実行で debug する - Qiita Rails の開発環境を docker（docker-compose） で構築したい - Qiita   サービス名確認  docker-compose サービス名の一覧を取得する - Qiita   docker-compose を利用した、コンテナ内への侵入方法  【Docker-Compose】コンテナ起動から入るまでを丁寧に - Qiita    ","ref":"/2020/can-not-show-vscode-debug-highlight-when-develop-rails-app-on-docker-by-vscode-debug-mode/","tags":["Ruby","RubyOnRails","VSCode","Docker"],"title":"Docker上のRailsアプリをVSCodeのデバッグを用いると、VSCodeのデバッグ行がハイライトされない"},{"contents":"Stylusを使ってChatWorkのデザインを変更したはじめに 会社のチャットツールで ChatWork を利用していますが、使いづらい点が数点あるので、 ブラウザの拡張機能である Stylus を使って見た目をいじる記事です。\nStylus と Stylish 同じ用途の拡張機能として、Stylishがありますが、こちらは 2018 年頃に一度ユーザーのデータ収集を秘密裏に行っていました。 現在は Chrome ストアに再登場していますが、過去の事例を考えるとあまり使用したくはないです。\n Firefox の人気アドオン「Stylish」はユーザーのインターネット履歴をこっそり収集していた - GIGAZINE Firefox と Chrome の Stylish がストアから公開停止になった件。対処など。 – らくログ  Stylus の方はGitHubにてソースコードが GPL-3.0 ライセンスで公開されているため、こちらを利用しております。\nStylus でデザインをいじる 今回いじるのは、\n ユーザー/グループ表示を小さくする 概要欄を大きくする ユーザー/グループをホバーしているときの色をわかりやすくする  の 3 つです。 以下の gist 内のコメントにそれぞれ何をイジっているのかを記載しています。\n さいごに css が使えるなら、手軽にデザインを編集できるのは便利です。 今回は ChatWork のデザイン変更に使いましたが、Web アプリケーションに対してなら何にも利用できます。\nこの拡張機能を使って、痒いところに手が届かない状態を脱しましょう。\n参考  Stylus  ","ref":"/2020/edit-chatwork-design-by-stylus/","tags":["ChatWork","css","design","stylus"],"title":"Stylusを使ってChatWorkのデザインを変更した"},{"contents":"gitのデフォルトブランチを試したはじめに ここ最近、一部の技術用語が聞く人によっては不快な単語となっていることが問題となっています。 git もその用語 master が含まれている 1 つの技術としてあげられており、今回のアップデートで変更できるようになりました。\nちょっと気になったので、実際に変更してみました。\n試してみる 最新の git を落としてくる必要があるので、公式の指示に従い、ppa リポジトリを追加してインストールする。\n1 2  sudo add-apt-repository ppa:git-core/ppa sudo apt update; sudo apt install git   アップデートできたら、実際に試す。\nちゃんとgit initした際にmasterではなく、mainに変更されていることが確認できました。\n参考  最新バージョンへの変更  Git(Official) PPA から Git をインストールする — しっぽのさきっちょ | text.Baldanders.info   気になったきっかけ  Git 2.28 brings default branch option - DEV   2.28 のバージョンアップ情報  Highlights from Git 2.28 - The GitHub Blog [ANNOUNCE] Git v2.28.0 - Junio C Hamano   不快な技術語問題  Regarding Git and Branch Naming - Software Freedom Conservancy    ","ref":"/2020/tried-git-defaultbranch/","tags":["git"],"title":"gitのデフォルトブランチを試した"},{"contents":"ElixirのPhoenixフレームワークで利用されているbrunchとははじめに Elixir の Framework である、Phoenix の記事を閲覧していたところ、さまざまな記事に--no-brunchと記載されていました。 しかし、2020-7-20 現在、Phoenix のチュートリアルにはbrunchの記載がありませんでした。 そこで、調べてみました。\n調査結果 brunch は webpack と同じ、フロントエンドのビルドツールでした。 Phoenix の公式チュートリアルを確認したところ、v1.3.4 までは brunch を利用していたみたいですが、 v1.4.0-rc.0 から webpack に変更されたみたいです。\nなので、最新バージョンの Phoenix を利用する場合、 brunch に関する記載は無視して良いです。\n参考  Installation – Phoenix v1.4.0-rc.0 Installation – Phoenix v1.3.4 Brunch - ultra-fast HTML5 build tool  ","ref":"/2020/what-is-brunch-used-by-phoenix-framework/","tags":["brunch","phoenix","elixir"],"title":"ElixirのPhoenixフレームワークで利用されているbrunchとは"},{"contents":"kasperskyが入っているMacでhomebrewなどのパッケージ管理ソフトを使いinstallするとエラーがでる問題を解決したはじめに mac のパッケージマネージャーである homebrew にて、インストール時に\n1  curl: (35) LibreSSL SSL_connect: SSL_ERROR_SYSCALL in connection to example.com:443   といったエラーが発生したため、調査および解決策をまとめてみました。\nTL;DR  ウェブ保護を無効にする 各パッケージマネージャに CA 証明書を設定する  原因調査 発生しているエラーがどういったものかを調査したところ、\n エラー内容の通り、SSL 周りでエラーが発生している WSL（Windows Subsystem for Linux）でも同様の問題が起きている kaspersky がいたずらしているみたい  ということが分かりました。 どうやら、ウェブ保護を行う際に Kaspersky さんが MITM（中間者攻撃）の動きをしているため発生している問題みたいです。\n中間者攻撃はJPRS 用語辞典｜中間者攻撃（man-in-the-middle attack）がわかりやすいです。\nKaspersky 的には、\n「中身をチェックして確認してから渡したるわ」\nということだと思うのですが、これのせいでダウンロードできなければ意味がありません。\n解決策 1 セキュリティ的危険が伴う可能性があります。  ウェブ保護を無効化します。Windows ではポート単位で無効化できるみたいですが現在(2020-07-05)の Mac 版 Kaspersky には詳細設定がないみたいです。なので、ウェブ保護全体を無効化するしかなさそうです。\n解決策 2 参考にした Qiita のエラー文面とは違いましたが、おそらく同じ原因なので掲載します。 CA 証明書を設定して、「Kaspersky は間に入っても良いですよ」という設定にすることで回避ができるみたいです（未検証）。\nやり方は[参考:6]を参照してください。\nさいごに あちこちのパッケージマネージャに設定するのはちょっと面倒くさい。\n他に良い方法を提示されている方、知識を持っている方は是非連絡ください。\nまた余談ですが、WSL では 2019 年あたりに解決されている問題らしい[参考:3]（できてないと言っている人もいる）ので、もしやすると Kaspersky 側で対応されているのかもしれないです。\n参考  Hi! Great tutorial! - Lucas Paiva - Medium apt-get update connection failed · Issue #761 · microsoft/WSL Kaspersky Lab Forum: Archive GitHub への git clone/pull/push 時に SSL 証明書まわりでエラーが出るときの本当に正しい対処法 - Qiita カスペルスキー入れたらネットに繋がらなくなった?! | こすもっちは行く ♪ npm で SELF_SIGNED_CERT_IN_CHAIN が出るときの対処法 - Qiita  ","ref":"/2020/solved-problem-that-can-not-use-package-managers/","tags":["kaspersky","security","homebrew"],"title":"kasperskyが入っているMacでhomebrewなどのパッケージ管理ソフトを使いinstallするとエラーがでる問題を解決した"},{"contents":"GCPのVMに新しいfirewallの設定を適応させるはじめに gcp にて、VM インスタンスを立てた後に新しいポートを開けようとしたのですが、あまり情報が落ちてなかったので書きました。\nTL;DR VM インスタンスの詳細から、新しく追加した firewall ルールのタグ名をネットワークタグに追加する。\n新しい firewall のルールを VM に追加する VM を作成した段階からの手順です。\n VPC ネットワークからファイアウォールを選択する\n ファイアウォール ルールを作成を選択する\n 名前、ネットワーク、優先度、ターゲットタグ、ソース IP の範囲を入力する。\nターゲットタグは後で VM 側から指定する firewall の設定グループ名になる。 作成完了後、VM インスタンス一覧の画面に戻る インスタンス名をクリックしてインスタンスの詳細を開く\n（ずっと自分はネットワークの詳細の表示を選択してました…）\n 編集を選択する\n [3.]で指定したネットワークタグを選択する\n  上記の手順で新しく定義した firewall の設定が VM に対して適応されています。\nさいごに 自分は VM の詳細ページへ行くところで詰まるというくっそしょーもない問題で詰まってました。 しかも、参考にしたサイトをちゃんと読んだら、インスタンスの名称をクリックしろって書いてましたね。かなしい。\n調べて思ったんですが、AWS に比べると GCP の情報量は思ってたよりも少ないです。 GCP はアメリカサーバーのしょぼい VM(f1-micro) だと無料で使えたりするので、お遊びでサーバーがほしい際には是非使ってみてください。\n参考  ファイアウォール ルールの使用 | VPC | Google Cloud Google Cloud Platform のファイアウォール設定方法 | 85\u0026rsquo;s life  ","ref":"/2020/how-to-add-firewall-rules-on-vm/","tags":["gcp","virtualMachine","firewall","port開放"],"title":"GCPのVMに新しいfirewallの設定を適応させる"},{"contents":"Bootstrap5のα版がリリースされました概要 2020-06-16 に Bootstrap5 の α 版が公開されました!!\nBootstrap 5 alpha! | Bootstrap Blog\n公式のブログを読むと、以下の対応が挙げられていました。\n jQuery を捨てたよ IE サポートを捨てたよ 公式ドキュメントを改善したよ  Hugo を使っているよ   ロゴを新しくしたよ form 系の要素を見直したよ Utilities を強化したよ html と css のみでボタンのトグルを実装したよ CSS のカスタムプロパティを使い始めたよ カラーパレット拡張したよ  近日公開予定のものは割愛しております。 Bootstrap のために jQuery 入れてたりしてたので、脱 jQuery は嬉しいですね。\n容量を測ってみる 公式で CDN 提供されているものから取得しました。 少なくとも jQuery の分だけ早くなっているはず……！\nbootStrap5 読み込み\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  \u0026lt;!-- css --\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://stackpath.bootstrapcdn.com/bootstrap/5.0.0-alpha1/css/bootstrap.min.css\u0026#34; integrity=\u0026#34;sha384-r4NyP46KrjDleawBgD5tp8Y7UzmLA05oM1iAEQ17CSuDqnUK2+k9luXQOfXJCJ4I\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34; /\u0026gt; \u0026lt;!-- js --\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js\u0026#34; integrity=\u0026#34;sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34; \u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://stackpath.bootstrapcdn.com/bootstrap/5.0.0-alpha1/js/bootstrap.min.js\u0026#34; integrity=\u0026#34;sha384-oesi62hOLfzrys4LxRF63OJCXdXDipiYWBnvTl9Y9/TRlw5xlKIEHpNyvvDShgf/\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34; \u0026gt;\u0026lt;/script\u0026gt;   Bootstrap4 読み込み\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  \u0026lt;!-- css --\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css\u0026#34; integrity=\u0026#34;sha384-9aIt2nRpC12Uk9gS9baDl411NQApFmC26EwAOH8WgZl5MYYxFfc+NcPb1dKGj7Sk\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34; /\u0026gt; \u0026lt;!-- js --\u0026gt; \u0026lt;script src=\u0026#34;https://code.jquery.com/jquery-3.5.1.slim.min.js\u0026#34; integrity=\u0026#34;sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34; \u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js\u0026#34; integrity=\u0026#34;sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34; \u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/js/bootstrap.min.js\u0026#34; integrity=\u0026#34;sha384-OgVRvuATP1z7JjHLkuOU7Xw704+h835Lr+6QL9UvYjZE3Ipu6Tp75j7Bh/kR0JKI\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34; \u0026gt;\u0026lt;/script\u0026gt;   結果     Bootstrap5 Bootstrap4     bootstrap.min.css 21.7kB 24.2kB   jquery-3.5.1.slim.min.js 0kB 25.1kB   popper.min.js 8kB 8kB   bootstrap.min.js 16.4kB 15.2kB   合計 46.1kB 72.5kB    26.4kB の減量に成功していております！\nまだリリースしていない機能もあるみたいですが、jQuery が消えたので Bootstrap4 を超えることはないと思います。 だいぶダイエットしてますね。\n参考  Bootstrap5 公式 Bootstrap4 公式  ","ref":"/2020/bootstrap5-alpha-released/","tags":["Bootstrap5","css"],"title":"Bootstrap5のα版がリリースされました"},{"contents":"SpringSecurityのconfigureにて、静的ファイルが対象外にならない概要 SpringSecurity を導入している SpringBoot のプロジェクトにて、静的ファイルを対象外にするための設定が反映されてなかったです。\n原因 静的リソースフォルダとして扱われるフォルダ内が、ルートとして扱われるみたいです。\n1 2 3 4  src/main/resources/public └── js/ └── css/ └── file1/   上記のようなフォルダ構成の場合で、js と css を open にしたい場合は下記のように設定します。\n1 2 3 4  @Override public void configure(WebSecurity web) throws Exception { web.ignoring().antMatchers(\u0026#34;/js/**\u0026#34;, \u0026#34;/css/**\u0026#34;); }   public で指定しても、SpringSecurity の保護対象外にならないです。\n1 2 3 4 5  @Override public void configure(WebSecurity web) throws Exception { // 意味ない  web.ignoring().antMatchers(\u0026#34;/public/**\u0026#34;); }   ","ref":"/2020/solved-problem-couldnt-ignore-static-resources-in-spring-security/","tags":["SpringBoot","SpringSecurity"],"title":"SpringSecurityのconfigureにて、静的ファイルが対象外にならない"},{"contents":"yarn実行時にwarning: No license fieldが出ていたのでlicenseをセットしたyarn を走らせると、license を正しくセットしていない場合、\n1  warning package.json: No license field   と表示されます。 エラー名の通り、package.json 内に license がセットされていないためです。 license をセットしましょう。\n1 2 3  { \u0026#34;license\u0026#34;: \u0026#34;SPDXで指定されているID\u0026#34; }   SPDX の ID なんて言われても、わからないですよね。\nSPDX License List | Software Package Data Exchange (SPDX)に Identifier という項目で記載されているので、それを上記 json の license で指定すれば OK です。\nいや、俺は license 指定なんてしたくないんやが \u0026ldquo;UNLICENSED\u0026quot;を入れれば良いみたい。 プライベートのパッケージなどで利用する場合は、この設定がベストだと思います。\nSPDX とはなんぞや？ ライセンス群をまとめるための、オープンな標準規格のことみたいですね。 なんかライセンスがいっぱい定義されているんだなーぐらいの認識で良いと思います。\n An open standard for communicating software bill of material information, including components, licenses, copyrights, and security references. SPDX reduces redundant work by providing a common format for companies and communities to share important data, thereby streamlining and improving compliance.\nhttps://spdx.dev/\n 参考  Home - Software Package Data Exchange (SPDX) プライベートプロダクトの package.json の license フィールドには \u0026quot;license: UNLICENSED\u0026quot; と指定すればいいらしい - モヒカンメモ  ","ref":"/2020/set-license-on-package-json/","tags":["yarn","license","setting"],"title":"yarn実行時にwarning: No license fieldが出ていたのでlicenseをセットした"},{"contents":"SpringBoot上でwebpack環境+ThymeLeafをしたいはじめに テンプレートエンジンと webpack を mix してうまく作れないか奮闘した記録です。 webpack(scss/eslint/prettier/html-webpack-plugin)などを動作させた後に ThymeLeaf で読み込めるようにできないかを考えました。\n結論から言うと、一部うまくいきませんでした。\nやりたかったこと  webpack にて、src 以下のファイル群をコンパイルする。 コンパイルした後に ThymeLeaf を噛ませたいので、html ファイルに関しては templates に配置する public には html 以外のファイルを出力する templates/以下にある html ファイルには、自動で public 以下の js に対してのリンクが貼られるようにする。  1 2 3 4 5 6 7 8 9 10 11 12 13  /resources ├── public # webpackの出力先 │ ├── index.js │ └── index.js.map ├── src # webpackの出力元 │ ├── html │ │ ├── index.html │ ├── js │ │ └── index.js │ └── scss │ └── index.scss └── templates # webpackの出力先 └── index.html # \u0026lt;script src=\u0026#34;/public/index.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;が最後に挿入されている   やったこと webpack.config.js webpack.config.jsを掲載しておきます。 今回の記事に関係ない設定は削除してます。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  const path = require(\u0026#39;path\u0026#39;); const HtmlWebpackPlugin = require(\u0026#39;html-webpack-plugin\u0026#39;); const html = \u0026#39;src/main/resources/src/html/\u0026#39;; const js = \u0026#39;src/main/resources/src/js/\u0026#39;; module.exports = { entry: { index: path.join(__dirname, js, \u0026#39;index.js\u0026#39;), }, output: { path: path.join(__dirname, \u0026#39;src/main/resources/public\u0026#39;), filename: \u0026#39;[name].js\u0026#39;, }, plugins: [ // Webpack plugin を利用する  new HtmlWebpackPlugin({ filename: \u0026#39;../templates/index.html\u0026#39;, chunks: [\u0026#39;index\u0026#39;], template: path.join(html, \u0026#39;index.html\u0026#39;), }), ], };   困ったこと 上記の webpack.config.js でファイル構造的には、想定通りのものになります。 しかし、html-webpack-plugin にて、filename に相対パスを用いて無理やりずらしているため、html 内に挿入される js の path が\n「index.js」ではなく、「../public/index.js」\nとなります。なので、リソースに対して正しく参照できなくなります。 ちなみに、SpringBoot からリソースファイルとしてあつかわれるフォルダは、以下となります。\n1 2 3 4 5 6  resources ├─ static ├─ public ├─ resources └─ META-INF └─ resources   じゃあ、templates に全部突っ込めばいいんじゃないの？ templates 以下に入る予定の html ファイルには、ThymeLeaf の記述も行える想定でいます。 そのため、templates 以下をフリーにしてしまうと、サーバ内の処理が漏れてしまう可能性があり、危険だと思ったためこの案もボツにしました。\n結論 静的リソースに関しては、html 以外を webpack でパックして公開し、html からの参照用 script タグは手動で入力する形が良いのではないかと思いました。\nさいごに フロント部分は拡張要素が多すぎて、色々と導入していると一生環境構築しているのではないのかという感覚に襲われます。create-react-app 的なボイラーテンプレートがもっと色々出れば良いと思うのですが、そもそも今の時代サーバサイドレンダリング（SSR）じゃなくて SPA+REST API/Graph QL とかにするべきですよね…\n手軽に作る分には SSR でも十分といったケースもあると思います。しかし、そういった場合は最低限の環境構築だけ済まして、パパっと作っちゃうほうが良さそうです。\n参考  Spring boot における静的ファイルのアクセス優先順位 - Qiita Spring MVC(+Spring Boot)上での静的リソースへのアクセスを理解する - Qiita Need to use different output path · Issue #148 · jantimon/html-webpack-plugin  ","ref":"/2020/wanna-introduce-webpack-thymeleaf-scss-on-springboot-pj/","tags":["SpringBoot","Webpack","ThymeLeaf"],"title":"SpringBoot上でwebpack環境+ThymeLeafをしたい"},{"contents":"zsh上でhistoryコマンドを打つと直近15件しかでてこない概要 bash を使ってたときは、historyで全履歴が表示されたのに対して、 zsh ではhistoryを叩いても、直近 15 件しか表示されなくて困ってました。\n原因 bash のhistoryと zsh のhistoryコマンドでは仕様が違う。 両方とも fc コマンドの alias として用意されているみたいですけど、alias のはられ方が違うのかも。詳細は調べていないので、知っている方いたら教えてください。\nデフォを全件表示にする 1  alias history=\u0026#39;history 1\u0026#39;   history 1で 1~現在までの履歴が表示されるので、historyに alias を貼る。 まぁ何が困ってたかって、grep 検索できないことだったんで、zsh の検索用 plugin 使ったほうが良いのかもね。\n参考  bash 内部コマンド history, fc - Qiita zsh の fc ビルトインコマンド - Please Sleep  ","ref":"/2020/zsh-history-cmd-cant-show-all-history-when-using-history/","tags":["zsh","shell","command","history"],"title":"zsh上でhistoryコマンドを打つと直近15件しかでてこない"},{"contents":"OSX上にインストールしたIntelliJのconfigファイル保存場所をメモするメモ。以下にあります。\nwindows と違って散らばってるのが少し面倒くさいですね。 また、CommunityEdition と UltimateEdition では微妙に path が違います。 とはそれぞれ、リリース年とリリース月替入ります。\nUltimateEdition Path    target File path     config ~/Library/Preferences/IntelliJIdea\u0026lt;YYYY\u0026gt;.\u0026lt;M\u0026gt;   System ~/Library/Caches/IntelliJIdea\u0026lt;YYYY\u0026gt;.\u0026lt;M\u0026gt;   Plugins ~/Library/Application Support/IntelliJIdea\u0026lt;YYYY\u0026gt;.\u0026lt;M\u0026gt;   Logs ~/Library/Logs/IntelliJIdea\u0026lt;YYYY\u0026gt;.\u0026lt;M\u0026gt;    Logs に関して、IntelliJ IDEA 9 以前のものは System location に保存されているみたいです。\nCommunityEdition Path    target File path     config ?   System ~/Library/Caches/JetBrains/IdeaIC\u0026lt;YYYY\u0026gt;.\u0026lt;M\u0026gt;   Plugins ~/Library/Application Support/JetBrains/IdeaIC\u0026lt;YYYY\u0026gt;.\u0026lt;M\u0026gt;   Logs ~/Library/Logs/JetBrains/IdeaIC\u0026lt;YYYY\u0026gt;.\u0026lt;M\u0026gt;    CE では JetBrains というフォルダを間に噛ますみたいですね。 config だけは表示されませんでした。こっちは Plugin と違って import/export があるので、良いっちゃ良いのですが、少し気持ち悪いですね。\n参考  macos - Where is IntelliJ IDEA config stored in OSX? - Stack Overflow  Directories used by the IDE to store settings, caches, plugins and logs – IDEs Support (IntelliJ Platform) | JetBrains    ","ref":"/2020/take-note-intellij-config-path-on-osx/","tags":["intellij","location","setting","memo","mac"],"title":"OSX上にインストールしたIntelliJのconfigファイル保存場所をメモする"},{"contents":"伝わる!...かもしれない。エンジニアの文章力向上を読んだ\nはじめに 一昨日辺りに、エンジニアのための日本語文章テクニックを読んだので、引き続き日本語文章系の本を読んだ感じです。\n文章での注意点  誤字・脱字をしない 表記を統一する  カタカナ語の伸ばし棒有無 カタカナ or 英語   何も考えずに漢字を使うのはやめる 適切に接続語を使う 翻訳調の書き方をしない  言い換えられないかを検討する   抽象的な書き方をやめる  できるだけ具体的に書く  抽象的に書いたほうがわかりやすくなる場合もあるので、相手に合わせるのがベスト 数字を入れる     主語と述語を近づける 文章は長くしすぎない 二重否定は使わない  物事を伝えるだけなら、二重否定は不要    文章構成での注意点  相手が欲しい物を先に書く  5W1H をなるべく最初に持ってくると良いと思った   お話の背景を添える  質問されそうな前提条件は先に記述しておく    読んでみて 前回読んだ文章力向上の本は、すべての文章に適応できる内容でしたが、 今回の本は、エンジニアとして働く上で覚えておくと良い内容が多かったと感じました。\n個人的には、以下 2 点が重要かなと思いました。\n 相手が欲しいものを先に書く お話の背景を添える  これらをピックアップした理由は以下です。\n相手がほしいものを先に書く タスクなどは、Backlog、torello、Jira などで、 チケット として管理することが多いと思います。チケットは基本的にタスクをお願いするために書くケースが多いので、欲しいもの（タスク状況やタスク内容）が先に書かれていると、実装者が対応内容を理解しやすくなり、作業効率がアップすると思われます。\nお話の背景を添える タスクを対応する上で、タスクの背景を知っていると、成果物の品質が上がると考えています。タスクの背景を知っている場合は、自分が知りうるすべての解決策の中から回答を選べるため、今の解決法とは別の案を提案できる可能性があります。一方で、背景を知らない場合、実装者はどうのような話の流れで現在の結果に行き着いたかがわからないため、とりあえず言われた通りに実装しがちだからです。 前提条件を伝えることで、メンバー同士で考える時間が増え、より良い Output が期待できると思います。\n最後に 連続で文章能力向上の本を読みましたが、ちょっと気にするだけで変えられる点が多いと思いました。文章を書くときは上記内容を思い出して、日本語 noob を抜け出せるようにしていきたいです。\n参考  (物理本)伝わる!\u0026hellip;かもしれない。エンジニアの文章力向上 - denki-macaron - BOOTH  ","ref":"/2020/read-maybe-transmitted-sentence-improve-your-engineer-writing-skills/","tags":["日本語","書き方","積本処理","技術書典7"],"title":"伝わる!...かもしれない。エンジニアの文章力向上を読んだ"},{"contents":"GradleのArtifactとはなんぞや毎回忘れるのでメモ。\nArtifact とはなんぞや 該当プロジェクトが、一意に参照できるようにするためのもの。 プロジェクトの名前やライブラリの名前になることが多いと思う。\njava のライブラリ管理はドメイン名と Artifact で行われており、それぞれをつなげたのものファイル名にする。 そのため、example.com というドメインを所持している会社の foo-library というライブラリを配布する場合、\n1 2 3  com/ └── example └── foo-library   といった形になる。 また、Gradle の設定ファイルであるbuild.gradleには、ドメイン部分の\n1  group = \u0026#39;com.example\u0026#39;   が記載される。\nじゃあ Name ってなんなん Gradle では、複数のプロジェクトを 1 つのプロジェクトファイルにまとめることができる。 その際に使用する alias。 なので、単一プロジェクトでは Artifact と同じ名称になるかと思います。\n参考 Artifact について  Artifact A file or directory produced by a build, such as a JAR, a ZIP distribution, or a native executable.\nArtifacts are typically designed to be used or consumed by users or other projects, or deployed to hosting systems. In such cases, the artifact is a single file. Directories are common in the case of inter-project dependencies to avoid the cost of producing the publishable artifact.\nGradle:Artifact\n 複数プロジェクトをまとめる方法について  Gradle によるマルチプロジェクトの基本 | まくまく Gradle ノート Gradle でマルチプロジェクト - Qiita  ","ref":"/2020/what-is-artifact/","tags":["gradle","setting"],"title":"GradleのArtifactとはなんぞや"},{"contents":"エンジニアのための日本語文章テクニックを読んだ\nはじめに 結構前に買った本を読んだので、メモおよび感想を書きました。 お昼の一時間にぱぱっと読めるぐらいの量なので、気軽に読めました 👍\n読みやすい文章とは 読みやすい文章 = 流し読みできる文章\n読みやすい文章 ≠ 魅力的な文章\n 流し読みできる文章のメリット  読みやすさ 読んでもらいやすさ    流し読みで読める文章じゃないと、まともに読んでもらえない。\n読みやすい文章にするには 読点を使う 読点を上手に使うことが重要になる。 読点は、 文章の強弱や区切りを明確化するため に存在している。 以下の箇所に読点を入れると良くなる。\n 要因と結果の間 主語の後ろ（先に[1]を適応する） 述語と離れている主語の後ろ 長くなった目的語の後ろ 述語と離れている目的語の後ろ 並列要素の間 時間を示す言葉の後ろ 独立後の後ろ 接続詞の後ろ  [1]は、関係性を明確化するため。\n[2],[3]は、主語を明確化するため。\n[4],[5]は、目的語を明確化するため。\n読点は 4 つが限界で、それ以上長い文章の場合は、句点で区切るようにする。 読点は、基本的には 2 つペースで文章を書くのが良いと思った。\n「文章に読点が多くなっている = 文章に内容を詰め込みすぎている」\n各文章の役割を明確化し、分割することが重要。 この文章では、何を伝えたいのか？、何を示したいのか？を考えると良いかも。\n漢字を安易に使わない 漢字が増えると密度が濃くなり、文章が黒くなる。 なので、「漢字を使う = コストを支払う」といった感覚が必要。 読者の年齢層に合わせて、漢字を使うかを判断する。\nやりがちな文章 \u001f「〜することができる」は使わない。 「食べることができる → 食べられる」\nさいごに 言われてみれば確かにといった内容でした。 改めて文章化、体系化された状態で見ると、理解しやすいと思いました。 また、本には使用例なども掲載されていたので、イメージしやすい構成になってました。 興味を持たれた方は購入してみると良いと思います。\n【物理本】エンジニアのための日本語文章テクニック 〜明日から「読みやすいね」と言われよう！〜 - kanamezuki - BOOTH\n","ref":"/2020/read-japanese-sentence-technique-for-engineer/","tags":["日本語","書き方","積本処理","技術書典7"],"title":"エンジニアのための日本語文章テクニックを読んだ"},{"contents":"wingetのプレビュー版が公開されたので、他のパッケージ管理ソフトとかと一緒に使ってみるはじめに 2020-5-13 に Microsoft より、 winget のプレビュー版が公開されたので、 これを気に windows で使えるパッケージソフトをひととおり試してみました。 今回は VS Code のインストールを行っていきます。\n試したパッケージマネージャは\n winget chocolatey scoop AppGet Npackd  です。\nwinget を使う  GitHub のページから Microsoft.DesktopAppInstaller_8wekyb3d8bbwe.appxbundle をダウンロードする 起動してインストール powershell を起動して vscode をインストールをする  1  winget install vscode   これで vscode がインストールされます。 結構楽にインストールできましたが、アンインストールは今のところないっぽいです。 因みに、パッケージ名が複数あった場合は同じ名前が複数個あると言われるので、Id を入力すれば OK です。\n以下の画像の例では、git が被ってます。 winget install Git.Gitで一番上の Git をインストールできます。\nインストールできるパッケージはwinget searchまたはパッケージリストから確認できます\nchocolatey を使う  Chocolatey Software | Installing Chocolateyからインストール用のコマンドをコピーする powershell を管理者で起動した後、[1.]でコピーしたコマンドを実行する インストール後に vscode をインストールする インストールするかを聞かれるので y を押して開始する  1 2  Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString(\u0026#39;https://chocolatey.org/install.ps1\u0026#39;)) choco install vscode   scoop を使う  Scoopから Install コマンドをコピーする powershell を起動した後、[1.]でコピーしたコマンドを実行する インストール後にエクストラバケットを追加する vscode をインストールする  1 2 3  Invoke-Expression (New-Object System.Net.WebClient).DownloadString(\u0026#39;https://get.scoop.sh\u0026#39;) scoop bucket add extras scoop install vscode   1 2  # scoop本体のインストールでエラーが発生した場合は実行する Set-ExecutionPolicy RemoteSigned -scope CurrentUser   AppGet を使う  公式より、インストーラをダウンロードしインストールを行う vscode をインストールする  1  appget install visual-studio-code   Npackd を使う Npackd はインストールコマンドを叩きましたがコマンドが使えなかったため、省きます。\n使ってみて \u0008winget は使いやすいと感じました。 しかし、今の段階でパッケージマネージャを使う分には、やはりパッケージ数が多く安定している chocolatey や scoop、Appget を使ったほうが良いと思います。 個人的には Program Files に保存してくれる chocolatey がオススメです。 Appget は使いやすいのですが、やはりパッケージ数が心もとないです。 scoop も悪くはないのですが、デフォルトの設定では path が scoop 独自のものになるため、各ソフト内で参照している exe ファイルを自分で設定することになる場合があります。 なので、scoop を把握していない人が気軽に使うとちょっとややこしくなります。\nまとめ（2020-05-21 時点）     winget chocolatey scoop AppGet     パッケージ数 166 7771 2693 893   デフォルト\nインストール先 Program Files Program Files User/scoop/apps Program Files    scoop bucket 内訳\n702(main)+1004(extras)+131(games)+107(nerd-fonts)+27(nirsoft)+186(Java)+90(Scoop-JetBrains)+65(scoop-nonportable)+381(PHP)\nパッケージ数で見るとやはり chocolatey が圧倒的です…\n参考  microsoft/winget-cli: Windows Package Manager CLI (aka winget)  ［速報］Windows 用パッケージマネージャ「winget」がプレビューリリース。コマンドラインからアプリケーションをインストール。Microsoft Build 2020 － Publickey Windows Package Manager Preview | Windows Command Line   Chocolatey Software | Chocolatey - The package manager for Windows Scoop AppGet - Windows Package Manager Ninite - Install or Update Multiple Apps at Once Npackd PackageManagement  ","ref":"/2020/use-windows-package-managers/","tags":["windows","package-manager","winget","scoop","chocolatey","AppGet"],"title":"wingetのプレビュー版が公開されたので、他のパッケージ管理ソフトとかと一緒に使ってみる"},{"contents":"英字配列のHHKBを一ヶ月使ってみてはじめに ⌨️ 1 か月前ぐらいに US キーボードの HHKB を購入したので使用感とかを書きます。 前までは REALFORCE を使っていたのですが、持ち運びが大変だったため切り替えました。 HHKB を使う前が REALFORCE だったので REALFORCE との比較を軸に書いてます。\n →   TL;DR  持ち運びするなら HHKB、固定なら REALFORCE プログラミングするなら US 配列がオススメ  スペック比較 📊 購入してはいませんが、比較として US 配列のテンキーレスである R2TLS-US3-BK も掲載しております。\n    PD-KB800WS\n(HHKB Hybrid) R2SA-JP3-BK\n(REALFORCE テンキーあり) R2TLS-US3-BK\n(REALFORCE テンキーレス)     サイズ 294mm × 120mm × 40mm 455mm x 142mm x 30mm 369mm x 142mm x 30mm   質量 540g(電池含まず) 1400g 1100g   キーストローク 3.8mm 4mm 4mm   キー荷重 45g 30g 30g    使ってみて 良い点 👍 HHKB に変えて良かった点としては\n 軽い コンパクト キー設定を独自にカスタマイズ可能 Bluetooth 接続が楽  US キーボードに変えて良かったことは\n プログラミングがしやすい  BackSpace までの距離が近い Shift を押したときと押さなかったときのキーが類似している シングルクォーテーション ' や括弧 （） が打ちやすい    でした。\n「軽い、コンパクト、Bluetooth」の 3 点が揃っているため、取り回しが大変良いです。 「重い、大きい」を理由に今まで使っていた REALFORCE は会社にそのまま置いていたのですが、HHKB はちゃんと持って帰れそうです。\nUS キーボードに関しては最初の慣れまでが大変でしたが、慣れてからは JIS 配列のキーボードよりも使いやすいと感じてます。特に気に入っているのが、シングルクォーテーションと括弧が type しやすい点です。プログラミングを行う上で ' や () は非常によく利用するので、このキーが type しやすくなることによってプログラミング時のタイピング速度のアップが見込めます。自分は WPM が 3 上がりました。プログラマは US キーボードで良いと思う。 慣れるまではtyping.ioでずっと練習していました。\n微妙な点 👎 HHKB に変えて微妙だと感じた点としては\n キーの重量が選べない 打鍵音が REALFORCE よりもうるさい（独特の打鍵音）  \u0008 の 2 点が挙げられると思います。\nキーの重量は慣れれば良いですが、キーの打鍵音は自身でキーボードを改造するぐらいしないとどうにもなりません。音に敏感な人は買う前に一度確認するべきです。\nキーボードの下に布を引くと、音をいくらか軽減できるのでうるさいと感じている人にはオススメです。 尊師スタイルで利用しない場合、自分は一般的なタオルを下に引いてます。\nキーの矢印が独特な点に関しては、慣れたので自分は底まで苦痛に感じなかったです。\nさいごに HHKB は高いですが、価格に見合った性能だと感じました。 少しでも US 配列に興味を持っているなら、US 配列にもチャレンジしてみることをオススメします。\n","ref":"/2020/use-us-hhkb-one-month/","tags":["hhkb","keyboard"],"title":"英字配列のHHKBを一ヶ月使ってみて"},{"contents":"情報収集によく利用するページをまとめたはじめに 自分がよく見る順で、情報収集に使っているサイトを羅列してみました。\n トレンドを知りたい 自分の担当範囲外の技術情報を知りたい 自分の技術領域の知識を増やしたい  という方にはオススメです。 他にもあるよ〜という方がいれば、共有してくれると嬉しいです。\nQiita Qiita ここ最近国内でもっとも有名な技術情報の共有サービス。 国内の類似サービスとしては、Qrunch（クランチ）やCrieitなどもある。\n良いところ  国内のサイトなので、日本語での情報収集がしやすい 国内の技術トレンドをつかみやすい 記事に対してプルリクを送信でき、気軽に貢献できる  DEV Community DEV Community 技術情報の共有サービス。 個人的には Qiita よりもコミュニティサイトとしての色が強い印象を受けている。\n良いところ  クロス投稿ができるので、書きやすい Qiita に比べてコメント欄が活発なので、他の人の意見も見られる機会が多い 爆速  はてなブックマーク - テクノロジー はてなブックマーク - テクノロジー はてなブックマークのテクノロジー項目。 はてなユーザーがオンラインにブックマークを保存しているサイトがランキング形式で表示される。\n良いところ  個別のサイトに依存しない情報収集が可能  個人サイトなどを知れる機会が増える   畑の違う分野を知れる場合が多い 技術に関わるニュースを仕入れやすい  Hacker News Hacker News 計算機科学やベンチャーなどのテーマを取り扱うソーシャルニュースサイト。 海外版はてなブックマークという感覚に近い。 Hacker News のすすめ - Qiita\n良いところ  スタートアップ企業の情報なども知れる 古い記事などもランキングによく浮上している 記事数が多い  Product Hunt Product Hunt – The best new products in tech. 作成したアプリを投稿するサイト。 スタートアップ企業が投稿しているパターンが多い。\n良いところ  より便利なツールに出会える可能性がある 他の人のアイデアを成果物として確認できるので、刺激的 どういったデザインで組まれているかなど、開発時の参考になる  徳丸浩の日記 徳丸浩の日記 徳丸本で有名な徳丸さんが書いているブログ。 セキュリティ関連の情報収集に最適。 SQL インジェクション対策もれの責任を開発会社に問う判決 | 徳丸浩の日記 とかは全エンジニアや PM に知ってもらいたい記事です。\n良いところ  セキュリティに関する知見が貯まる。  fukabori.fm fukabori.fm NTT Communications 人事担当の方が主催している PodCast。 さまざまな分野の人を招き入れて、お話を浅いところから深堀りしていくのでわかりやすくおもしろいです。\n良いところ  実際に働いている人の「生の声」を聞けるので、リアリティがある 音声なので、ラジオ感覚で軽く聞ける  Trending repositories on GitHub today Trending repositories on GitHub today GitHub のトレンドページ。\n良いところ  リポジトリベースでトレンドを知れる  記事が投稿されていないものもキャッチアップできる    Frontend Weekly Tokyo Frontend Weekly Tokyo フロントエンドに特化した情報共有サイト。\n良いところ  フロントエンドに絞って情報収集が可能 海外の記事もまとめられている 概要が書かれているので、どういった記事かの把握がしやすい  さいごに 情報収集するサイトはめちゃくちゃ多くても困るし、少なすぎても情報量が足りなくなってくると思います。 自分も全部を毎日見ているわけではないので、自分のスタイルに合わせて行くのが良いと思います。\n","ref":"/2020/often-use-to-collect-information/","tags":["collectInformation","site"],"title":"情報収集によく利用するページをまとめた"},{"contents":"docsify用のサーバ実行をexeファイルとドキュメントファイル群だけで起動できるようにするはじめに 調査資料などを見やすい形で保存できるように docsify という、node.js で作られたドキュメント管理ツールを利用しています。node.js で作られているので、ローカルで閲覧する際にはもちろん npm コマンドが必要です（厳密には違いますが、CORS の関係上サーバ起動したほうが手っ取り早いため）。これでは、node.js をインストールしていない人や技術的知識のない人が docsify の画面を通して確認できません。\nそこで、ドキュメントファイル（markdown, index.html など）とサーバ起動用の exe だけを用意して、exe 起動するだけで自動的にドキュメントがブラウザ上に展開する仕組みを作りました。\nTL;DR  node.js ファイルの実行ファイル化を行うパッケージを使う  nexe と pkg あるが、pkg の方が安定していた   docsify のフォルダをローカルホストで展開する  serve-static を使う（実際のコードは XXXX 参照）    サーバ起動用の js ファイルを用意する まず、実行ファイル化するための JS ファイルを用意する必要があります。\nそこで、公式に docsify のサーバを建てるための記述を探したのですが、docsify-cli サーバ起動に使ってね！としか書かれていなかったので、 docsify-cli の serve.js を読みました。serve.js内にサーバを建てる処理がmodule.exportされていたので、関数を import したのですが、exe 化する際にうまく実行できませんでした。これはどうやら、livereload ライブラリとの関係でうまく動いていないっぽいです。詳細は追っていないので把握している方は教えていただきたいです 🙇‍♂️\nそもそもとして docsify の仕組み上から、ローカルのファイルを閲覧できればそれで良いので、serve-staticのサーバ起動のみを exe 化することで今回は対応しました 💡\n以下のように実装しました。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  const http = require(\u0026#39;http\u0026#39;); const finalhandler = require(\u0026#39;finalhandler\u0026#39;); const serveStatic = require(\u0026#39;serve-static\u0026#39;); const open = require(\u0026#39;open\u0026#39;); // docsifyのドキュメントファイルパス const serve = serveStatic(\u0026#39;./\u0026lt;your-docsify-docs\u0026gt;\u0026#39;); const port = 3000; const server = http.createServer(function (req, res) { const done = finalhandler(req, res); serve(req, res, done); }); console.log(\u0026#39;Webブラウザが開かれ、ドキュメントが展開されます。\u0026#39;); console.log(\u0026#39;終了するときは\u0026#39;); console.log(\u0026#39;方法1. このウィンドウを選択した後に`Ctrl+C`を押してください。\u0026#39;); console.log(\u0026#39;方法2. 右上のXボタンを押して下さい。\u0026#39;); server.listen(port); // 自動でブラウザに展開する open(`http://localhost:${port}`);   js のコードを exe 化する node.js の実行ファイル化を行えるライブラリを探したところ、 nexe と pkg が見つかりました。 2 つとも試したのですが、 pkg の方が正常に起動したため今回は pkg を採用しました。\n以下に記載している方法は windows でのみ動作確認ができております。mac で試したところルートが取得できないというエラーが表示されてうまく動きませんでした。 Path の指定方法がちがうのかなぁ？\nまず pkg を下記コマンドで docsify プロジェクトの node_modules にインストールします。--devはいつの間にか非推奨になったみたいです。\n1  npm i --only-dev pkg   pkg がインストールできたら、次にソースコードの実行ファイル化を行います。実行ファイル化を行う前に js ファイルが正常に動作するかを確認してから実施しましょう。\npkg を利用して実行ファイルを作成するには、以下のコマンドを実行します。 ターゲットオプションを付けると、win, mac, linux の指定ができます。 指定方法はこちらの prefixを確認してください。\n1  npx pkg \u0026lt;your-js-file\u0026gt; --target `\u0026lt;your-platform\u0026gt;`   コマンド実行が完了すると実行ファイルが作成されています。起動すると、ローカルサーバが立ち上がった後に規定のブラウザにてドキュメントが展開されるはずです。\nさいごに ドキュメントは人が読みやすくなるように残したいですが、build ツールを使うと非エンジニアには閲覧が厳しくなりがちです。ドキュメントを展開するときはなるべく誰でもアクセスできる状態にしておきたいですね。\n今回の場合はサーバを立てて公開して良いドキュメントでもなかったので、exe 化で対応しました。index.html 単体にすべて Output するドキュメント生成ツールとかないのかなぁ。\n参考  zeit/pkg: Package your Node.js project into an executable docsifyjs/docsify: 🃏 A magical documentation site generator.  ","ref":"/2020/use-docsify-by-execute-file/","tags":["docsify","markdown","document","pkg","npm","node"],"title":"docsify用のサーバ実行をexeファイルとドキュメントファイル群だけで起動できるようにする"},{"contents":"リアルフォースをMacで使えるようにするはじめに リモートワークになり、会社に置いていたリアルフォースを持ち帰ったため個人用途の Mac でも利用しようと思い調べました。 個人の Mac 用に HHKB を買おうと思ったのですが、買う前に尊師スタイルでタイプする感覚を試しかったのでちょうど良かったです。\nTL;DR  Karabiner-Elements を使ってキーの変換を行う  Win キーボードのボタンカスタマイズを行う Mac に Windows 用のキーボードを挿しても一応反応するのですが、\n かな/英字の変換キーがない Windows キーがコマンドキーになるため、微妙に位置がずれる  などの問題点があります。項目 2 はなんとかなるのですが、項目 1 は致命的です。 そこで、今回は Mac のキーを制御できるソフトであるKarabiner-Elementsを利用したいと思います。\nKarabiner-Elements の導入 Homebrew でインストールします。\n1  brew cask reinstall karabiner-elements   これでKarabiner-Elementsがインストールされるはずです。\n設定を行う 色々できるみたいですが、今回は以下の 2 点を実施します。\n キーの変換カスタマイズ Mac のキーを無効化  キーの変換設定 Simple modifiactionsのTarget deviceを自身のキーボード REALFORCE 112JP(Topre) に設定します。指定が終わった後は左下のAdd itemから何を何へ変換するのかを追加していけば完了です。自分の場合は以下のように設定しています。\nleft_gui は Windows キーのことです。\nMac のキーを無効化 DevicesのAdvancedを開き、*Disable the build-in keyboard~~*と記載のある項目で自身のキーボードにチェックを入れます。これで、チェックを入れたキーボードを接続している間は Mac のキーボードが無効になります。\nちなみに、無効になるのは物理キーだけなので、touch bar は動作します。\n設定のバックアップを取る 以下のパスに設定用のJSON ファイルがあります。こいつを gist やクラウドのファイルストレージにあげておけば問題なさそうです。\n1  ~/.config/karabiner/karabiner.json   自分の config ファイルは gist に上げてます。設定ファイル系あげるのに便利ですよね、gist。\n さいごに 自分のリアルフォースは 10 キーが付いているやつなので結構無理やりな感じになってしまいましたが、お試しでやる分には良かったです。やっぱりゲーム以外でキーボードを利用するなら、テンキーレスなどのミニマルなキーボードを利用したほうが何かと便利ですね…\n参考  MacBookPro で HHKB 尊師スタイル - Qiita [Mac] 他のキーボードに接続したら内蔵キーボードを無効化する方法 - あなたのスイッチを押すブログ Karabiner-Elements  ","ref":"/2020/use-realforce-on-macbook/","tags":["keyboard","MacBook","Karabiner-Elements"],"title":"リアルフォースをMacで使えるようにする"},{"contents":"github-actions上でbuildした際、lastmodの更新がすべての記事に適用される問題を解決したはじめに hugo のジェネレートを GitHub-actions を使って、push するだけでデプロイできるようにしたのですが、全記事の最終更新日が更新されていたため原因調査をおこないました。\nTL;DR  git の clone を行う際に最新コミットしか取得していなかった actions/checkoutを利用する場合は以下の方法で fetch させ、全履歴を取得する  1 2 3  - uses:actions/checkout@v2with:fetch-depth:0# Fetch all history for .GitInfo and .  試したこと GitHub-actions 上と local の比較    icon 結果     ✅ 更新対象記事のみ lastmod が更新されていた   ❎ すべての記事に対して更新が入っていた     ローカル  ✅MacOS でのビルド ✅Vagrant 内の Ubuntu:18.04.4 でのビルド   CI 環境  ❎Ubuntu:ubuntu-18.04 でのビルド ❎MacOS:latest でのビルド ✅hugo のビルドを省いてデプロイ ❎ オプションを外してビルド ❎ 既存の workflow を使わずにコマンドでインストール（下記コマンドを実行） 1 2  wget https://github.com/gohugoio/hugo/releases/download/v0.68.3/hugo_0.68.3_Linux-64bit.deb sudo apt-get install -y ./hugo_0.68.3_Linux-64bit.deb       git 周りの確認  参照先の commitID が対象コミットの commitID になっているか  対象のコミット ID でした   git logの結果が正常に表示されているか  CI 上のログでは、1 件しか表示されていなかった    結果 actions/checkout@v2という公式の workflow を利用して git の clone を行っていたのですが、デフォルトでは最新のコミットしか取ってこないようです。 更新日時の参照先が見つけられなくなるため、すべての記事が最新のコミット更新日時を取得しに行ってしまったのだと思います。\n 1 2 3 4 5  # Number of commits to fetch. 0 indicates all history.  # Default: 1  fetch-depth: \u0026#39;\u0026#39;   https://github.com/actions/checkout#usage\n すべての履歴を clone してくることで、解決しました。 GitHub Actions の yml ファイルでは、以下のように記載するようです。\n 1 2 3  - uses:actions/checkout@v2- run:|git fetch --prune --unshallow  https://github.com/actions/checkout#fetch-all-history-for-all-tags-and-branches\n 2020-04-04 追記\nactions-hugo の製作者様から直接コメントで連絡をいただきました。以下の方法でもできるみたいです。上記の設定よりも簡潔なので、こちらを利用したほうが良いと思います。感謝 🙇‍♂️\n 1 2 3  - uses:actions/checkout@v2with:fetch-depth:0# Fetch all history for .GitInfo and .  https://github.com/peaceiris/actions-hugo#%EF%B8%8F-use-the-latest-version-of-hugo\n さいごに 最初は hugo のセットアップに使っている workflow が悪いのかを疑ってたせいで、結構解決までに時間がかかりました…\n今回のような問題を早期発見するために、確認用の Step も入れたほうが良いのかなと思いました。\n参考  actions/checkout: Action for checking out a repo peaceiris/actions-hugo: GitHub Actions for Hugo ⚡️ Setup Hugo quickly and build your site fast. Hugo extended, Hugo Modules, Linux (Ubuntu), macOS, and Windows are supported.  ","ref":"/2020/solved-issue-with-github-actions-lastmod-updates-being-applied-to-all-the-articles/","tags":["github","ci","hugo","github-action"],"title":"github-actions上でbuildした際、lastmodの更新がすべての記事に適用される問題を解決した"},{"contents":"DevToolsにあるSourceタブ内で閉じてしまったconsoleを再度開く（Chrome） Sources タブを開いた状態で Esc を押す。 右上の「︙」をクリックして、「(Show|Hide) console drawer」をクリックする。  これで表示/非表示ができる。ぱっと検索したときにすぐ検索で出てこなかったのでメモ。 地味に window がでかいから、「x」でよく消してしまうんだよね。\n","ref":"/2020/reopen-devtools-console-on-source-tab/","tags":["chrome","devtools","console"],"title":"DevToolsにあるSourceタブ内で閉じてしまったconsoleを再度開く（Chrome）"},{"contents":"不要ソースコードをコメントアウトするなら、削除して履歴を残して😭信じられないだろうが、バージョン管理システムへの登録や更新も「非効率的」とか「無駄な工数」とか抜かすSEもプログラマも多い。\n\u0026mdash; Yuichi Onodera (@mokemoke6502) March 25, 2020  に対して、\ngitは使ってるけどコメントが\n・画面の修正をした\n・バグを直した\n・一旦コミット\nとかの意味がほぼ無いコメントで埋もれてるgitは見かける https://t.co/9A6NV7nwoA\n\u0026mdash; matsuaki (@matsu4ki) March 26, 2020  と引用リツイートしたのですが、もう少し自分で整理しておきたいと思い記事にしました。\nはじめに git でソースコード管理をしている際、仕様変更などで特定の関数自体が不要になる場合があります。 その時、対応しているエンジニアが取れる行動としては、\n 放置 コメントアウト 削除  の 3 つがあると思います。 今回はこの 3 つの対応について話していこうと思います。\nTL;DR  とりあえずどこかに、なぜそうしたかの理由を書いておく 不要なソースコードは削除して、コミット履歴に理由を書いといてね。  1.そのまま残す これが一番最悪なパターンです。\n使われていないのに残っているということは、それだけムダな容量を取っているということになります。また、変更しないため、git の変更履歴にも残りません。コミットからなぜこのソースコードが消されていないのかの理由も探すこともできないのです。もしこのケースになっているソースコードが散乱しているシステムに出くわした場合、ソースコード的にも PJ メンバー的にもやばいと思います。ほぼ間違いなくソースコードは管理されていません。\n既存コードへの対応策 バッサリと未使用のソースコードは削除するべきです。\nその PJ に該当ソースコードが使われていた理由を知っている PJ メンバーがいる場合は別ですが、基本的には使用目的のサルベージは不可能だと思って問題ないです。また、使用目的が不明なので再利用される可能性も限りなく低いです。\nただし、削除する前に本当に使われていないかの検証を行う必要があります。 PJ 全体で問題定義を行うところから入ったほうが良いでしょう。\n2.コメントアウトする こちらもあまり良いとは言えません。\nコードがコメントアウトされていることによってわかる情報は、\n 今は利用されていない  のみとなります。コメントアウトされた理由としては、\n 再度利用される可能性がある とりあえず動作させたいから メモ  などが考えられますが、どれなのかは第三者から到底把握できるものではありません。また、このようにコメントアウトするエンジニアのコミット履歴を確認しても「とりあえずコミット」や「一旦コミット」と意味のないコメントを記載しているか、別のコミットに滑り込ませている場合が体感として多いです。\n既存コードへの対応策 こちらも、問題 1 と同様に削除するべきだと思います。 しかし、こちらは使用されていないことが分かっているので問題 1 よりはスムーズに削除できると思います。注意事項も問題 1 と同じです。\nどうしてもコメントアウトを行う場合は、なぜコメントアウトにするのかをコメントアウトするソースの先頭やコミットのコメントに必ず記載してください。\nまた、メモなどでコメントアウトしている場合はNOTE:を、動作が明瞭でないソースコードにはXXX:などのアノテーションコメントを入れることも検討しましょう。IDE 側で検索やハイライトが行えるため見通しが良くなります。\n3.削除する ソースコード管理ツールを利用している状況下では、この選択が一番良いです。\n削除する際には、なぜ削除を行うのかという理由をコメントで残しておきましょう。 また、コミットは削除のみで行うことにも注意しておきたいです。他の変更と混ぜてしまうと何の変更を行ったのかが分かりづらくなります。 再利用される可能性がある場合は、チケットなどにコミット番号を残しておくと良いと思います。git はコミット番号で簡単に検索することができるので、コミット番号と簡易的な説明以外は必要ないかもです。\nさいごに 大事なことは、数カ月後に誰が見てもなぜこのような処理にしたのかを把握できる状態にしておくことです。\nなので、既存のソースコードをリファクタリングで削除する際にも、必ず「XX の経緯でリファクタリングを行うことになり、削除した」などのコメントを残すことが大切だと思います。Backlog などのプロジェクト管理ツールを利用している場合は、対応チケットの番号を記載し、具体的なやり取りはチケットに記載する方法でも問題ないです。\nまた、今後運用していく際にで同じ轍を踏まないようにするため\n wiki などのドキュメントに運用方法を記載する ソースコードレビューでリジェクトする PJ 管理ツールへのリンクがないコミットはコミットできないようにする PJ のソースコードを定期的にアナライズする  などの対策も必要です。 とはいえ、実際にやるとやはり大変です。 まずは既存メンバーのコメントを見直すなど、できることから行っていくことが大切だと思います。\n参考  TODO: 以外のアノテーションコメントをまとめた - Qiita  ","ref":"/2020/please-delete-unnecessary-comment-out-and-use-git-commit/","tags":["git","git管理","運用"],"title":"不要ソースコードをコメントアウトするなら、削除して履歴を残して😭"},{"contents":"VSCode上でIntelliJライクなgitのannotate diffができるらしいはじめに IntelliJ には Git の履歴確認方法の 1 つとして、Annotate 機能が用意されています。\nこれがめちゃクソ便利なので、なんとかして VS Code 内でも再現できないかと模索した話になります。 Git Lens は VS Code 内の良い拡張機能として紹介されていることが多いけど、Git Lens の機能の 1 つである annotation diff についてはあまり紹介されていないように思えるので紹介してみた。\nTL;DR プラグインの Git Lens を入れて、以下の設定に変更すればそれっぽくなる\n   SettingName Value      Avatars チェックを外す    Compact チェックを外す    Date Format YYYY/MM/DD    Format `${id} ${date} ${author 10?}`    設定する  Git Lens が必要なので、Extensions から Git Lens をダウンロードする（直リンク）。 設定一覧を開き（⌘ + ,）、以下の画像の用に設定を行う。  git で管理されているファイルを開き、コマンドパレットを表示する（⌘ + Shift + P）。 「GitLens: Toggle File Blame Annotations」を選択する。   これで、以下のように表示されるはず。\nさいごに パット見それっぽくなりましたが、Annotate から過去コミットの内容閲覧や過去コミットとの Diff をとることはできないっぽいので、やはり IntelliJ のほうが使い勝手は良いです 😥\n手軽にコーディングする際は VS Code、ガッツリコーディングするときは IntelliJ とかで分けると良さそうですね。\n参考  Git Lens Official  ","ref":"/2020/try-to-hard-to-display-intellij-like-annotate-diff/","tags":["VSCode","IntelliJ","git","blame","diff"],"title":"VSCode上でIntelliJライクなgitのannotate diffができるらしい"},{"contents":"GitHub-ActionsでカスタムドメインのGitHub-Pagesをデプロイすると、カスタムドメインの登録が消えるGitHub-Actions でデプロイを行うと、custom ドメインで設定したものが初期化されていました。 原因は GitHub-Actions で利用しているactions-gh-pagesにて、cname の設定を忘れていたためでした。\nこちらに乗っている通り、with.cnameに自身のカスタムドメイン名を記入すれば正常にデプロイされるはずです。\n1 2 3 4 5 6  - name:Deployuses:peaceiris/actions-gh-pages@v3with:github_token:${{ secrets.GITHUB_TOKEN }}publish_dir:./publiccname:github.com  ","ref":"/2020/deploy-custom-domain-github-pages-on-github-actions/","tags":["github-actions","ci","github-pages"],"title":"GitHub-ActionsでカスタムドメインのGitHub-Pagesをデプロイすると、カスタムドメインの登録が消える"},{"contents":"アフターデジタルを読んだはじめに アフターデジタルという本を読みました。 感想にも書いてますが、IT に関わるすべての人が読んで良いと思う一冊だったので、 本屋で見かけた際は手にとってみては？\n自分は Kindle で読みましたが…ｗ\n感想 アフターデジタル オフラインのない時代に生き残る著者 : 藤井保文日経BP発売日 : 2019-03-23ブクログでレビューを見る»IT技術者やIT技術に関わる人は手にとって良い一冊だと思います。\nTL;DR\nこの本を読むと\n・中国で行われているOMOの考え方\n・個人データの重要性/使い方\n・個人データに対する考え方\n・日本でOMOへシフトするには\nが学べると思います。\n主に中国のビジネスに対して見解を述べている本です。OMO（Online-Merge-Offline）という、オンラインがオフラインを包括すると言う中国企業トップ（アリババ、テンセントなど）の考え方をベースに、我々は今後どのようにしてビジネスを発展させていかなければならないかが語られています。\n私はこの本をとある方から薦められて読み始めたのですが、読む前と読んだ後では中国や日本の技術やビジネスに対する考え方が丸っと替わったぐらい衝撃を受けました! さいごに もっと書いてたんだけど、スマホで更新したら消えた 😇\n","ref":"/2020/read-after-digital/","tags":["book","read"],"title":"アフターデジタルを読んだ"},{"contents":"社内のLT大会に参加してみた（自分のテーマは[Gasを用いた確認作業の自動化]）はじめに 1 月 21 日に社内で LT 大会があったので、参加してみました！\n誰かが企画した LT 大会というものには参加したことがなかったため、非常に良い経験をしたと感じてます。こちらの記事は LT の体験談となります。\nTL;DR  LT 発表は自分の成果を簡単に発表できる場 LT に自身がないマンは小さめの LT で発表するべし 他人から評価してもらうことでモチベがちょっと上がる いい区切りになる  テーマについて 何個か候補はあったので、主催グループの一人にどれが良いか聞いて決めました。内容はタイトルにもある通り GoogleAppScript を利用して、フロントの確認作業を少し自動化した話です。\n資料は前日にヒィヒィ言いながら作りましたｗｗ\n発表スライド 後で貼る 資料修正するの大変なのでやめました… 作ったものの構成図だけ貼っておきます。\n発表してみて 参加者として入るより、何十倍も学べるものがありました。その立場になってはじめてわかることはやっぱりあるんだなと実感しました。 また、自分が作成したものに対して、コメントを書いてもらえるシステムになっていた点も良かったです。「面白そう」とか「すごい」とかはモチベアップにつながるし、「スライドのここをこうした方が良い」などのアドバイスは単純に今後のプレゼン改善点に繋がります。\n発表する内容が、作成物の発表であった場合は作品の区切りにもなると思いました。外部に（今回の場合は内部よりだけど）発表することで、自分の中で「私は XX を作りました！」という認識になることでひとつの線が引けた感覚になりました。\nさいごに 外部の LT は少し荷が重かった自分にとってはとても良い機会でした。人から評価をもらうというのは、どのような形であれ相手に時間を割いてもらっている行為なので今回の LT は本当に感謝です 🙇‍♂️\nどのような規模や場所でも良いので、LT で話したことのない方は、一度 LT をしてみると自分の知見がどのように思われているのかがわかって良いと思いました！\n","ref":"/2020/tried-lightningtalk-in-the-office/","tags":["LT"],"title":"社内のLT大会に参加してみた（自分のテーマは[Gasを用いた確認作業の自動化]）"},{"contents":"configの設定からHugoで表示するコードに番号を表示する以前 昔（v0.60.0 以前）はソースコードに行数を入れるには、以下のような記述が必要でした。\n1 2 3  {{\u0026lt; highlight go \u0026#34;linenos=table,hl_lines=8 15-17,linenostart=199\u0026#34; \u0026gt;}} // ... code {{\u0026lt; / highlight \u0026gt;}}   今 今は以下の config（config.toml）を設定しておくことで、 バッククォート（`）だけのコードでも行数が付くようになってます。\n1 2 3 4 5 6 7 8 9 10 11  [markup] [markup.highlight] codeFences = true guessSyntax = false hl_Lines = \u0026#34;\u0026#34; lineNoStart = 1 lineNos = false lineNumbersInTable = true noClasses = true style = \u0026#34;monokai\u0026#34; tabWidth = 4   意味を乗っけておくと、\n   Name Description     codeFences syntaxHighlight を使うかの設定。   guessSyntax 書かれている言語を推測してハイライトするかの設定。   hl_Lines highLight する範囲の設定で、monokai だと黄色くなる。書き方は\u0026quot;8 10-17\u0026quot;みたいな感じ。   lineNoStart 最初の行カウントを何にするかを決められる。普通は 0 か 1 だと思う。   lineNos 行数つけるかを決める。   lineNumbersInTable 行数とコードを html として、別のブロックで分けるかを決める。trueにしているとコピペがしやすい。ただ横幅がfalseの設定のときよりやや長くなる。   noClasses スタイル指定をクラスで行うかを決める。   style 何のスタイルを使うかを決める。   tabWidth tab 幅。2 か 4 で迷う。    My 設定 最後に自分の設定乗っけておきます。\n1 2 3 4 5 6 7 8 9 10 11  [markup] [markup.highlight] codeFences = true guessSyntax = true hl_Lines = \u0026#34;\u0026#34; lineNoStart = 1 lineNos = true lineNumbersInTable = true noClasses = true style = \u0026#34;monokai\u0026#34; tabWidth = 4   参考  Highlight Shortcode Hugo v0.60 から既定の Markdown パーサが Goldmark になったようだ Escaping Hugo shortcodes({{}}のエスケープ方法/記事書くときに参考にしました)  ","ref":"/2020/hugo-can-show-numberline-on-code-by-config/","tags":["hugo"],"title":"configの設定からHugoで表示するコードに番号を表示する"},{"contents":"Github-Actionsでhugoのデプロイを自動化してみたはじめに 結構前から GitHub-Actions を使ってみたいなと思っていましたが、題材がなく困ってました。 そこで、「なにか定期的にデプロイしてるやつってあったっけ」と考えたところ\n「そういや hugo のデプロイって自動化できるんじゃね？」という考えに行き着き、実際にやってみた感じです。\nTL;DR  この記事は hugo 用リポジトリと homepage 用リポジトリで分割している場合の説明です GitHub-Actions を利用してデプロイすることは可能  hugo 用の action がすでに存在するので、そちらを利用すると良い   GitHub-Actions 用の yml ファイルを下に記載しているので、参考になるかも 別リポジトリにデプロイする場合はアクセスキーの準備が必要 CD 時に hugo のバージョン差異に注意しないと、デプロイ結果が微妙に異なる可能性あり（v0.60.0 で Markdown にアップデートがあった）  現在の環境整理 とりあえず、どう変わったのかをイメージでざっくりと載せてみました。\n移行前 ターミナルで shellScript を走らせて、管理用リポジトリとブログ用リポジトリにあげてました。\n移行後 管理用リポジトリに push するだけで、ブログがデプロイされるようになりました。\n shellscript 動かす環境じゃない（今は早々ないと思いますけど） とりあえずサクッと作成/編集したい GitHub 上でちょっと修正したい  といったときに git さえ入っていれば実行可能になりました！\n実際の作業 作業の洗い出し 今までデプロイするために使っていたdeploy.shで行っていた作業を洗い出す（洗い出すっていう程量ないけど…）\n git でコミット（homepage） hugo でデプロイ public 以下を push（AmatsukiUrato.github.io）  yml ファイルへの落とし込む steps以下の階層にいるname毎で job が切れています。\n最後の job に${{ secrets.ACTIONS_DEPLOY_KEY }}とりますが、こちらは GitHub のリポジトリ上で秘密鍵を登録しておくと、key が呼び出せるといったものになります。 GitHub-Actions を走らせているリポジトリとは別のリポジトリにデプロイする際などに必要です。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35  name:github pageson:push:branches:- masterjobs:build-deploy:runs-on:ubuntu-18.04steps:- name:Checkoutuses:actions/checkout@v2- name:Checkout theme repositoryuses:actions/checkout@v2with:#Themeを適応させるrepository:Tazeg/hugo-blog-jeffprodpath:themes/hugo-blog-jeffprod- name:Setup Hugouses:peaceiris/actions-hugo@v2with:hugo-version:\u0026#39;latest\u0026#39;- name:Buildrun:hugo --minify --cleanDestinationDir- name:Deployuses:peaceiris/actions-gh-pages@v3with:deploy_key:${{ secrets.ACTIONS_DEPLOY_KEY }}## 秘密鍵はgithub側で登録しておくexternal_repository:AmatsukiUrato/AmatsukiUrato.github.iopublish_dir:./publicpublish_branch:master  さいごに GitHub-Actions は思ってたより使いやすかったです。でも、一番触ってみたかったビジュアルワークフローはどうやら yml ファイルが導入された際になくなってしまったようです 😭 公式からは、検討するけど今すぐ復活はしないよという方針らしいです。\npublic リポジトリは無料で利用できるし private も 2000 分/月は無料みたいなので、お金をあんまり気にせずチェックできる点はよかったです 😋 GitHub 専門でいうと、TravisCI がありますが、GitHub-Actionsは private でも無料な点はでかいかもしれないです。後は無料で macOS デプロイできるところですかね？\nCD は上手くいくと楽しいので、ぜひやりましょう 😎\n参考  peaceiris/actions-hugo: GitHub Actions for Hugo ⚡️ Setup Hugo quickly and build your site fast. Hugo extended, Hugo Modules, Linux (Ubuntu), macOS, and Windows are supported. peaceiris/actions-gh-pages: GitHub Actions for GitHub Pages 🚀 Deploy static files and publish your site easily. Static-Site-Generators-friendly. 新しくなった GitHub Actions で Hugo ブログのデプロイをしてみた - Qiita Hugo のビルドを Github Action で自動化する - 1 ミリもわからん  ","ref":"/2020/build-hugo-homepage-by-github-action/","tags":["hugo","github-actions","ci"],"title":"Github-Actionsでhugoのデプロイを自動化してみた"},{"contents":"Hugoで一度publishしてしまったファイルをデプロイ時に消すはじめに hugoでデプロイする際に、よくミスって不要記事を publish してしまうことがあります。 その後再度公開を行うと、出力元のフォルダからは消えているのにもかかわらず残り続けます。\n今回はそれの解決を行いました。\n（今までは public 以下をスクリプトで消してた…）\nTL;DR  hugo --cleanDestinationDirでおｋ  How to ほぼほぼ TL;DR で終わっちゃってますが、個人的に TL;DR がある記事のほうが手っ取り早く答えを見つけられると思っているので記載してます。\nググってもあんまり情報がなかったので、こういうときはとりあえず、help を見ようということで見たら乗ってました ✌️\n以下がhugo server -hの内容です（Version : Hugo Static Site Generator v0.58.3）。該当箇所は一応矢印で強調してます。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76  Hugo provides its own webserver which builds and serves the site. While hugo server is high performance, it is a webserver with limited options. Many run it in production, but the standard behavior is for people to use it in development and use a more full featured server such as Nginx or Caddy. \u0026#39;hugo server\u0026#39; will avoid writing the rendered and served content to disk, preferring to store it in memory. By default hugo will also watch your files for any changes you make and automatically rebuild the site. It will then live reload any open browser pages and push the latest content to them. As most Hugo sites are built in a fraction of a second, you will be able to save and see your changes nearly instantly. Usage: hugo server [flags] Aliases: server, serve Flags: --appendPort append port to baseURL (default true) -b, --baseURL string hostname (and path) to the root, e.g. http://spf13.com/ --bind string interface to which the server will bind (default \u0026#34;127.0.0.1\u0026#34;) -D, --buildDrafts include content marked as draft -E, --buildExpired include expired content -F, --buildFuture include content with publishdate in the future --cacheDir string filesystem path to cache directory. Defaults: $TMPDIR/hugo_cache/ ## ⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️ --cleanDestinationDir remove files from destination not found in static directories ## ⬆️⬆️⬆️⬆️⬆️⬆️⬆️⬆️⬆️⬆️⬆️⬆️⬆️⬆️⬆️⬆️⬆️⬆️⬆️⬆️⬆️⬆️⬆️⬆️⬆️⬆️⬆️⬆️⬆️⬆️⬆️⬆️⬆️⬆️⬆️⬆️⬆️⬆️⬆️⬆️⬆️⬆️ -c, --contentDir string filesystem path to content directory -d, --destination string filesystem path to write files to --disableBrowserError do not show build errors in the browser --disableFastRender enables full re-renders on changes --disableKinds strings disable different kind of pages (home, RSS etc.) --disableLiveReload watch without enabling live browser reload on rebuild --enableGitInfo add Git revision, date and author info to the pages --forceSyncStatic copy all files when static is changed. --gc enable to run some cleanup tasks (remove unused cache files) after the build -h, --help help for server --i18n-warnings print missing translations --ignoreCache ignores the cache directory -l, --layoutDir string filesystem path to layout directory --liveReloadPort int port for live reloading (i.e. 443 in HTTPS proxy situations) (defa ult -1) --meminterval string interval to poll memory usage (requires --memstats), valid time un its are \u0026#34;ns\u0026#34;, \u0026#34;us\u0026#34; (or \u0026#34;µs\u0026#34;), \u0026#34;ms\u0026#34;, \u0026#34;s\u0026#34;, \u0026#34;m\u0026#34;, \u0026#34;h\u0026#34;. (default \u0026#34;100ms\u0026#34;) --memstats string log memory usage to this file --minify minify any supported output format (HTML, XML etc.) --navigateToChanged navigate to changed content file on live browser reload --noChmod don\u0026#39;t sync permission mode of files --noHTTPCache prevent HTTP caching --noTimes don\u0026#39;t sync modification time of files --path-warnings print warnings on duplicate target paths etc. -p, --port int port on which the server will listen (default 1313) --renderToDisk render to Destination path (default is render to memory \u0026amp; serve from there) --templateMetrics display metrics about template executions --templateMetricsHints calculate some improvement hints when combined with --templateMetrics -t, --theme strings themes to use (located in /themes/THEMENAME/) --trace file write trace to file (not useful in general) -w, --watch watch filesystem for changes and recreate as needed (default true) Global Flags: --config string config file (default is path/config.yaml|json|toml) --configDir string config dir (default \u0026#34;config\u0026#34;) --debug debug output -e, --environment string build environment --ignoreVendor ignores any _vendor directory --log enable Logging --logFile string log File path (if set, logging enabled automatically) --quiet build in quiet mode -s, --source string filesystem path to read files relative from --themesDir string filesystem path to themes directory -v, --verbose verbose output --verboseLog verbose logging   一応該当箇所の日本語訳も書いておくと、\n「スタティックなディレクトリにはないやつを出力先フォルダから消すでー」\nといった感じです。そのまんまですね。\nさいごに ちゃんと、公式の、ドキュメントは、読もう 📔\n参考  help コマンド 公式  ","ref":"/2020/how-to-clear-old-publish-files/","tags":["hugo","command"],"title":"Hugoで一度publishしてしまったファイルをデプロイ時に消す"},{"contents":"しょぼい記事の投稿でも、何もしないよりは良いと思う今日このごろはじめに ここ一ヶ月、何も更新できていませんでした。\nネタはあったのですが、明日書けばいいや病にかかってしまい結局何もできていなかったという感じです。今回の問題をちょっと自分なりに振り返ってみようと思いました。\nTL;DR  環境を変えよう ♻️ 記事の量は自分に合わせよう 📄 業務は程々に、僅かな時間をみつけて勉強時間をこしらえる 🏃‍♂️  原因 「さぁ書こう」という環境に身を置かなかった 自分は基本的に家にいると、一日中動画かゲームをしてしまいします 🎮\n勉強とか読書とかは、なんかめちゃくちゃやりたいという周期がありまして、その周期が来ないと家では基本的にやんないです 😭…\nでは、これまではどうして書けてたかというのを考えたところ、やはり環境が大きいと思いました。 何か少し踏ん張りがいることをするときは、会社の帰りにモスバーガーで PC 開いてやっとります。比較的すんなりと本来やりたかったことを始められて、家に帰ったときでも持続してるときが多いので、とりあえず何かしたいときは環境を変えるのは大切だと感じております\n重いものを書こうとしてしまった 個人的な感覚ですが、記事を書くのに一日ぐらいかかるやつは、長続きしないです。理由としては、\n 始めるのがまず重い 🥌 まとめきらないと、publish できないと思ってしまう 📝 記事ができないので、更新しなきゃと思うがやりたくない心理が動く 🛌  かなと考えています。 とくに 3 番は大きくて、テスト勉強をギリギリまでやりたくない、まだ戦えると考えてた人は気をつけたほうが良いと思います。\n\u0008 単純に業務が伸びてた 平日の業務がまぁまぁ忙しいと、「時間的に今日は帰るしかないな」となり、結局家でようつべとかニコ動を見るといった流れになってしまいます。心の強い人は良いかもしれませんが、メンタル雑魚の自分には無理でした。\n土日があるじゃん！という話ですが、こんな流れで土日に入ると僕の場合はやる気が出ないですね… 平日の 5 日のうち、この日はモス 🍔（自分の場合）行くぞと決めて環境を変えるのがやっぱり良いなと感じました。どうしても忙しいときは仕方ないですが、なるべく時間をコントロールできるようになりたい。\nさいごに なんか色々書きましたが、結局自分の頑張り次第なとこはある 💪💪\n自分にはガッツリパワーを出すのが大変なので、ぼちぼち運行で行きたいと思いましたまる 🚂\nでも、やりたい気分が来たときはその瞬間風速をできるだけ活かせるようすぐに取り掛かったほうが良いと思う。 自分のペースでできる範囲のことをぼちぼち気楽にやっていけば良い 😇\n最後に、ありがとうモスバーガー！🙇‍♂️🙇‍♂️\n","ref":"/2020/subtle-post-is-better-than-nothing/","tags":["poem"],"title":"しょぼい記事の投稿でも、何もしないよりは良いと思う今日このごろ"},{"contents":"PowerShellの色を変えようと思ってたら、Windows Terminal(Preview)で変更してたTL;DR  Color Toolでもできるっぽいが、今後はWindows Terminalを使う Settingsのprofilesに設定を記述すると適応される 詳細はここを確認すること  はじめに プライベートでは MacBook Pro を使用しているのですが、会社では ThinkPad の WindowsPC を開発 PC として利用しています。\nちょっとした作業をする際には、WSLを利用して行うようにしているのですが、どうしてもPowerShellで処理を走らせないと駄目な場面がでてきます。そこでようやくPowerShellを開くのですが、デフォルトの色が嫌がらせレベルで見ずらい…\nということで、色を変更する方法を調査しました。\n変更方法を探す 🔎 軽くググったところ、どうやらColor Toolという Windows チームが作成した非公式のツールを使えば変更できるみたいです。\n 10 分で Windows PowerShell の配色とフォントを変更して”使える”ツールに変貌させる Color Tool April 2019  しかし、こちらのリポジトリの最新版がWindows Terminalになっていることから、\n「今後はWindows Terminalの設定で色変更ができるようになるから、そっちで変更したほうがええで 🤗」\nという事になっていると思われます。\nそのため、今回はWindows Terminalを利用する形で色変更を行いたいと思います。\nWindows Terminal で色変更を行うまで 🎨 まず、Microsoft Store or Githubから最新版をダウンロードしてきます。起動すると、以下のようなターミナルが開くと思いますので、画像の箇所をクリックして、Settingsをクリックします。\nSetting を開くとprofiles.jsonが開かれます。 こちらに、色などの設定を記載します。\nテーマを適応したい場合は、Schema にテーマを追加した後にprofilesの該当ターミナルの設定にcolorschemeとして名前を追加すれば OK です。\n試しに以下のテーマを適応してみました。\n 適応すると以下のようになります。背景、入力文字、エラー文字がデフォルトのPowerShellから変わっていることが確認できます。\n他にも背景に gif 画像を設定できたり、細かなキー設定ができたりと結構カスタマイズ性が高いっぽいので、好きな人はガッツリカスタマイズするのもありだと思います。\n詳細は、こちらに書かれています。\n私はとりあえず、foregroundとbackgroundのみ変更して利用をしています。\n以下が自分のprofiles.jsonです。一応載せておきます。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50  // To view the default settings, hold \u0026#34;alt\u0026#34; while clicking on the \u0026#34;Settings\u0026#34; button. // For documentation on these settings, see: https://aka.ms/terminal-documentation { \u0026#34;$schema\u0026#34;: \u0026#34;https://aka.ms/terminal-profiles-schema\u0026#34;, \u0026#34;defaultProfile\u0026#34;: \u0026#34;{Your GUID}\u0026#34;, \u0026#34;profiles\u0026#34;: [ { // Make changes here to the powershell.exe profile \u0026#34;guid\u0026#34;: \u0026#34;{Your GUID}\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;PS\u0026#34;, \u0026#34;commandline\u0026#34;: \u0026#34;powershell.exe\u0026#34;, \u0026#34;hidden\u0026#34;: false, \u0026#34;fontSize\u0026#34;: 10, \u0026#34;background\u0026#34;: \u0026#34;#2f2f38\u0026#34;, \u0026#34;foreground\u0026#34;: \u0026#34;#c6d9fd\u0026#34; }, { // Make changes here to the cmd.exe profile \u0026#34;guid\u0026#34;: \u0026#34;{Your GUID}\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;cmd\u0026#34;, \u0026#34;commandline\u0026#34;: \u0026#34;cmd.exe\u0026#34;, \u0026#34;hidden\u0026#34;: false }, { \u0026#34;guid\u0026#34;: \u0026#34;{Your GUID}\u0026#34;, \u0026#34;hidden\u0026#34;: false, \u0026#34;name\u0026#34;: \u0026#34;Ubuntu\u0026#34;, \u0026#34;source\u0026#34;: \u0026#34;Windows.Terminal.Wsl\u0026#34;, \u0026#34;fontSize\u0026#34;: 10, \u0026#34;background\u0026#34;: \u0026#34;#2c2525\u0026#34;, \u0026#34;foreground\u0026#34;: \u0026#34;#fdc6c6\u0026#34; }, { \u0026#34;guid\u0026#34;: \u0026#34;{Your GUID}\u0026#34;, \u0026#34;hidden\u0026#34;: false, \u0026#34;name\u0026#34;: \u0026#34;Azure Cloud Shell\u0026#34;, \u0026#34;source\u0026#34;: \u0026#34;Windows.Terminal.Azure\u0026#34; } ], // Add custom color schemes to this array \u0026#34;schemes\u0026#34;: [], // Add any keybinding overrides to this array. // To unbind a default keybinding, set the command to \u0026#34;unbound\u0026#34; \u0026#34;keybindings\u0026#34;: [] }   さいごに よく使うソフトを整備することは、効率化やモチベアップにつながるので、継続的に知識を入れていきたいです 🤓\nwindows terminal を調べていると、他のターミナルも気になりました。気力があれば記事にします。\n参考  Profiles.json Documentation Windows Terminal Setting ベータ版 10 分で Windows PowerShell の配色とフォントを変更して”使える”ツールに変貌させる Color Tool April 2019  ","ref":"/2019/tried-to-change-powershell-color/","tags":["Windows","Windows Terminal","PowerShell","Terminal","Setting"],"title":"PowerShellの色を変えようと思ってたら、Windows Terminal(Preview)で変更してた"},{"contents":"バージョンの付け方を調べてみたはじめに 今日、別部門の先輩から\n「お前のところのプロジェクトはどんな感じでバージョンの番号つけてる？」\nと聞かれたので、\n「年月日で付けてます。」\nと返したのですが、世間ではどういった感じで付けてるかをしっかりと意識してみたことはないと思い、調べてみました。\nさまざまな命名方法 いくつか、慣習で決められているものもあるようです。\n丸投げになってしまいますが、めちゃくちゃまとめられた記事を見つけたのでこちらを見るとわかりやすいです。\nバージョンにあれこれ考えを巡らせてみる\n各ソフトウェアのバージョン定義 自分が思いついた物のバージョン表記について調査しました。\nLTS 版や Stable 版などの表記は省いてます。\nOS  Ubuntu  [YY].[0M] YY: 年 0M: 月   ArchLinux  [YYYY].[0M].[0D] YYYY: 年 0M: 月 0D: 日   CentOS  [A].[B].[CCCC] 恐らく  A: Major B: Minor C: Patch     Windows 10  [AAAA] A: Version    プログラミング言語  Python  [A].[B].[CC] A: Major:重要な変更リリース B: Minor:大きくない変更 C: Micro:バグフィックス   Node.js  [AA].[BB].[C] A: Major B: Minor C: Revision   Ruby  [A].[B].[C] A: Major:メインのバージョンアップ B: Minor:互換性があるバージョンアップ C: Patch:バグフィックス   Java  [AA].[B].[C].[D]  A: Feature: 機能リリース B: Interim: 暫定リリース（バグ修正、機能強化） C: Update: セキュリティリリース、リグレッション解決、バグ修正などのアップデート用 D: Patch: 重大な問題を修正するための緊急リリース  Patch は 0 の場合無視される        アプリ  Unity  [YYYY].[A].[BB] Y: 年 A: Major B: Minor Major が 4 だと、LTS 版らしい   IntelliJ  [YYYY].[A].[B] Y: 年 A: Major B: Minor   Chrome  [AA].[B].[CCCC].[DD] A: Major B: Minor C: Build D: Patch   Docker  [AA].[BB].[C] A: Major B: Minor C: Patch   HearthStone(Game)  [AA].[B].[C].[DDDDD] A: Major B: Minor C: Patch D: Build?（想定）    調べてみて  バージョンは、ユーザ側で改修させることを想定していないのであれば、ただの符号です 定期リリースやリリースの重要度が固定されているもの、符号として扱うことでユーザにわかりやすくるすことを想定するなら、バージョンを日付にするのはありよりのあり 何回か命名規則を変えているものや、ややこしい単語を追加しているものはそれだけで、ユーザ側は理解しづらくなるし萎えます バージョンは正しく管理できていれば何でも良さそう 正しく定義されていると、共通認識ができるので運用しやすそうとも思いました  さいごに 色々なバージョンの付け方があって、面白かったです。 複雑なバージョンをつけるのは、それはそれでロマンがありますが、やはり使用者にとってわかりやすくするのが一番だと思いました。\nセマンティックバージョニングでも、同じようなことが書かれています。\n このアイデアは新しいものでもなければ、革新的なものでもありません。実際、みなさんも似たような取り組みを既におこなっているかもしれません。問題は「似ている」のでは不十分だということです。正式な仕様書による取り決めがなければ、バージョンナンバーは依存性の管理において基本的には無意味です。上記のアイデアに対して名前と正確な定義を与えることよって、あなたの開発するソフトウェアにおいて、あなたの意図がユーザーに対して伝わりやすくなることでしょう。一度、これらの意図を正確にしてしまえば、柔軟な（しかし、柔軟すぎてはいけない）依存性の仕様を作ることができます。 セマンティック バージョニング 2.0.0\n 決して Stains;Gate のダルみたいな命名はしてはいけない （確かにかっこよくてロマンはあるけど）\nバージョンを名前で管理するときは、最初にちゃんと決めよう。\n後もっとわかりやすいところに定義を書いとけ！！めちゃくちゃ探したぞ！\n参考  セマンティック バージョニング 2.0.0  バージョン番号の振り方（GitHub 推奨）   CalVar  日付を元にバージョンを定める「カレンダー・バージョニング」という考え方   https://web-dev.hatenablog.com/entry/unity/version-and-release-plan バージョンにあれこれ考えを巡らせてみる  各種ソフト・ハード  CentOS  Release Notes for supported CentOS distributions   Docker  Docker Engine release notes   Java  JDK 11 Documentation \u0026gt; Version-String Format   Python  一般 Python FAQ   Node.js  Node.js Release Working Group Node.js \u0026gt; Releases Node.js 基礎知識   Ruby  第 1 回　Ruby のバージョンアップのおはなし (中越智哉) Ruby Releases   Windows  Windows 10 リリース情報   IntelliJ  Releases | IntelliJ IDEA Blog   HearthStone  Patches    ","ref":"/2019/what-kind-of-management-version/","tags":["Tech","Version"],"title":"バージョンの付け方を調べてみた"},{"contents":"使ってよかったVSCode拡張機能14選+3選の紹介一軍 この枠で紹介している拡張機能は、高い汎用性を持っており私自身も良く使っている拡張機能たちです。\nSettings Sync♻️ VS Code の拡張機能を移行する場合や、バックアップするときに大活躍！\nとりあえず入れとけスタイルでオッケーな拡張機能。\nかったるい移行作業をめちゃくちゃ楽にしてくれる。端末が壊れても安心だし、真っ先に入れても良い拡張機能かも。自分で管理しても良いけどね。\nDownload Page\nテキスト校正くん 👨‍🎓 VS Code 上にあるテキストを自動で添削してくれるスグレモノ。 どこかに議事録やまとめた文章を提出する前に少し確認するだけで、最低限の日本語は担保されるところが良い 😚\nDownload Page\nCode Spell Checker👨‍🏫 テキスト修正の英語版。間違ったスペルを教えてくれる。これで typo が結構減ると思います。英語が苦手なあなたでも安心（俺やんけ）。\n固有名詞もユーザ辞書登録すれば、エラー回避できるので便利。\nDownload Page\nTrailing Spaces✨ こいつをいれてから、文章の後ろにムダなスペースを入れることはなくなった。 赤色で視覚的も見やすく Good（色は変更可能）。ただし、Markdown 書くときの改行はちょっと気になる。\nDownload Page\nindent-rainbow🌈 その名の通り、インデントに色を付けてくれる拡張機能。\nパット見でどこのラインを編集しているのかがわかるので、非常に便利。ネストが深くなっても安心 😇（だからといって深くするのはやめてくれ…）\nDownload Page\nBracket Pair Colorizer🌈 ペアの括弧同士が同じ色になるので、どこで始まってどこで終わるのかがわかりやすい。\npythonなどのインデントがプログラムの仕組みに組み込まれているものならindent-rainbowだけで問題ないのですが、変なインデントが大量にある闇プロジェクトではこちらが大活躍します。普通に使ってても十分に便利なんですけどね。\n後は完全な独断と偏見なのですが、関数型言語にはあったほうが良いと思われます（括弧がいっぱいあるから）。\nDownload Page\nVisual Studio IntelliCode💡 勝手に候補の中から、一番いい感じのやつを選択してくれるやつ。\nあんまり意識したことはないけど、便利に使えているということは役に立っていると思われ\nDownload Page\nvscode-icons🏷 多分定番の拡張機能。さまざまな icon が視覚的にわかりやすく表示されるようになる。\u0008\n個人的には、フォルダーの識別とかが好き。\nDownload Page\nMarkdown Preview Enhanced🔍 Markdown Preview の拡張版。PlantUml が使えたり、pdf化やhtml化が行えるようになっていたりと、 大幅に拡張されている。とりあえず入れておきたい拡張機能の 1 つ。\nDownload Page\nMarp for VS Code🎨 MarkdownToSlide の決定版。記事で一度紹介しました。\nChrome のパスを指定してあげることで、pdfやpptxなどのスライドへ VS Code 上から変換できる。\nMarp CLI もいいけど、ぱっと簡単に使うならこっち。\nちなみに、Mac の Chrome パスは/Applications/Google\\ Chrome.app/で設定すればおｋなはず。\nDownload Page\nLive Server🐟 ワンクリックで、現在のディレクトリを元にしたローカルサーバを建てられるスグレモノ。\nローカルで何か確認したいときがあればこちらをどうぞ。\nDownload Page\nGitLens — Git supercharged🥽 拡張機能のタイトルに付いていてちょっとムカついたが、その名の通り、gitをめちゃくちゃ便利にしてくれる拡張機能です。 行の右にコミットが表示されたり、過去の履歴を表示させたりとgitのことならこいつにおまかせ感がある。\nDownload Page\nCode Runner🏃‍♂️ ちょっとコードを動作させたいときにとても便利です。\nさまざまな言語に対応しているみたいなので、結構好きな言語でショートコードの確認ができたりする。下図は Java の例です。\nDownload Page\nTODO Highlight💡 TODO:やFIXME:などがデフォルトで設定されていますが、NOTE:やDONE:など、自身のオリジナルタグを追加することで色々な用途に利用可能です！ 自分はメモとかにも利用しています。\nDownload Page\n二軍 そこまで頻繁に使わないものや、少し尖ったもの。\nvscode-spotify🎵 下のバーに Spotify の情報が表示される。\n音楽聴きながら作業していると、地味に画面移動をするシーンが多いので VS Code1 つで収まるのは便利。\nDownload Page\nBetter Comments📝 特定のコメント文字列（TODO、!、?など）に対して、色を付けてくれる拡張機能です。\nDownload Page\nfilesize📁 左下にファイルのサイズを表示するだけのアプリ。たまに便利。\nDownload Page\n","ref":"/2019/good-extentions/","tags":["VSCode","Extension","Utility"],"title":"使ってよかったVSCode拡張機能14選+3選の紹介"},{"contents":"Hugoで記事が一年以上過ぎた場合はnoticeを表示するようにしたTL;DR 以下の書き方で実装可（⚠️Bulmaでの実装）\n1 2 3 4 5 6  {{$year:=(div(subnow.Unix.Lastmod.Unix)31536000)}} {{ifle1$year}} \u0026lt;div class=\u0026#34;notification is-warning\u0026#34;\u0026gt; この記事は、掲載されてから {{$year}} 年間修正されておりません。 \u0026lt;/div\u0026gt; {{end}}    Hugo 公式の.Unixページを見よ  はじめに 唐突に、「記事が老朽化している表示」はほしいなと思い、色々と検索して実装ができた感じです。Goのテンプレートエンジンにだけ詳しくなっていく…\n方法 一番上に書いてあるとおり、\n1 2 3 4 5 6 7  \u0026lt;!-- 再掲 --\u0026gt; {{$year:=(div(subnow.Unix.Lastmod.Unix)31536000)}} {{ifle1$year}} \u0026lt;div class=\u0026#34;notification is-warning\u0026#34;\u0026gt; この記事は、掲載されてから {{$year}} 年間修正されておりません。 \u0026lt;/div\u0026gt; {{end}}   で実装できる。\n実際の表示はこんな感じ 😗\n多分上記のコードを読んだらわかると思いますが、一応解説します。\n1  {{$year:=(div(subnow.Unix.Lastmod.Unix)31536000)}}   ここでは、\n 現在時刻の Unix 時刻と最終更新の Unix 時刻を取得して、引く 記事を更新してから何秒経過したのかがわかるので、31536000 秒（一年=365 日で計算）で割り、時刻を年単位変換します。 $year 変数に代入  を行っています。\n後は、1 年以上かどうかで if 文判定して表示している感じです。 Hugo の.Unixページに書いてあったのになぜもっと早く見ておけばよかった。公式ページでは 1 日を算出しています。\n計算が面倒くさい人用に、早見表を参考に置いてます。\n参考  「早見表」すぐわかる 1 分～ 100 年まで何秒なのか一覧表 Hugo \u0026gt; .Unix Go の template における値の評価の書き方 Hugo でも「この記事は最終更新日から X 年以上経過しています」みたいなアラートを表示したい  ","ref":"/2019/show-notification-if-now-greater-equal-updated-time/","tags":["hugo","go","template"],"title":"Hugoで記事が一年以上過ぎた場合はnoticeを表示するようにした"},{"contents":"Three.jsを学習する【第一回】前回のブラウザで AR を使ってみたを触って、オブジェクトをThree.jsで作りたいと思いました。\nThree.jsを学習するにあたって、良さげなサイトがあったので、こちらを参考に学習していこうと思います。忘備録です。\nfunction をアロー関数に変える なんでアロー関数にしたいのかは、関数宣言 vs 関数式 | ES2015+を参照。\n1 2 3 4 5  window.addEventListener(\u0026#39;load\u0026#39;, init); function init() { // 処理 }   から\n1 2 3 4  const init = () =\u0026gt; { // 処理 }; window.addEventListener(\u0026#39;load\u0026#39;, init);   に変える。\nThree.js でオブジェクトを表示させるには  レンダラーを作成する シーンを作成する  意味 レンダラー  描画するシステムのこと\nレンダリングエンジン\n シーン 3D 空間のこと。オブジェクトの置き場になる。\nカメラ どの位置から撮影するかを決めるシステムのこと。\nメッシュ 表示オブジェクトのこと。\nメッシュを作成するには、ジオメトリとマテリアルが必要。\nジオメトリ 形状のこと\nマテリアル 色、質感などの情報のこと\n","ref":"/2019/study-three.js-1/","tags":["Three.js","JavaScript"],"title":"Three.jsを学習する【第一回】"},{"contents":"git-secretsのawsトークン保護を検証してみたはじめに 昨日、日課のはてなブックマークを漁っていたところ、Developers.IO さんの AWS でのセキュリティ対策全部盛り[初級から中級まで]というスライドを見つけました。\n こちらのスライドの中で、git-secretsという AWS などの token 情報をgitに乗せてしまうのを防ぐソフトが紹介されており、以下のパターンの場合に正しく検知できるのかが気になったため検証しました。\n 既に token がコミットされていた場合  どのように検知するのか？   既に token が混入してるコミットをプッシュした際には検知できるのか  既に token がコミットされていた場合 検索したところ、一年前に検証している人がいたみたいです。\n 既存のリポジトリにあとから git-secrets を対応させた場合、過去の commit 履歴を検査したいことがあるでしょう。その場合は、git secrets \u0026ndash;scan-history を行うことで、git history をスキャンして検査することができます。まとめて以下に例示します。 git-secrets はじめました\n 一応、自分でも確認しようと思います。\nまず、既に token がコミットされている git リポジトリを下記コマンドにて作成します。\n1 2 3 4 5 6 7  mkdir already-commit-token cd already-commit-tokenls git init echo access=AKIAWIKPCZ5G32A503XF \u0026gt; secret.txt echo secret=G+9la481v3AbuEqs1Pr/eARTtnEI7zBQ4qtcvBxR \u0026gt;\u0026gt; secret.txt git add . git commit -m \u0026#34;commit credentials\u0026#34;   試しに、何もせずpushをしてみます。\n案の定pushできてしまいました。\n既に token が混入してるコミットをプッシュした場合 ここで、git-secretsを導入します。\n1 2  git secrets --install git secrets --register-aws   そしてpushテストをしてみます。 一度リモートにpushしているので、新しいリポジトリを作るか、forcePush でリモートを掃除してください。私は新しいリモートにpushしました。\nアップロードされているみたいですね 😈\nそもそも、git-secretsの概要が\n Prevents you from committing secrets and credentials into git repositories\n(シークレットとクレデンシャル情報を git リポジトリへコミットするのを防ぎます)\n となっているので当たり前といえば、当たり前です。\n既にコミットしているものを検知する 以下のコマンドで実現可能です。\n1  git secrets --scan-history   さいごに git-secretsを入れておけば基本的に token をpushしてもうたｗｗｗ w\nもう終わりや 😇😇😇 \u0026hellip;orz\nにはならずに済みます。 シークレットをpushすること自体がほぼないと思うので、リポジトリ全体の secret 保護が行えるようになる\n1  git secrets --register-aws --global   を適応しておいて問題ないと思います。\n(どうしてもpushしなければならない場合は--no-verifyオプションをつければ OK😙)\n参考 git-secrets はじめました\n","ref":"/2019/tried-using-git-secrets/","tags":["git","git-secrets"],"title":"git-secretsのawsトークン保護を検証してみた"},{"contents":"マルチAZとクロスリージョンレプリケーションの違いつい最近、表題について調べることが合ったため、忘備録として記載しておきます。\n違いについて 結論から書くと、\n クロスリージョンレプリカはサブがリードレプリカなのに対して、マルチ AZ ではスタンバイレプリカになっている クロスリージョンレプリカは複数リージョンを利用するのに対し、マルチ AZ では同一リージョンを利用する  が大きな違いかなと思います。\nMultiAZ 構成について RDS をマルチ AZ 構成で起動すると Master とは別の AZ に Slave の RDS が立ち上げられ、同期レプリケーションが行われます。俗に言う Master-Slave 構成。\nMaster がサーバダウンすれば、Slave くんが変わりに担当してくれるわけです。\nクロスリージョンレプリケーションについて 名の通り、複数のリージョンにまたがって RDS を建てる仕組みのことです。\n各リージョンには、リードレプリカが設置されて、Master がダウンすると、リードレプリカくんが代わりに担当してくれます。\nえ？じゃあ MultiAZ よりもいいんじゃね？ そうなんです、MultiAZ はオワコンです。\nと思っていた時期が私にもありました。\nクロスリージョンを行うには以下の制約があります。\n MySQL PostgreSQL MariaDB Amazon Aurora MySQL DBにしか適応できない リージョン間の通信の遅延時間が長くなる Amazon RDS のデータ転送料金が発生する VPC が 5 つを超えるクロスリージョンリードレプリカのインスタンスについては保証されていない(ACL に制限が あるため) 昇格プロセスが完了するまで数分以上かかる場合がある RDS のリードレプリカは昇格するとスタンドアロンの RDS になるため、一般的なマスタ-スレイブ構成のようにフェールバックができない  とりあえずクロスリージョンにすれば良いというわけでもないのです。\nコストや時間、RDS の DB エンジンなども考慮に入れないとベストな選択はできなさそうです。\n昇格プロセスについては、数分かかると AWS のドキュメントに記載してあったので、書いてます。\n具体的に MultiAZ とクロスリージョンとで、起動にどれぐらいの差があるかは気になりますね。\n気が向いたら検証してみます。\nさいごに DB の重要性やコスト感を考えて運用していくことが大事。\nユースケースに合ったモデルを選びましょう。\n参考  【新機能】RDS for PostgreSQL でもリージョン間レプリケーションが可能に！ AWS 公式  別の AWS リージョンでのリードレプリカの作成 \u0026gt; クロスリージョンレプリケーションの考慮事項 AWS リージョン間での Amazon Aurora MySQL DB クラスターのレプリケート Amazon RDS での高可用性 (マルチ AZ)    ","ref":"/2019/difference-between-multiaz-and-cross-region/","tags":["Amazon RDS","DB","AWS"],"title":"マルチAZとクロスリージョンレプリケーションの違い"},{"contents":"ブラウザでARを使ってみたはじめに ふと、名刺に AR マーカーが記載されていて、\n川島教授の顔みたいな（脳トレ）のが出てきたら、とてもおもしろいなと思いついて触ってみました。\n もっと脳を鍛える大人の DS トレーニング ™\n （余談ですが、脳トレのSwitch 版がでるみたいです）\nAR の実現方法 軽く検索したところ、Unity で実現する方法と Web 技術で実現する方法が見つかりました。 ネイティブで実現する方法もあると思いますが、今回はこの 2 つを見ていきます。\nUnity どうやら、Vuforiaという外部ツールと連携して使うのが主流みたいです。 iOS だとARkit、Android だとARCoreという SDK を使って作成できるみたいですが、Vuforiaはこれらをラップしてくれているみたい。\n \u0026gt;VUFORIA とは何か？AR アプリ開発に便利なライブラリの特徴 \u0026gt; Vuforia とは\n 参考  VUFORIA とは何か？AR アプリ開発に便利なライブラリの特徴 ARCore 【Unity】Unity インストールから AR アプリ作成まで(iOS, Android)【Vuforia】 【３０分でできる】Unity で簡単に AR アプリを作る  Web こちらは、AR.jsとA-Frame.jsを活用したものが主流みたいです。 A-Frame.jsでオブジェクトをレンダリングして、それをAR.jsで AR 化しているっぽいです。\nまた、今回は使用していませんがThree.js（Web ブラウザ上で 3D レンダリングできるようにするライブラリ）を組み合わせ\n参考  A-Frame と AR.js で超簡単 AR（PC・スマホ・マルチマーカー対応） 【AR.js 入門】簡単に WebAR で遊んでみた【A-Frame 使うよ】 🐶AR.js を使って WebAR 年賀状を作る 🐶  どっちにするか Unity にするなら、アセットなどのデータを使えると思うので資産的にはすごく大きいと思いますが、Unity ということは、アプリにする必要があると考えとります(Unity の WebGL ビルドがどうとかは未調査です)。\n今回は簡単に実行できてほかったのと、自分が Web 技術を中心に触っていることから、Web 技術で作る方針にしました。\n実際に動かしてみる とりあえず、「A-Frame と AR.js で超簡単 AR（PC・スマホ・マルチマーカー対応）」を参考に作ります。 上記リンクを参考に作ったソースはこちらです(ほぼコピペ 🤔)。\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;script src=\u0026#34;https://aframe.io/releases/0.8.2/aframe.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.rawgit.com/jeromeetienne/AR.js/1.5.0/aframe/build/aframe-ar.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;!-- スクリプト読み込み --\u0026gt; \u0026lt;body style=\u0026#34;margin:0px; overflow:hidden;\u0026#34;\u0026gt; \u0026lt;a-scene embedded arjs=\u0026#34;debugUIEnabled:false;trackingMethod:best;\u0026#34; vr-mode-ui=\u0026#34;enabled: false\u0026#34; \u0026gt; \u0026lt;a-marker preset=\u0026#34;hiro\u0026#34;\u0026gt; \u0026lt;a-text value=\u0026#34;Name: Urato Amatsuki\\nTwitter: @AmatsukiUrato\\nGithub: AmatsukiUrato\u0026#34; position=\u0026#34;0 0.5 0\u0026#34; align=\u0026#34;center\u0026#34; \u0026gt;\u0026lt;/a-text\u0026gt; \u0026lt;/a-marker\u0026gt; \u0026lt;a-entity camera\u0026gt;\u0026lt;/a-entity\u0026gt; \u0026lt;/a-scene\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;   a-text の部分以外は、参考先の html を使用しております。\n スマホから繋げない問題 \u0008 上記を参考に、index.htmlを作成します。とりあえずのテストなので、nginxの Docker コンテナを使って立てました。\n下記 Docker コマンドを叩くカレントディレクトリにindex.htmlをおいておけばlocalhost:8080または、同一ネットワークから[dockerを起動しているPCのip]:8080で接続が可能になります。\ndocker run --name nignx -v $PWD:/usr/share/nginx/html -d -p 8080:80 -h 0.0.0.0 nginx\n自分のスマホでアクセスしてみます。\n\u0026hellip;\n表示されない…だと!?\nやっぱり https 通信じゃないのが原因なんですかね？\n https 通信が行えていないことが原因でうまく行ってませんでした。\n同一ネットワーク内からなら行けるんじゃねという謎の考えのせい 😭\nスマホ側から動作させる 🐶AR.js を使って WebAR 年賀状を作る 🐶\nを参考にして、ruby のワンライナーで https サーバを立てたところ、うまくいきました(圧倒的感謝…!!)。\n下記ワンライナーはカレントディレクトリのデータを外部に公開してくれるものみたいです。\n1  ruby -rwebrick -rwebrick/https -e \u0026#39;WEBrick::HTTPServer.new(:DocumentRoot =\u0026gt; \u0026#34;./\u0026#34;, :Port =\u0026gt; 8000, :SSLEnable =\u0026gt; true, :SSLCertName =\u0026gt; [[\u0026#34;CN\u0026#34;, WEBrick::Utils::getservername]] ).start\u0026#39;   実際に接続してみた画像がこちらです。 今回はとりあえず、自分の Info をテキストで表示するところまで行いました。\n PC のカメラで動作させる MacBookPro のカメラで無理やり確認したやつも載せておきます。\nさいごに とりあえず、AR マーカーを使って文字を表示できるところまでは実装できました(ほぼほぼ自分が書いたところがない 🙈)。\n結局、解説ページの後をなぞって終わりになってしまったので、次やるときは、もう少し違うものを表示させてみたいです。Three.jsを触って見るものも面白いかもしれないです。\n","ref":"/2019/try-to-create-ar-page/","tags":["AR","AR.js","A-Frame","JavaScript"],"title":"ブラウザでARを使ってみた"},{"contents":"Marpが前よりも使いやすくなっていたので、触ってみたはじめに ずっと前から、スライドを何とか Markdown でかけないかをずっと考えていまして、昔は Marp を使っていました。\nしかし、かゆいところに手が届かないのが欠点で、ここ最近はrevealjsというライブラリの VSCode 拡張機能版cscode-revealを利用しておりました。\nこちらもめちゃくちゃ良くて、html でイカしたスライドを作りたいなら、めちゃくちゃありな選択肢だと思います。\nずっとcscode-revealを利用していたのですが、こちらは pdf 化を行うときがうまく行かず、pptxやpdfの資料として作成するには少し辛いものがありました。そこで再度検索したところ、Marp がバージョンアップしており使いやすくなっていたので、今回紹介します。\n公式 Repository\nMarp の良い点 個人的には\n Marp-CLIの誕生 Marp for VS Codeがある Docker コンテナもあるよ 公式 Documentが充実してきた  辺りがとても良いと思っており、助かってます。\n実際に使ってみる Marp-CLI 公式の言うとおりに、npmコマンドを用いてインストールする。\n今回はグローバルにインストールしました。\n1  npm i -g @marp-team/marp-cli   公式の Repository に習ってとりあえず pdf を生成してみます。\nMarkdown の Sample は最後に乗せています。\n1  marp [変換するmarkdownファイル] --pdf   上記コマンドで、pdf 化が行えます。\n結構いい感じで pdf 化してくれてます。\n変換後の pdf\n他にも--pptxでパワポにもできたりするので、お試しあれ 😏\nMarp-CLI(Docker) こちらも、公式の言うとおりにコマンドを実行します。\n1  docker run --rm -v $PWD:/home/marp/app/ -e LANG=$LANG marpteam/marp-cli [変換するmarkdownファイル]   docker を利用しても、ちゃんと pdf 化できていることが確認できます。\n変換後の pdf\nDocker コンテナでコンバートする際の font 問題 日本語のフォントがコンテナ内部のものに依存しているからか、微妙なフォントになっています。 docker イメージに他のフォントがないからかも(alpine linux だし)と思い、\nAlpine Linux fonts\nを参考に Google Fonts をインストールしたイメージを作成しましたが、うまくいきませんでした。\n解決策 いろいろ試しましたが、style を利用してフォントを外部インポートする方法でうまくコンバートできました。\n以下の例では googleFont をインポートしてます。Google が提供しているフォントで良いのであれば、こちらでポチポチすれば下記のインポート用のコードまで作成してくれます。\n1 2 3 4 5 6 7 8 9 10 11 12 13  --- marp: true \u0026lt;!-- marpの設定 --\u0026gt; --- \u0026lt;style\u0026gt; @import url(\u0026#39;https://fonts.googleapis.com/css?family=Noto+Serif+JP\u0026amp;display=swap\u0026#39;); section { font-family: \u0026#39;Noto Serif JP\u0026#39;, serif; } \u0026lt;/style\u0026gt; \u0026lt;!-- 以下より資料用のテキストを記載する --\u0026gt;   上記 style を含めてコンバートした際の pdf\n上記では、Noto Serif JPをインポートしてますが、おすすめは\n Noto Sans JP M PLUS 1p  です。\nさいごに Marp みたいな、イイ感じじゃないものをいい感じにするツールはやっぱり最高だと思いました！\n製作者に感謝 🙇‍♂️\nサンプル  ","ref":"/2019/updated-marp/","tags":["Marp","Nodejs","Docker","Extention"],"title":"Marpが前よりも使いやすくなっていたので、触ってみた"},{"contents":"Amazon Game Tech Night Osakaに行ってみた畑違いの業種なのですが、\nAWS Pop-Up Loft Osaka が行われるとのことだったので、Game Tech Night へ参加しました！\n会場は最初から最後まで、飲食ありのラフな感じで開催されておりました 😊\n登壇者は全員おもしろい発表をされていましたが、とくに面白かった Cloud2.0 についての所感を記載しております。\nもうそこまで迫っている！ Cloud2.0 時代の開発 info  登壇者  丹羽さん/GS2 の CEO   HP  https://gs2.io/     フルマネージドサービスを使おう  処理をフルマネージドにすることで、復旧対策や管理まで AWS が担保してくれる  あえてロックインされにいく   コントローラブルなものを利用する=問題が発生したら、自分で解決しなければならない。 フルマネージドのサービスを利用して自身の責務をなくす  API Gateway App Sync DynamoDB S3 SNS SQS Kinesis Data Firehose Athena    イベントに対してプログラミングを行う マイクロサービスを利用し、イベント駆動開発を行う。\nアプリ開発者は、自分のやりたいこと（XX のときの処理）だけを書けば良い形になる。 マイクロサービスが落ちたときの担保は、途中の通信処理を Queue に入れて行う。\nより耐久性の高いものにする  ステートレスに設計することが大切  ステートフルで設計を行うと耐障害性が下がる 運用不要にするにはサーバ側で状態を持ってはいけない   状態管理用データをどこかへ避難させることが重要  Lambda を利用する場合  DynamoDB へ逃がす（コスト高） Step Functions を利用する（コスト高）     クライアントに情報を持たす（ロールバックされても良いデータのみ）  さいごに 来月の SoftwareDesign に Cloud2.0 に関しての記事が掲載されるみたいです\n","ref":"/2019/game-tech-night-cloud2.0/","tags":["AWS","AWSLoft","Cloud2.0","Feeling","Game"],"title":"Amazon Game Tech Night Osakaに行ってみた"},{"contents":"iCloudのディレクトリをホームディレクトリに持ってくる方法クラウドストレージを比較している途中で、\niCloud を home ディレクトリに移す(シンボリックリンクを貼る)作業が少し手間だったので、メモとして載せてます。\nターミナルからアクセスしづらい問題 ターミナル上から iCloud Drive のファイルへアクセスしようとするには、\n1  Users/[userName]/Library/Mobile\\ Documents/com~apple~CloudDocs   にまでアクセスしなければならないです。\n一応シンボリックリンクは貼れますが、これも少し曲者でリンク元の方にスペース``が入っているため、クォーテーションでくくってあげないとだめです(自分は気づかずに 10 分ぐらい悩んだ)。\n1  ln -s \u0026#34;/Users/$USER/Library/Mobile Documents/com~apple~CloudDocs\u0026#34; iCloud   参考 Make A Symbolic Link to Your iCloud Drive\nターミナルから iCloud drive に移動する方法\n","ref":"/2019/how-to-display-icloud-doc-on-home/","tags":["iCloud","シンボリックリンク"],"title":"iCloudのディレクトリをホームディレクトリに持ってくる方法"},{"contents":"CloudStorageのBoxを使ってみた最近 MacBookPro を買ったこともあり、ローカルの環境を見直しておりました。 その際にバックアップ用のクラウドストレージを再検討してみたところ、Box が良さげだったので使ってみた話です。\nTL;DR  無料でクラウドストレージを利用する場合の検討です ファイルの特徴で併用していくのが良さげ 無難に行くならDropBox、容量がほしいならBox 同期時間を気にしないならOneDrive Apple 製品統一ならiCloud Driveでもいいかも  以前は DropBox を利用していた Dropbox はローカルで同期させる際も普通のファイルと同様に扱えて非常に便利だったのですが、 2.88GB の容量が限界を迎えてしまいました。 ちゃんと整理したら何とかなりそうではありましたが、少し調べたところ Box のほうが良さげだったのでこちら並行しました。\n検討したやつ 一応以下の 5 つを検討しました。 やはり、ぱっと見では GoogleDrive が一番良さげです。\n   ベンダ名 容量(GB) 履歴(日) 備考     GoogleDrive 15 30 各種オフィスツールなど   Box 10 - 履歴自体は保存されてるっぽいが、無料は使えない   iCloud Drive 5 -    OneDrive 5 30 MSOfiice 系の Online 版が利用可能   DropBox 2 30 ミッション達成で容量追加あり(自分は+0.88GB)    GoogleDrive 一番最初に使おうとしていたのはこいつです。 会社や個人の WindowsPC にて利用しており、快適に使えていたからです。 しかし、ドライブファイルストリームが無料で利用できない点に困りました。\nドライブファイルストリームとは、ローカルフォルダと Google のクラウドストレージを同期させて、あたかもローカルフォルダかのように利用できるというものです。 バックアップと同期を利用するとその名の通り、ローカルにもデータが保存されるため(あくまでもバックアップして利用する形になる)、ローカルのストレージが圧迫されます。\nバックアップとしては利用せず、リモートにあるストレージとして Web から利用するのが良いと思ってます。\nBox 今回こいつを利用することにしました。 ストレージも 10GB とそこそこあり、少し使った感じ問題なく利用できそうだったからです。 ただ、無料プランでは履歴管理ができない点は少し悲しいです。\n個人の無料プランを見つけるまでが少し大変でした(自分だけかも)。 一応下にどこからサインアップできるかを貼っておきます。\n iCloud Drive iCloud Drive は 5GB と少し心もとないですが、もともと使っていた Dropbox と比べれば２倍に増えるのでこちらでも良いかなと思いました。 しかし、ターミナルから iCloud Drive へアクセスしづらいという問題があります(一応解決済) バージョン管理機能については、少し探したのですが見つかりませんでした。\nターミナルの調整が面倒だし、特に Apple 信者でもないので今回は使わない方針で行きました。Apple 端末をいっぱい持ってる人ならiCloud Driveは良いかもしれないです。\nOneDrive Google と比べ容量こそ少ないものの、履歴管理は見やすく、Microsoft Office 系の Online 版(一部機能制限あり)を使えるのはかなり良いと思います。 しかし、MacBookPro にて、ローカルからリモートへの同期が不安定だったため、要注意です。\nDropbox ずっと使っていた Dropbox も一応再検討してみました。 再検討はしましたが、やはり 2.88GB は少し厳しいものがあります。\nしかし、クラウドストレージが流行りだした初期の頃から運営されていることもあり、UI などは洗礼されていると思います。 また、同期もスムーズです。 サブとして使う分にはありかもしれないです。\n今回の選定まとめ    ベンダ名 利用方法 コメント     Box メイン 10GB と容量も多く、同期もスムーズなので Good。一度使ってみたかったこともあって、今回はメインで使っていく予定   GoogleDrive サブ ドライブファイルストリームが使えないため、データ配布などのローカルであまり触らないファイルを利用する際に Web から利用予定   DropBox サブ 今まで利用していた分があるため、過去のデータへアクセスする際に利用する。   iCloud Drive 不採用 ユーザフォルダ直下にフォルダがデフォルトで生成されないのが使いづらい。また、Web ブラウザでの操作も個人的には使いづらかった。   OneDrive 不採用 同期が安定するなら使ってもいいかも。MS 系を制限があるとはいえ無料で使えるのはつよつよ。    という形で利用していく予定です。\n","ref":"/2019/tried-to-use-box/","tags":["CloudStorage","Box","GoogleDrive","OneDrive","iCloud","DropBox"],"title":"CloudStorageのBoxを使ってみた"},{"contents":"hugoの.GitInfoが適応された話(理由は不明です…)ずっと前から、記事の更新は git のコミット履歴を使いたいと思っていたのですが、\n.GitInfoの情報が記事にうまく反映されずnilになっていたため、手動で作業してました 😇\n.GitInfoが使えるようになった原因は恐らく、記事のパスを\n/content/post/[記事].md→/content/post/[分類用フォルダ]/[記事].md\n※[]内はそれぞれの用途で変更する\nとしたことです。\n何故これで.GitInfoが適応されたのかは不明ですが、とにかくずっとやりたかったことなので、大満足 😭\n","ref":"/2019/adapted-hugo-gitinfo/","tags":["hugo","git"],"title":"hugoの.GitInfoが適応された話(理由は不明です…)"},{"contents":"新卒と２人でhtml5を勉強した話👨‍👦TL;DR  何かをやらせるときは極力その子がやりたいことに沿って学習させる  ちゃんと意見を聞けていたら、その子からアクションを起こしてくれる 相手が自由にできるように幅をもたせておくことは大切   コミュニケーションを取る 相手のレベルを考える 自分も知識が広がるようなものを取り組むと 👍  概要 9 月頃から、上司から\n「新卒の面倒を見てやってほしい」\n「案件で使う技術を使えるようにしてほしい」\nと唐突に言われ、\nWTF と心で思いつつ学習プランを新卒と練り、１ヶ月半過ごしました。\n新卒は経済学部出身なので、ちょろっと研修(2 ヶ月)+OJT で学んできたぐらいの知識です。\nやる前に話し合ったこと 新卒と話し合う 🗣 何をするかも決まっていなかったので\n楽しいことは自分で学習する気になるという考えから\nまず、技術の中で何が一番やってて楽しかったかを伺いました。\n新卒はhtmlが好きでやりたいと話してくれました。\n案件では、SpringBootを利用した基幹システムの改修を行っているので\nhtml5は関係なくはないけど、どちらかというとJavaとかSQL、JS、gitを学んでほしいというのが正直なところでした。\nhtmlが好きということなので、とりあえず以下の方針で\nまずhtml5と何をするにしても必須のツールであるgitについての勉強をしていくことになりました。\n html5 の資格があるので、これの参考書の選択問題を毎朝約 15 分だけやる gitについて、簡単にまとめてくる(まとめ方は自由)  実際にやってみて html5 の勉強について 毎朝 15 分だけ \u0008 かつ、好きな内容だったので比較的スムーズに学習が進みました 🤗\nまた、html5とcss3を利用したアニメーションの技術資料展開も行ってくれました 😯\n良かった点  自分自身でアニメーションを学習/発表してくれたこと 楽しく学習してくれたこと こちらも勉強になったこと(ServiceWorker や IndexedDB などは知らなかった)。  git について 3 日ぐらいで Excel にまとめてきてくれました。(Excel はやめてくれ 😇)\nこの後、この資料を元手にプレゼン資料を作成してもらい、gitについての発表を行うまでに至りました\n良かった点  時系列的にはhtmlよりもこちらのほうが先に発表したので、発表するというきっかけ作りになったと感じている 発表させることによって、何が足りていないのかが明確になった 何かの経験をもたせるために外発的動機づけ(罰と報酬)を行うのは、ありだと思った(キッカケとして行うこと)  まとめ やはり、今回比較的スムーズに進んだ点として\n相手のやりたいことをやらせる/やるっきっかけを作る\nのが自主的に学習させるための一歩なのかなと思います 😉\nまた、やりたいことのヒヤリングなどを行うときには事前のコミュニケーションが重要とも感じました。\n","ref":"/2019/study-html5-with-new-employee/","tags":["study","forNewbie","poem"],"title":"新卒と２人でhtml5を勉強した話👨‍👦"},{"contents":"Material-uiのmakestyleにて、複数のクラスを動的に指定する方法TL;DR  class データを string 配列として持つ 配列.join(' ')を該当のclassName={}の中に記述する  概要 最近、React についての勉強を行っていたところ、classの指定に手間取ってしまったのでメモ。 方法としては、探したところ、以下 2 つがあるみたい。\n class 名の配列を作成して、最後に join で配列の間に``を入れて出力 classNameの中で、２つの class 名を呼び出す。  汎用性があるのは方法 1 のほうだと思われます。\n面倒くさいのでソースベタ貼りしてます。\nBoxはMaterial-uiの Util-component です。\n最後に各クラスを join でくっつける方法 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  return ( \u0026lt;Box display=\u0026#34;flex\u0026#34; alignItems=\u0026#34;center\u0026#34; justifyContent=\u0026#34;center\u0026#34; className={classes.block} \u0026gt; {(() =\u0026gt; { const discClass: string[] = [classes.disc]; if (props.discStatus === DiscStatus.White) { discClass.push(classes.discWhite); } else if (props.discStatus === DiscStatus.Black) { discClass.push(classes.discBlack); } return ( \u0026lt;Box component=\u0026#34;div\u0026#34; onClick={handleOnClickDisc} className={discClass.join(\u0026#39; \u0026#39;)} \u0026gt;\u0026lt;/Box\u0026gt; ); })()} \u0026lt;/Box\u0026gt; );   className に２つの class 名を直接入れる方法 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28  return ( \u0026lt;Box display=\u0026#34;flex\u0026#34; alignItems=\u0026#34;center\u0026#34; justifyContent=\u0026#34;center\u0026#34; className={classes.block} \u0026gt; {(() =\u0026gt; { if (props.discStatus === DiscStatus.White) { return ( \u0026lt;Box component=\u0026#34;div\u0026#34; className={`${classes.disc}${classes.discWhite}`} \u0026gt;\u0026lt;/Box\u0026gt; ); } else if (props.discStatus === DiscStatus.Black) { return ( \u0026lt;Box component=\u0026#34;div\u0026#34; className={`${classes.disc}${classes.discBlack}`} \u0026gt;\u0026lt;/Box\u0026gt; ); } else if (props.discStatus === DiscStatus.Empty) { return \u0026lt;Box component=\u0026#34;div\u0026#34; className={classes.disc}\u0026gt;\u0026lt;/Box\u0026gt;; } })()} \u0026lt;/Box\u0026gt; );   参考 https://material-ui.com/styles/basics/\n","ref":"/2019/how-to-select-multipulclass-material-ui/","tags":["React","Front","CSS"],"title":"Material-uiのmakestyleにて、複数のクラスを動的に指定する方法"},{"contents":"Windows10のVSCodeでvscode Revealが正しく動かなかった問題の解決法TL;DR 方法 1 改行コードをLFに変える\n方法 2 拡張機能でLFで書かれている部分をCRLFで書き直す\n原因 TL;DR でだいたい判ると思いますが、vscode-reveal のスライド仕切りの---がデフォではLFの設定で登録されているのが問題でした。\n revealjs の改行コード指摘ページ 日本語訳版  解決法 普通に使う場合は前者の方を実施したほうがいいと思います。 後者のやり方だと設定ファイルに書かない限り、正しく表示させる作業が毎日必要になります。\nrevealjs に読み込ませる改行コードを変える場合  拡張機能の設定画面を開く(Ctrl + ,) reveal JS の項目を探し、Revealjs: Separatorの内容にある\\nを\\r?\\nに修正する  VSCode の改行コードを変更する場合  VSCode の footer 右にある改行コードCRLFをクリック LFに変更する  ","ref":"/2019/fixed-revealjs-vscode-extention-on-windows10/","tags":["VSCode","revealjs","extention","markdown"],"title":"Windows10のVSCodeでvscode Revealが正しく動かなかった問題の解決法"},{"contents":"Route53のルーティング問題を解決した話TL;DR  外部からホストゾーンのネームサーバを指定してあげないと、レコードが帰ってこなかった Route53 のドメインのネームサーバとホストゾーンのネームサーバを一緒にする  概要 前に[Route53] -\u0026gt; [S3 のリダイレクト] -\u0026gt; [リダイレクト先ページ]\nのルーティングを行おうと思いましたがうまく行きませんでした。\n該当記事\n原因 Route53 にて、登録していたドメインに記述されているネームサーバの一覧と ホストゾーンに記載されている NS レコードの値が違っていたため、 正しくルーティングされなかったみたいです。\n解決方法としては、下記画像のように値を揃えることによって、正しくルーティングが行えるようになりました。\n思っていたよりも単純なことでミスっていたので、基礎的な知識をもう少し深めたほうが良いと感じました。。\n","ref":"/2019/resolved-routing-problem-on-route53/","tags":["Route53","AWS"],"title":"Route53のルーティング問題を解決した話"},{"contents":"Onsen-UIのDialogコンポーネントサイズを変更するTL;DR  Onsen-UI 読み込み後に出力される Dialog をコピーして手動で使う Dialog 群の形だけ取得しているので、Show, Hide 共にこちら側で呼ぶ必要あり Onsen-UI のタグオブジェクトから、Onsen-UI 側で用意されているshow(), hide()などが呼び出せる  これを使って自分で制御を行う    概要 以下の画像のような、アラートのサイズを変更したいのにできない。 Onsen-UI の公式リファレンスを見ても Dialog の項目にそれっぽい動作をしてくれる Dialog はない。。 解決方法 🤗  ons.notification.alert();を実行して、で Onsen-UI の要素を取得する。 要素を html に貼り付ける。 ons-alert-dialogにidをつけて、手動で Dialog の表示/非表示を制御する。  ons タグのオブジェクトを js で取得すると、show()やhide()などのメソッドが使用できるようになる。\nhttps://onsen.io/v2/api/js/ons-modal.html#method-show\n実行結果 🎥 以下の動画ではwidth=\u0026quot;90%\u0026quot;で設定しています \nソースコード 📓  ","ref":"/2019/change-onsen-ui-dialog-component-size/","tags":["Onsen-UI","JavaScript"],"title":"Onsen-UIのDialogコンポーネントサイズを変更する"},{"contents":"S3のリダイレクト機能でgithubのpageへ飛ばしたい完成してないです。 動きました。 前に取得した.netのドメインを踏んだときに S3 のリダイレクト機能を使ってこのページに飛べるようにしようと思い設定してました。\n出来たこと  s3 のエンドポイント(http のリンク)にアクセスすると githubPage にリダイレクトする s3 のエイリアスを作成する  出来てないところ  .netドメインにアクセスしても s3 のリダイレクト用エンドポイントにまでたどり着かない - not found エラーが発生する - Route53 での設定が正しく行えていないと予想  追記 Route53 の DNS を正しく設定できていなかったことが原因でした。 詳しくはこちらの記事を参照\n","ref":"/2019/want-to-use-s3-redirect/","tags":["AWS","S3","Route53"],"title":"S3のリダイレクト機能でgithubのpageへ飛ばしたい"},{"contents":"UbuntuのClibor的存在CopyQ概要 普段 Windows では ClipBoard の履歴にcliborを使っています。\n最近 OS を ubuntu で利用することがあり、ubuntu でコピー履歴管理を探していたところ、\nWindows/MacOS/Linux 対応の CopyQってのが見つかりました。\nさわってみて Clibor みたいに、ショートカットにAlt*2とかの設定はできませんでしたが、\n無変換に割り当てられたので概ね満足。\nCopyQ には、履歴管理以外にも機能があるみたいですが、\nとりあえずやりたいことができたので OK。\n参考  https://qualiartz.jp/digitaltransformation/automation/recommend-oss-copyq-clipboard-manager/ https://www.tecmint.com/best-clipboard-managers-for-linux/  ","ref":"/2019/copyq-like-clibor-can-use-on-ubuntu/","tags":["Ubuntu","CopyQ"],"title":"UbuntuのClibor的存在CopyQ"},{"contents":"IntelliJでwebpack導入後、フォルダが見えなくなる問題の解決法TL;DR 設定から Webpack を開いて、configuration file のパスを消す\n原因 IntelliJが賢すぎた。\nというのも、webpack のアウトプット先が intelliJ IDEA 上で Excluded(非表示になり Intellij 上から閲覧できなくなる)のは、\nwebpack の出力先フォルダだからです。\n設定は以下の場所にあり、\nPreferences | Languages \u0026amp; Frameworks | JavaScript | Webpackwebpack のconfiguration file:の項目を空文字列にすることによって IntelliJ 上から編集できるようになります。\n消している理由は\n パフォーマンスのため そもそも編集する必要がないため  みたいですね。\nこれ解決するのに結構時間かかりました…\n参考 intellij bundlei_js が消える理由\n","ref":"/2019/why-did-webpack-hide-outputfile-on-intellij/","tags":["IntelliJ","webpack"],"title":"IntelliJでwebpack導入後、フォルダが見えなくなる問題の解決法"},{"contents":"Light Sailからの移行移行しました AWS の 「Light Sail + WordPress」 でブログを立ててましたが、WordPress がだるすぎたので AWS の [AWS Amplify + Hugo]に移行しました。\n※現在は「GitHub Pages + Hugo」の構成です  GitHub Pages とかをそのまま使うのも良かったけど、AWS のサービスを触ってみたかったのでこっちで立ててみました。\nHugo に移って最初に記事書いていて思うけど、やっぱMarkdownが最強なんだわ。\nスラスラ書ける 😎\n一応 WordPress でも Markdown で書けるプラグイン 📕 は少し出てたけど、\n「めっちゃこれいいやん」\nみたいなプラグインは見当たりませんでした 😥\nHugo で辛かったこと  AWS Amplifyを利用する場合は、git の submodule を使ってはいけない draftは下書き機能で、falseにしないと記事が表示されないこと。\n(これを忘れててずっと表示されないぞおおおお！ってなってました。あほや) テーマが崩れるときがある  追記 結局上記のいろいろな問題で萎えて、止まってました。現在は GitHub-pages に移して動かしてます。草も生えるし無料だし特に重要じゃない homepage だったらこっちでいいね。 AWS Amplify触ってたのは勉強もかねてだったので、それはそれでよかったです。 AWS AMplifyはまた別の機会に使いたいです 🥴\n","ref":"/2019/migration-from-lightsail/","tags":["AWS","Hugo"],"title":"Light Sailからの移行"},{"contents":"RaspberryPi 3 Model Bで遊ぶ旧サイトの記事を移行してきたものとなります。  今日のご飯が何かを確認したいためのラズパイカメラ作成を行います\nこの前 RaspberryPi 3 Model B を買ってそこら辺に転がってた USB カメラと繋げて台所に出て来るご飯をブラウザ上から見られるようにしたのでその時の経緯を記載。\nNOOBS を使って Raspbian を入れる お前初心者かよｗｗと煽っているわけではないです。\nNOOBS とは、ラズパイ用に作られた Debian ベースの OS である Raspbian とかを簡単にインストールできるようにしたインストーラーです。\nNOOBS ダウンロードページで NOOBS 落として SD カードにブチ込んで終了。\nRaspbian を起動して sshd を Raspbian 起動時に起動させるようにする sudo apt-get install sysv-rc-confでsysv-rc-confを入れて Raspbian 起動時設定してもうまくいきません。\nどうやら Raspbian はsystemdで制御しないとだめみたいです。\n参考\nIP 固定設定をする これはそこら辺ググったら出てくるので投げちゃいます。\nuv4l のインストールをする uv4l っていう install したらほぼほぼ何もしなくてもブラウザ上で Web カメラを見られるようにできるやつを使う。\nRaspberry Pi3 と USB WEB カメラでストリーミングを参考すればおｋ。\n確認 以下の画像のようになってたらおｋ。\nポート開放やその他 僕はローカルのみでの運用なのであまり設定してないけど ssh(22)とか uv4l(8090)で使うのポート変更\u0026amp;開放をする。\n以上でおしまい！ 本当は python とか使って自分で Web カメラキャプチャ用のプログラムとか組みたかったんだけど調べてる途中で面倒になってやめました・・・ｗ 今後機会があればまたやってみたいと思います。\n","ref":"/2017/create-live-camera-by-raspberrypi-model-b/","tags":["RaspberryPi","uv4l"],"title":"RaspberryPi 3 Model Bで遊ぶ"},{"contents":"MacOSを入れ直したらbrew upgradeでエラーが出るようになった旧サイトの記事を移行してきたものとなります。  1 2 3  ==\u0026gt; Using the sandbox Error: /usr/local/opt/jpeg not present or broken Please reinstall jpeg. Sorry :(   why!?? 結構悩みましたが、以下のコマンドで直りました。\n1  brew unlink jpeg \u0026amp;\u0026amp; brew link jpeg   こういう系の問題って目的の記事とかが見つかれば一瞬なんですけど、\n見つかるまで永遠に解決しないので本当に辛い・・・。\n参考  Library not loaded: /usr/local/opt/jpeg/lib/libjpeg.8.dylib #323  ","ref":"/2016/fixed-homebrew-error-that-reinstall-macos/","tags":["Homebrew","MacOS"],"title":"MacOSを入れ直したらbrew upgradeでエラーが出るようになった"},{"contents":"カスペルスキーのプロセス「kav」がくっそ重くてターミナル起動が8秒ぐらいかかる問題旧サイトの記事を移行してきたものとなります。  TL;DR サポセンに連絡しましたが、現在調査中で 2015 年版を利用すればなんとかなるかもとのこと。 2019 年現在は直っている可能性があります（未検証）。\n概要 Kaspersky for Macが入っている PC にrbenvを入れると、ターミナルの動作がめちゃくちゃ重たくなります。\n起動に 8s もかかると、使い物にならないので\nカスペルスキーのサポセンにぶん投げてました。\nrbenvの測定を行ったのが、以下の画像です。 回答 2015 年版を使えば直るかもしれないので、そっちを使ってくださいとのこと。\n自分はマルウェア対策ソフトを、Aviraにいったん変更しました。 kavが暴走するのは結構あるみたいで、他にも 2,3 記事を見つけましたが解決してはいなかったため、カスペルスキー側のソフトの問題だと思われます。\n","ref":"/2016/very-slow-kav-on-terminal/","tags":["Kaspersky","Terminal","Slow"],"title":"カスペルスキーのプロセス「kav」がくっそ重くてターミナル起動が8秒ぐらいかかる問題"},{"contents":"Eclipseのタブを可視化するための \u003e を消したい旧サイトの記事を移行してきたものとなります。  Eclipse のタブを可視化した際に表示される、\u0026gt;を消したかった。 これがあると個人的には見づらいです。\n外す方法ですが、解決法が以下に掲載されてました。\n ウィンドウ＞設定＞一般＞ JStyle ＞タブのチェックを外す\nEclipse の改行、タブ文字非表示\n JStyle ってのを弄れば良かったらしいです。\n","ref":"/2016/want-to-delete-tab-marker/","tags":["Eclipse","Tab","Setting"],"title":"Eclipseのタブを可視化するための \u003e を消したい"}]