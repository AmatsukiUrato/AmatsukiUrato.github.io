<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ぎじゅつわふたー</title><link>https://tech-wafter.net/</link><description>Recent content on ぎじゅつわふたー</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Wed, 16 Oct 2019 23:36:19 +0900</lastBuildDate><atom:link href="https://tech-wafter.net/index.xml" rel="self" type="application/rss+xml"/><item><title>VSCode上でIntelliJライクなgitのannotate diffができるらしい</title><link>https://tech-wafter.net/2020/try-to-hard-to-display-intellij-like-annotate-diff/</link><pubDate>Tue, 24 Mar 2020 22:42:19 +0900</pubDate><guid>https://tech-wafter.net/2020/try-to-hard-to-display-intellij-like-annotate-diff/</guid><description>はじめに IntelliJ には Git の履歴確認方法の 1 つとして、Annotate 機能が用意されています。 これがめちゃクソ便利なので、なんとかして VS Code 内でも再現できないかと模索した話になります。 Git Lens は VS Code 内の良い拡張機能として紹介されていることが多いけど、Git Lens の機能の 1 つである annotation diff についてはあまり紹介されていないように思えるので紹介してみた。 TL;DR プラグインの Git Lens を入れて、以下の設定に変更すればそれっぽくなる SettingName Value Avatars チェックを外す Compact チェックを外す Date Format YYYY/MM/DD Format ${id} ${date} ${author|10?} 設定する Git Lens が必要なので、Extensions から Git Lens をダウ</description></item><item><title>GitHub-ActionsでカスタムドメインのGitHub-Pagesをデプロイすると、カスタムドメインの登録が消える</title><link>https://tech-wafter.net/2020/deploy-custom-domain-github-pages-on-github-actions/</link><pubDate>Sun, 01 Mar 2020 22:24:43 +0900</pubDate><guid>https://tech-wafter.net/2020/deploy-custom-domain-github-pages-on-github-actions/</guid><description>GitHub-Actions でデプロイを行うと、custom ドメインで設定したものが初期化されていました。 原因は GitHub-Actions で利用しているactions-gh-pagesにて、cname の設定を忘れていたためでした。 こちらに乗っている通り、with.cnameに自身のカスタムドメイン名を記入すれば正常にデプロイされるはずです。 1 2 3 4 5 6 - name:Deployuses:peaceiris/actions-gh-pages@v3with:github_token:${{secrets.GITHUB_TOKEN}}publish_dir:./publiccname:github.com</description></item><item><title>アフターデジタルを読んだ</title><link>https://tech-wafter.net/2020/read-after-digital/</link><pubDate>Wed, 26 Feb 2020 21:59:51 +0900</pubDate><guid>https://tech-wafter.net/2020/read-after-digital/</guid><description>はじめに アフターデジタルという本を読みました。 感想にも書いてますが、IT に関わるすべての人が読んで良いと思う一冊だったので、 本屋で見かけた際は手にとってみては？ 自分は Kindle で読みましたが…ｗ 感想 アフターデジタル オフラインのない時代に生き残る著者 : 藤井保文日経BP発売日 : 2019-03-23ブクログでレビューを見る»IT技術者やIT技術に関わる人は手にとって良い一冊だと思います。 TL;DR この本を読むと ・中国で行われているOMOの考え方 ・個人データの重要性/使い方 ・個人データに対する考え方 ・日本でOMOへシフ</description></item><item><title>社内のLT大会に参加してみた（自分のテーマは[Gasを用いた確認作業の自動化]）</title><link>https://tech-wafter.net/2020/tried-lightningtalk-in-the-office/</link><pubDate>Tue, 25 Feb 2020 22:24:40 +0900</pubDate><guid>https://tech-wafter.net/2020/tried-lightningtalk-in-the-office/</guid><description>はじめに 1 月 21 日に社内で LT 大会があったので、参加してみました！ 誰かが企画した LT 大会というものには参加したことがなかったため、非常に良い経験をしたと感じてます。こちらの記事は LT の体験談となります。 TL;DR LT 発表は自分の成果を簡単に発表できる場 LT に自身がないマンは小さめの LT で発表するべし 他人から評価してもらうことでモチベがちょっと上がる いい区切りになる テーマについて 何個か候補はあったので、主催グループの一人にどれが良いか聞いて決めました。内容はタイトルにもある通り GoogleAppScript を利用して、フロントの確認作業を少し自動</description></item><item><title>configの設定からHugoで表示するコードに番号を表示する</title><link>https://tech-wafter.net/2020/hugo-can-show-numberline-on-code-by-config/</link><pubDate>Tue, 18 Feb 2020 21:50:42 +0900</pubDate><guid>https://tech-wafter.net/2020/hugo-can-show-numberline-on-code-by-config/</guid><description>以前 昔（v0.60.0 以前）はソースコードに行数を入れるには、以下のような記述が必要でした。 1 2 3 {{&amp;lt; highlight go &amp;#34;linenos=table,hl_lines=8 15-17,linenostart=199&amp;#34; &amp;gt;}} // ... code {{&amp;lt; / highlight &amp;gt;}} 今 今は以下の config（config.toml）を設定しておくことで、 バッククォート（`）だけのコードでも行数が付くようになってます。 1 2 3 4 5 6 7 8 9 10 11 [markup] [markup.highlight] codeFences = true guessSyntax = false hl_Lines = &amp;#34;&amp;#34; lineNoStart = 1 lineNos = false lineNumbersInTable = true noClasses = true style = &amp;#34;monokai&amp;#34; tabWidth = 4 意味を乗っけておくと、 Name Description codeFences syntaxHighlight を使うかの設定。 guessSyntax 書かれている言語を推測してハイライトするかの設定。 hl_Lines highLight する範囲の設定で、monokai だと黄色くなる。書き方は&amp;</description></item><item><title>Github-Actionsでhugoのデプロイを自動化してみた</title><link>https://tech-wafter.net/2020/build-hugo-homepage-by-github-action/</link><pubDate>Mon, 10 Feb 2020 12:46:44 +0900</pubDate><guid>https://tech-wafter.net/2020/build-hugo-homepage-by-github-action/</guid><description>はじめに 結構前から GitHub-Actions を使ってみたいなと思っていましたが、題材がなく困ってました。 そこで、「なにか定期的にデプロイしてるやつってあったっけ」と考えたところ 「そういや hugo のデプロイって自動化できるんじゃね？」という考えに行き着き、実際にやってみた感じです。 TL;DR この記事は hugo 用リポジトリと homepage 用リポジトリで分割している場合の説明です GitHub-Actions を利用してデプロイすることは可能 hugo 用の action がすでに存在するので、そちらを利用すると良い GitHub-Actions 用の yml ファイルを下に記載しているので、参考になるかも 別リポジトリにデプロイする場合はアクセス</description></item></channel></rss>