<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Hugo on ぎじゅつわふたー</title><link>https://matsu4ki.github.io/tags/hugo/</link><description>Recent content in Hugo on ぎじゅつわふたー</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Tue, 18 Feb 2020 21:50:42 +0900</lastBuildDate><atom:link href="https://matsu4ki.github.io/tags/hugo/index.xml" rel="self" type="application/rss+xml"/><item><title>configの設定からHugoで表示するコードに番号を表示する</title><link>https://matsu4ki.github.io/2020/hugo-can-show-numberline-on-code-by-config/</link><pubDate>Tue, 18 Feb 2020 21:50:42 +0900</pubDate><guid>https://matsu4ki.github.io/2020/hugo-can-show-numberline-on-code-by-config/</guid><description>以前 昔（v0.60.0以前）はソースコードに行数を入れるには、以下のような記述が必要でした。 1 2 3 {{&amp;lt; highlight go &amp;#34;linenos=table,hl_lines=8 15-17,linenostart=199&amp;#34; &amp;gt;}} // ... code {{&amp;lt; / highlight &amp;gt;}} 今 今は以下のconfig（config.toml）を設定しておくことで、 バッククォート(`)だけのコードでも行数が付くようになってます。 1 2 3 4 5 6 7 8 9 10 11 [markup] [markup.highlight] codeFences = true guessSyntax = false hl_Lines = &amp;#34;&amp;#34; lineNoStart = 1 lineNos = false lineNumbersInTable = true noClasses = true style = &amp;#34;monokai&amp;#34; tabWidth = 4 意味を乗っけておくと、 codeFences syntaxHighlightを使うかの設定。 guessSyntax 書かれている言語を推測してハイライトするかの設定。 hl_Lines highLightする範囲の設定で、</description></item><item><title>Github-Actionsでhugoのデプロイを自動化してみた</title><link>https://matsu4ki.github.io/2020/build-hugo-homepage-by-github-action/</link><pubDate>Mon, 10 Feb 2020 12:46:44 +0900</pubDate><guid>https://matsu4ki.github.io/2020/build-hugo-homepage-by-github-action/</guid><description>はじめに 結構前からGitHub-Actionsを使ってみたいなと思っていましたが、題材がなく困ってました。 そこで、「なにか定期的にデプロイしてるやつってあったっけ」と考えたところ 「そういやhugoのデプロイって自動化できるんじゃね？」という考えに行き着き、実際にやってみた感じです。 TL;DR この記事はhugo用リポジトリとhomepage用リポジトリで分割している場合の説明です GitHub-Actionsを利用してデプロイすることは可能 hugo用のactionがすでに存在するので、そちらを利用すると良い</description></item><item><title>Hugoで一度publishしてしまったファイルをデプロイ時に消す</title><link>https://matsu4ki.github.io/2020/how-to-clear-old-publish-files/</link><pubDate>Tue, 04 Feb 2020 02:40:26 +0900</pubDate><guid>https://matsu4ki.github.io/2020/how-to-clear-old-publish-files/</guid><description>はじめに hugoでデプロイする際に、よくミスって不要記事をpublishしてしまうことがあります。 その後再度公開を行うと、出力元のフォルダからは消えているのにもかかわらず残り続けます。 今回はそれの解決を行いました。 （今まではpublic以下をスクリプトで消してた…） TL;DR hugo --cleanDestinationDirでおｋ How to ほぼほぼTL;DRで終わっちゃってますが、個人的にTL;DRがある記事のほうが手っ取り早く答えを見つけられると思っているので記載してます。 ググってもあんまり情報がなかったので、こ</description></item><item><title>Hugoで記事が一年以上過ぎた場合はnoticeを表示するようにした</title><link>https://matsu4ki.github.io/2019/show-notification-if-now-greater-equal-updated-time/</link><pubDate>Tue, 12 Nov 2019 21:36:21 +0900</pubDate><guid>https://matsu4ki.github.io/2019/show-notification-if-now-greater-equal-updated-time/</guid><description>TL;DR 以下の書き方で実装可（⚠️Bulmaでの実装） 1 2 3 4 5 6 {{$year:=(div(subnow.Unix.Lastmod.Unix)31536000)}} {{ifle1$year}} &amp;lt;div class=&amp;#34;notification is-warning&amp;#34;&amp;gt; この記事は、掲載されてから {{$year}} 年間修正されておりません。 &amp;lt;/div&amp;gt; {{end}} Hugo公式の.Unixページを見よ はじめに 唐突に、「記事が老朽化している表示」はほしいなと思い、色々と検索して実装ができた感じです。Goのテンプレートエンジンにだけ詳しくなっていく… 方法 一番上に書いてあるとおり、 1 2 3 4 5 6 7 &amp;lt;!-- 再掲 --&amp;gt; {{$year:=(div(subnow.Unix.Lastmod.Unix)31536000)}} {{ifle1$year}} &amp;lt;div class=&amp;#34;notification is-warning&amp;#34;&amp;gt; この記事は、掲載されてから {{$year}} 年間修正されておりません。 &amp;lt;/div&amp;gt; {{end}} で実装できる。 実際の表示はこんな感じ😗 多分上記のコードを読んだらわか</description></item><item><title>hugoの.GitInfoが適応された話(理由は不明です…)</title><link>https://matsu4ki.github.io/2019/adapted-hugo-gitinfo/</link><pubDate>Sun, 20 Oct 2019 12:47:18 +0900</pubDate><guid>https://matsu4ki.github.io/2019/adapted-hugo-gitinfo/</guid><description>ずっと前から、記事の更新はgitのコミット履歴を使いたいと思っていたのですが、 .GitInfoの情報が記事にうまく反映されずnilになっていたため、手動で作業してました😇 .GitInfoが使えるようになった原因は恐らく、記事のパスを /content/post/[記事].md→/content/post/[分類用フォルダ]/[記事].md ※[]内はそれぞれの用途で変更する としたことです。 何故これで.GitInfoが適応されたのかは不明ですが、とにかくずっとやりたかったことなので、大満足😭</description></item><item><title>Light Sailからの移行</title><link>https://matsu4ki.github.io/2019/migration-from-lightsail/</link><pubDate>Tue, 16 Apr 2019 04:52:33 +0900</pubDate><guid>https://matsu4ki.github.io/2019/migration-from-lightsail/</guid><description>移行しました AWSのLight Sail + WordPressでやってましたが、 WordPressがだるすぎたので AWSの~~[AWS Amplify + Hugo]に移行しました。~~ 現在は[github pages + Hugo] github pages とかをそのまま使うのも良かったけど、 AWSのサービスを触ってみたかったのでこっちで立ててみました。 Hugoに移って最初に記事書いていて思うけど、 やっぱMarkdownが最強なんだわ。 スラスラ書ける😎 一応WordPressでもMarkdownで書けるプラグイン📕は少し出てたけど、 めっちゃこれいいやん、みたいなプラ</description></item></channel></rss>