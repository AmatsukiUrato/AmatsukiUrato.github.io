<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>2020 on ぎじゅつわふたー</title><link>https://tech-wafter.net/archives/2020/</link><description>Recent content in 2020 on ぎじゅつわふたー</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Mon, 01 Jun 2020 01:55:26 +0900</lastBuildDate><atom:link href="https://tech-wafter.net/archives/2020/index.xml" rel="self" type="application/rss+xml"/><item><title>SpringSecurityのconfigureにて、静的ファイルが対象外にならない</title><link>https://tech-wafter.net/2020/solved-problem-couldnt-ignore-static-resources-in-spring-security/</link><pubDate>Mon, 01 Jun 2020 01:55:26 +0900</pubDate><guid>https://tech-wafter.net/2020/solved-problem-couldnt-ignore-static-resources-in-spring-security/</guid><description>概要 SpringSecurityを導入しているSpringBootのプロジェクトにて、静的ファイルを対象外にするための設定が反映されてなかったです。 原因 静的リソースフォルダとして扱われるフォルダ内が、ルートとして扱われるみたいです。 1 2 3 4 src/main/resources/public └── js/ └── css/ └── file1/ 上記のようなフォルダ構成の場合で、jsとcssをopenにしたい場合は下記のように設定します。 1 2 3 4 @Override public void configure(WebSecurity web) throws Exception { web.ignoring().antMatchers(&amp;#34;/js/**&amp;#34;, &amp;#34;/css/**&amp;#34;); } publicで指定しても、SpringSecurityの保護対象外にならないです。 1 2 3 4 5 @Override public void configure(WebSecurity web) throws Exception { //</description></item><item><title>yarn実行時にwarning: No license fieldが出ていたのでlicenseをセットした</title><link>https://tech-wafter.net/2020/set-license-on-package-json/</link><pubDate>Sun, 31 May 2020 22:10:47 +0900</pubDate><guid>https://tech-wafter.net/2020/set-license-on-package-json/</guid><description>yarn を走らせると、license を正しくセットしていない場合、 1 warning package.json: No license field と表示されます。 エラー名の通り、package.json 内に license がセットされていないためです。 license をセットしましょう。 1 2 3 { &amp;#34;license&amp;#34;: &amp;#34;SPDXで指定されているID&amp;#34; } SPDX の ID なんて知らないですよね。 SPDX License List | Software Package Data Exchange (SPDX)に Identifier という項目で記載されているので、それを上記 json の license で指定すれば OK です。 いや、俺は license 指定なんてしたくないんやが &amp;ldquo;UNLICENSED&amp;quot;を入れれば良いみたい。 SPDX とはなんぞや？ ラ</description></item><item><title>SpringBoot上でwebpack環境+ThymeLeafをしたい</title><link>https://tech-wafter.net/2020/wanna-introduce-webpack-thymeleaf-scss-on-springboot-pj/</link><pubDate>Sun, 31 May 2020 21:14:12 +0900</pubDate><guid>https://tech-wafter.net/2020/wanna-introduce-webpack-thymeleaf-scss-on-springboot-pj/</guid><description>はじめに テンプレートエンジンと webpack を mix してうまく作れないか奮闘した記録です。 webpack(scss/eslint/prettier/html-webpack-plugin)などを動作させた後に ThymeLeaf で読み込めるようにできないかを考えました。 結論から言うと、一部うまくいきませんでした。 やりたかったこと webpack にて、src 以下のファイル群をコンパイルする。 コンパイルした後に ThymeLeaf を噛ませたいので、html ファイルに関しては templates に配置する public には html 以外のファイルを出力する templates/以下にある html ファイルには、自</description></item><item><title>zsh上でhistoryコマンドを打つと直近15件しかでてこない</title><link>https://tech-wafter.net/2020/zsh-history-cmd-cant-show-all-history-when-using-history/</link><pubDate>Sat, 30 May 2020 18:46:10 +0900</pubDate><guid>https://tech-wafter.net/2020/zsh-history-cmd-cant-show-all-history-when-using-history/</guid><description>概要 bash を使ってたときは、historyで全履歴が表示されたのに対して、 zsh ではhistoryを叩いても、直近 15 件しか表示されなくて困ってました。 原因 bash のhistoryと zsh のhistoryコマンドでは仕様が違う。 両方とも fc コマンドの alias として用意されているみたいですけど、alias のはられ方が違うのかも。詳細は調べていないので、知っている方いたら教えてください。 デフォを全件表示にする 1 alias history=&amp;#39;history 1&amp;#39; history 1で 1~現在までの履歴が表示されるので、historyに alias を貼る。 まぁ何が困ってたかって、grep 検索できない</description></item><item><title>OSX上にインストールしたIntelliJのconfigファイル保存場所をメモする</title><link>https://tech-wafter.net/2020/take-note-intellij-config-path-on-osx/</link><pubDate>Thu, 28 May 2020 02:43:26 +0900</pubDate><guid>https://tech-wafter.net/2020/take-note-intellij-config-path-on-osx/</guid><description>メモ。以下にあります。 windows と違って散らばってるのが少し面倒くさいですね。 また、CommunityEdition と UltimateEdition では微妙に path が違います。 とはそれぞれ、リリース年とリリース月替入ります。 UltimateEdition Path target File path config ~/Library/Preferences/IntelliJIdea&amp;lt;YYYY&amp;gt;.&amp;lt;M&amp;gt; System ~/Library/Caches/IntelliJIdea&amp;lt;YYYY&amp;gt;.&amp;lt;M&amp;gt; Plugins ~/Library/Application Support/IntelliJIdea&amp;lt;YYYY&amp;gt;.&amp;lt;M&amp;gt; Logs ~/Library/Logs/IntelliJIdea&amp;lt;YYYY&amp;gt;.&amp;lt;M&amp;gt; Logs に関して、IntelliJ IDEA 9 以前のものは System location に保存されているみたいです。 CommunityEdition Path target File path config ? System ~/Library/Caches/JetBrains/IdeaIC&amp;lt;YYYY&amp;gt;.&amp;lt;M&amp;gt; Plugins ~/Library/Application Support/JetBrains/IdeaIC&amp;lt;YYYY&amp;gt;.&amp;lt;M&amp;gt; Logs ~/Library/Logs/JetBrains/IdeaIC&amp;lt;YYYY&amp;gt;.&amp;lt;M&amp;gt; CE では JetBrains というフォルダを間に噛ますみたいですね。 config だけは表示されませんでした。こっちは Plugin と違って import/export があるので、良いっちゃ良いのですが、少し気持ち悪いですね。 参考 macos - Where is IntelliJ IDEA config stored in OSX? - Stack</description></item><item><title>伝わる!...かもしれない。エンジニアの文章力向上を読んだ</title><link>https://tech-wafter.net/2020/read-maybe-transmitted-sentence-improve-your-engineer-writing-skills/</link><pubDate>Wed, 27 May 2020 19:17:33 +0900</pubDate><guid>https://tech-wafter.net/2020/read-maybe-transmitted-sentence-improve-your-engineer-writing-skills/</guid><description>はじめに 一昨日辺りに、エンジニアのための日本語文章テクニックを読んだので、引き続き日本語文章系の本を読んだ感じです。 文章での注意点 誤字・脱字をしない 表記を統一する カタカナ語の伸ばし棒有無 カタカナ or 英語 何も考えずに漢字を使うのはやめる 適切に接続語を使う 翻訳調の書き方をしない 言い換えられないかを検討する 抽象的な書き方をやめる できるだけ具体的に書く 抽象的に書いたほうがわかりやすくなる場合もあるので、相手に合わせるのがベスト 数字を入れる 主語と述語を近づける 文章は長くしすぎない 二重否定は使わない 物事を伝え</description></item><item><title>GradleのArtifactとはなんぞや</title><link>https://tech-wafter.net/2020/what-is-artifact/</link><pubDate>Wed, 27 May 2020 12:15:43 +0900</pubDate><guid>https://tech-wafter.net/2020/what-is-artifact/</guid><description>毎回忘れるのでメモ。 Artifact とはなんぞや 該当プロジェクトが、一意に参照できるようにするためのもの。 プロジェクトの名前やライブラリの名前になることが多いと思う。 java のライブラリ管理はドメイン名と Artifact で行われており、それぞれをつなげたのものファイル名にする。 そのため、example.com というドメインを所持している会社の foo-library というライブラリを配布する場合、 1 2 3 com/ └── example └── foo-library といった形になる。 また、Gradle の設定ファイルであるbuild.gradleには、ドメイン部分の 1 group = &amp;#39;com.example&amp;#39; が記載される。 じゃあ Name っ</description></item><item><title>エンジニアのための日本語文章テクニックを読んだ</title><link>https://tech-wafter.net/2020/read-japanese-sentence-technique-for-engineer/</link><pubDate>Mon, 25 May 2020 12:23:16 +0900</pubDate><guid>https://tech-wafter.net/2020/read-japanese-sentence-technique-for-engineer/</guid><description>はじめに 結構前に買った本を読んだので、メモおよび感想を書きました。 お昼の一時間にぱぱっと読めるぐらいの量なので、気軽に読めました 👍 読みやすい文章とは 読みやすい文章 = 流し読みできる文章 読みやすい文章 ≠ 魅力的な文章 流し読みできる文章のメリット 読みやすさ 読んでもらいやすさ 流し読みで読める文章じゃないと、まともに読んでもらえない。 読みやすい文章にするには 読点を使う 読点を上手に使うことが重要になる。 読点は、 文章の強弱や区切りを明確化するため に存在している。 以下の箇所に読点を入れると良くなる。 要因と結果の間</description></item><item><title>wingetのプレビュー版が公開されたので、他のパッケージ管理ソフトとかと一緒に使ってみる</title><link>https://tech-wafter.net/2020/use-windows-package-managers/</link><pubDate>Wed, 20 May 2020 19:59:35 +0900</pubDate><guid>https://tech-wafter.net/2020/use-windows-package-managers/</guid><description>はじめに 2020-5-13 に Microsoft より、 winget のプレビュー版が公開されたので、 これを気に windows で使えるパッケージソフトをひととおり試してみました。 今回は VS Code のインストールを行っていきます。 試したパッケージマネージャは winget chocolatey scoop AppGet Npackd です。 winget を使う GitHub のページから Microsoft.DesktopAppInstaller_8wekyb3d8bbwe.appxbundle をダウンロードする 起動してインストール powershell を起動して vscode をインストールをする 1 winget install vscode これで vscode がインストールされます。 結構楽にインストールできましたが、アンインストールは今のところないっぽいです。 因みに、パッケージ名が複数あった場合は同じ名前が複数個あると言われるので、Id を入</description></item><item><title>英字配列のHHKBを一ヶ月使ってみて</title><link>https://tech-wafter.net/2020/use-us-hhkb-one-month/</link><pubDate>Fri, 15 May 2020 21:54:00 +0900</pubDate><guid>https://tech-wafter.net/2020/use-us-hhkb-one-month/</guid><description>はじめに ⌨️ 1 か月前ぐらいに US キーボードの HHKB を購入したので使用感とかを書きます。 前までは REALFORCE を使っていたのですが、持ち運びが大変だったため切り替えました。 HHKB を使う前が REALFORCE だったので REALFORCE との比較を軸に書いてます。 → TL;DR 持ち運びするなら HHKB、固定なら REALFORCE プログラミングするなら US 配列がオススメ スペック比較 📊 購入してはいませんが、比較として US 配列のテンキーレスである R2TLS-US3-BK も掲載しております。 PD-KB800WS (HHKB Hybrid) R2SA-JP3-BK (REALFORCE テンキーあり) R2TLS-US3-BK (REALFORCE テンキーレス) サイズ 294mm × 120mm × 40mm 455mm x 142mm x 30mm 369mm x 142mm x 30mm 質量 540g(電池含まず) 1400g 1100g キーストローク 3.8mm</description></item><item><title>情報収集によく利用するページをまとめた</title><link>https://tech-wafter.net/2020/often-use-to-collect-information/</link><pubDate>Sat, 02 May 2020 19:42:09 +0900</pubDate><guid>https://tech-wafter.net/2020/often-use-to-collect-information/</guid><description>はじめに 自分がよく見る順で、情報収集に使っているサイトを羅列してみました。 トレンドを知りたい 自分の担当範囲外の技術情報を知りたい 自分の技術領域の知識を増やしたい という方にはオススメです。 他にもあるよ〜という方がいれば、共有してくれると嬉しいです。 Qiita Qiita ここ最近国内でもっとも有名な技術情報の共有サービス。 国内の類似サービスとしては、Qrunch（クランチ）やCrieitなどもある。 良いところ 国内のサイトなので、日本語での情報収集がしやすい 国内の技術トレンドをつかみやすい 記事に対してプルリクを送信でき</description></item><item><title>docsify用のサーバ実行をexeファイルとドキュメントファイル群だけで起動できるようにする</title><link>https://tech-wafter.net/2020/use-docsify-by-execute-file/</link><pubDate>Thu, 23 Apr 2020 03:41:43 +0900</pubDate><guid>https://tech-wafter.net/2020/use-docsify-by-execute-file/</guid><description>はじめに 調査資料などを見やすい形で保存できるように docsify という、node.js で作られたドキュメント管理ツールを利用しています。node.js で作られているので、ローカルで閲覧する際にはもちろん npm コマンドが必要です（厳密には違いますが、CORS の関係上サーバ起動したほうが手っ取り早いため）。これでは、node.js をインストールしていない人や技術的知識のない人が docsify の画面を通して確認できません。 そこで、ドキュメントファイル（markdown, index.html など）とサーバ起動用の exe だけを用意して、exe 起動するだけ</description></item><item><title>リアルフォースをMacで使えるようにする</title><link>https://tech-wafter.net/2020/use-realforce-on-macbook/</link><pubDate>Sun, 12 Apr 2020 16:35:34 +0900</pubDate><guid>https://tech-wafter.net/2020/use-realforce-on-macbook/</guid><description>はじめに リモートワークになり、会社に置いていたリアルフォースを持ち帰ったため個人用途の Mac でも利用しようと思い調べました。 個人の Mac 用に HHKB を買おうと思ったのですが、買う前に尊師スタイルでタイプする感覚を試しかったのでちょうど良かったです。 TL;DR Karabiner-Elements を使ってキーの変換を行う Win キーボードのボタンカスタマイズを行う Mac に Windows 用のキーボードを挿しても一応反応するのですが、 かな/英字の変換キーがない Windows キーがコマンドキーになるため、微妙に位置がずれる などの問題点があります。項目 2 はなんとかなるのですが、項目 1 は致命的です</description></item><item><title>github-actions上でbuildした際、lastmodの更新がすべての記事に適用される問題を解決した</title><link>https://tech-wafter.net/2020/solved-issue-with-github-actions-lastmod-updates-being-applied-to-all-the-articles/</link><pubDate>Thu, 02 Apr 2020 02:47:24 +0900</pubDate><guid>https://tech-wafter.net/2020/solved-issue-with-github-actions-lastmod-updates-being-applied-to-all-the-articles/</guid><description>はじめに hugo のジェネレートを GitHub-actions を使って、push するだけでデプロイできるようにしたのですが、全記事の最終更新日が更新されていたため原因調査をおこないました。 TL;DR git の clone を行う際に最新コミットしか取得していなかった actions/checkoutを利用する場合は以下の方法で fetch させ、全履歴を取得する 1 2 3 - uses:actions/checkout@v2with:fetch-depth:0# Fetch all history for .GitInfo and . 試したこと GitHub-actions 上と local の比較 icon 結果 ✅ 更新対象記事のみ lastmod が更新されていた ❎ すべての記事に対して更新が入っていた ローカル ✅MacOS でのビルド ✅Vagrant 内の Ubuntu:18.04.4 でのビルド CI 環境 ❎Ubuntu</description></item><item><title>DevToolsにあるSourceタブ内で閉じてしまったconsoleを再度開く（Chrome）</title><link>https://tech-wafter.net/2020/reopen-devtools-console-on-source-tab/</link><pubDate>Tue, 31 Mar 2020 16:47:29 +0900</pubDate><guid>https://tech-wafter.net/2020/reopen-devtools-console-on-source-tab/</guid><description>Sources タブを開いた状態で Esc を押す。 右上の「︙」をクリックして、「(Show|Hide) console drawer」をクリックする。 これで表示/非表示ができる。ぱっと検索したときにすぐ検索で出てこなかったのでメモ。 地味に window がでかいから、「x」でよく消してしまうんだよね。</description></item><item><title>不要ソースコードをコメントアウトするなら、削除して履歴を残して😭</title><link>https://tech-wafter.net/2020/please-delete-unnecessary-comment-out-and-use-git-commit/</link><pubDate>Tue, 31 Mar 2020 02:47:08 +0900</pubDate><guid>https://tech-wafter.net/2020/please-delete-unnecessary-comment-out-and-use-git-commit/</guid><description>信じられないだろうが、バージョン管理システムへの登録や更新も「非効率的」とか「無駄な工数」とか抜かすSEもプログラマも多い。 &amp;mdash; Yuichi Onodera (@mokemoke6502) March 25, 2020 に対して、 gitは使ってるけどコメントが ・画面の修正をした ・バグを直した ・一旦コミット とかの意味がほぼ無いコメントで埋もれてるgitは見かける https://t.co/9A6NV7nwoA &amp;mdash; matsuaki (@matsu4ki) March 26, 2020 と引用リツイートしたのですが、もう少し自分で整理しておきたいと思い記事にしました。 はじめに git でソースコード管理をしている際、仕様変更などで特定の関数自体が不要になる場合があります。 その時、対応しているエンジ</description></item><item><title>VSCode上でIntelliJライクなgitのannotate diffができるらしい</title><link>https://tech-wafter.net/2020/try-to-hard-to-display-intellij-like-annotate-diff/</link><pubDate>Tue, 24 Mar 2020 22:42:19 +0900</pubDate><guid>https://tech-wafter.net/2020/try-to-hard-to-display-intellij-like-annotate-diff/</guid><description>はじめに IntelliJ には Git の履歴確認方法の 1 つとして、Annotate 機能が用意されています。 これがめちゃクソ便利なので、なんとかして VS Code 内でも再現できないかと模索した話になります。 Git Lens は VS Code 内の良い拡張機能として紹介されていることが多いけど、Git Lens の機能の 1 つである annotation diff についてはあまり紹介されていないように思えるので紹介してみた。 TL;DR プラグインの Git Lens を入れて、以下の設定に変更すればそれっぽくなる SettingName Value Avatars チェックを外す Compact チェックを外す Date Format YYYY/MM/DD Format ${id} ${date} ${author|10?} 設定する Git Lens が必要なので、Extensions から Git Lens をダウ</description></item><item><title>GitHub-ActionsでカスタムドメインのGitHub-Pagesをデプロイすると、カスタムドメインの登録が消える</title><link>https://tech-wafter.net/2020/deploy-custom-domain-github-pages-on-github-actions/</link><pubDate>Sun, 01 Mar 2020 22:24:43 +0900</pubDate><guid>https://tech-wafter.net/2020/deploy-custom-domain-github-pages-on-github-actions/</guid><description>GitHub-Actions でデプロイを行うと、custom ドメインで設定したものが初期化されていました。 原因は GitHub-Actions で利用しているactions-gh-pagesにて、cname の設定を忘れていたためでした。 こちらに乗っている通り、with.cnameに自身のカスタムドメイン名を記入すれば正常にデプロイされるはずです。 1 2 3 4 5 6 - name:Deployuses:peaceiris/actions-gh-pages@v3with:github_token:${{secrets.GITHUB_TOKEN}}publish_dir:./publiccname:github.com</description></item><item><title>アフターデジタルを読んだ</title><link>https://tech-wafter.net/2020/read-after-digital/</link><pubDate>Wed, 26 Feb 2020 21:59:51 +0900</pubDate><guid>https://tech-wafter.net/2020/read-after-digital/</guid><description>はじめに アフターデジタルという本を読みました。 感想にも書いてますが、IT に関わるすべての人が読んで良いと思う一冊だったので、 本屋で見かけた際は手にとってみては？ 自分は Kindle で読みましたが…ｗ 感想 アフターデジタル オフラインのない時代に生き残る著者 : 藤井保文日経BP発売日 : 2019-03-23ブクログでレビューを見る»IT技術者やIT技術に関わる人は手にとって良い一冊だと思います。 TL;DR この本を読むと ・中国で行われているOMOの考え方 ・個人データの重要性/使い方 ・個人データに対する考え方 ・日本でOMOへシフ</description></item><item><title>社内のLT大会に参加してみた（自分のテーマは[Gasを用いた確認作業の自動化]）</title><link>https://tech-wafter.net/2020/tried-lightningtalk-in-the-office/</link><pubDate>Tue, 25 Feb 2020 22:24:40 +0900</pubDate><guid>https://tech-wafter.net/2020/tried-lightningtalk-in-the-office/</guid><description>はじめに 1 月 21 日に社内で LT 大会があったので、参加してみました！ 誰かが企画した LT 大会というものには参加したことがなかったため、非常に良い経験をしたと感じてます。こちらの記事は LT の体験談となります。 TL;DR LT 発表は自分の成果を簡単に発表できる場 LT に自身がないマンは小さめの LT で発表するべし 他人から評価してもらうことでモチベがちょっと上がる いい区切りになる テーマについて 何個か候補はあったので、主催グループの一人にどれが良いか聞いて決めました。内容はタイトルにもある通り GoogleAppScript を利用して、フロントの確認作業を少し自動</description></item><item><title>configの設定からHugoで表示するコードに番号を表示する</title><link>https://tech-wafter.net/2020/hugo-can-show-numberline-on-code-by-config/</link><pubDate>Tue, 18 Feb 2020 21:50:42 +0900</pubDate><guid>https://tech-wafter.net/2020/hugo-can-show-numberline-on-code-by-config/</guid><description>以前 昔（v0.60.0 以前）はソースコードに行数を入れるには、以下のような記述が必要でした。 1 2 3 {{&amp;lt; highlight go &amp;#34;linenos=table,hl_lines=8 15-17,linenostart=199&amp;#34; &amp;gt;}} // ... code {{&amp;lt; / highlight &amp;gt;}} 今 今は以下の config（config.toml）を設定しておくことで、 バッククォート（`）だけのコードでも行数が付くようになってます。 1 2 3 4 5 6 7 8 9 10 11 [markup] [markup.highlight] codeFences = true guessSyntax = false hl_Lines = &amp;#34;&amp;#34; lineNoStart = 1 lineNos = false lineNumbersInTable = true noClasses = true style = &amp;#34;monokai&amp;#34; tabWidth = 4 意味を乗っけておくと、 Name Description codeFences syntaxHighlight を使うかの設定。 guessSyntax 書かれている言語を推測してハイライトするかの設定。 hl_Lines highLight する範囲の設定で、monokai だと黄色くなる。書き方は&amp;</description></item><item><title>Github-Actionsでhugoのデプロイを自動化してみた</title><link>https://tech-wafter.net/2020/build-hugo-homepage-by-github-action/</link><pubDate>Mon, 10 Feb 2020 12:46:44 +0900</pubDate><guid>https://tech-wafter.net/2020/build-hugo-homepage-by-github-action/</guid><description>はじめに 結構前から GitHub-Actions を使ってみたいなと思っていましたが、題材がなく困ってました。 そこで、「なにか定期的にデプロイしてるやつってあったっけ」と考えたところ 「そういや hugo のデプロイって自動化できるんじゃね？」という考えに行き着き、実際にやってみた感じです。 TL;DR この記事は hugo 用リポジトリと homepage 用リポジトリで分割している場合の説明です GitHub-Actions を利用してデプロイすることは可能 hugo 用の action がすでに存在するので、そちらを利用すると良い GitHub-Actions 用の yml ファイルを下に記載しているので、参考になるかも 別リポジトリにデプロイする場合はアクセス</description></item><item><title>Hugoで一度publishしてしまったファイルをデプロイ時に消す</title><link>https://tech-wafter.net/2020/how-to-clear-old-publish-files/</link><pubDate>Tue, 04 Feb 2020 02:40:26 +0900</pubDate><guid>https://tech-wafter.net/2020/how-to-clear-old-publish-files/</guid><description>はじめに hugoでデプロイする際に、よくミスって不要記事を publish してしまうことがあります。 その後再度公開を行うと、出力元のフォルダからは消えているのにもかかわらず残り続けます。 今回はそれの解決を行いました。 （今までは public 以下をスクリプトで消してた…） TL;DR hugo --cleanDestinationDirでおｋ How to ほぼほぼ TL;DR で終わっちゃってますが、個人的に TL;DR がある記事のほうが手っ取り早く答えを見つけられると思っているので記載してます。 ググってもあんまり情報がなかったので、こういうときはとりあえず、help を見よ</description></item><item><title>しょぼい記事の投稿でも、何もしないよりは良いと思う今日このごろ</title><link>https://tech-wafter.net/2020/subtle-post-is-better-than-nothing/</link><pubDate>Mon, 03 Feb 2020 22:00:00 +0900</pubDate><guid>https://tech-wafter.net/2020/subtle-post-is-better-than-nothing/</guid><description>はじめに ここ一ヶ月、何も更新できていませんでした。 ネタはあったのですが、明日書けばいいや病にかかってしまい結局何もできていなかったという感じです。今回の問題をちょっと自分なりに振り返ってみようと思いました。 TL;DR 環境を変えよう ♻️ 記事の量は自分に合わせよう 📄 業務は程々に、僅かな時間をみつけて勉強時間をこしらえる 🏃‍♂️ 原因 「さぁ書こう」という環境に身を置かなかった 自分は基本的に家にいると、一日中動画かゲームをしてしまいします 🎮 勉強とか読書とかは、なんかめちゃくちゃやりたいという周期がありまして、その</description></item></channel></rss>