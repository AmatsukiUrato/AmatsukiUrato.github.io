<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>2019 on ぎじゅつわふたー</title><link>https://amatsukiurato.github.io/archives/2019/</link><description>Recent content in 2019 on ぎじゅつわふたー</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Mon, 02 Dec 2019 13:21:43 +0900</lastBuildDate><atom:link href="https://amatsukiurato.github.io/archives/2019/index.xml" rel="self" type="application/rss+xml"/><item><title>PowerShellの色を変えようと思ってたら、Windows Terminal(Preview)で変更してた</title><link>https://amatsukiurato.github.io/2019/tried-to-change-powershell-color/</link><pubDate>Mon, 02 Dec 2019 13:21:43 +0900</pubDate><guid>https://amatsukiurato.github.io/2019/tried-to-change-powershell-color/</guid><description>TL;DR Color Toolでもできるっぽいが、今後はWindows Terminalを使う Settingsのprofilesに設定を記述すると適応される 詳細はここを確認すること はじめに プライベートではMacBook Proを使用しているのですが、会社ではThinkPadのWindowsPCを開発PCとして利用しています。 ちょっとした作業をする際には、WSLを利用して行うようにしているのですが、どうしてもPowerShellで処理を走らせないと駄目な場面がでてきます。そこでようやくPowerShellを開くのですが</description></item><item><title>心水（モトミ）</title><link>https://amatsukiurato.github.io/food/motomi/</link><pubDate>Tue, 26 Nov 2019 22:07:03 +0900</pubDate><guid>https://amatsukiurato.github.io/food/motomi/</guid><description>ランチで行ったので、感想をメモ。 心水でモトミは読めん！ 評価表 基準 評価 量 ★★★★☆ コスパ ★★★☆☆ 一人で行きやすいか ★★★★☆ 味 ★★★★☆ 総評 ★★★★☆ 感想 自分は鶏スパイシーもも唐揚げ膳を食べましたが、うまくて量も多く、大満足です😊 落ち着いている雰囲気なので、基本的にどんなメンバーとも行けそう。 ただし、席は少なそうなので注意。鳥系でオススメとか聞かれたときに教えてあげると良い感じ🐔 食べたやつ 場所 外部リンク おかわり ぐるなび</description></item><item><title>バージョンの付け方を調べてみた</title><link>https://amatsukiurato.github.io/2019/what-kind-of-management-version/</link><pubDate>Mon, 25 Nov 2019 21:20:19 +0900</pubDate><guid>https://amatsukiurato.github.io/2019/what-kind-of-management-version/</guid><description>はじめに 今日、別部門の先輩から 「お前のところのプロジェクトはどんな感じでバージョンの番号つけてる？」 と聞かれたので、 「年月日で付けてます。」 と返したのですが、世間ではどういった感じで付けてるかをしっかりと意識してみたことはないと思い、調べてみました。 さまざまな命名方法 いくつか、慣習で決められているものもあるようです。 丸投げになってしまいますが、めちゃくちゃまとめられた記事を見つけたのでこちらを見るとわかりやすいです。 バージョンにあれこれ考えを巡らせてみる 各ソフトウェアのバージョン定義 自分が思いつ</description></item><item><title>使ってよかったVSCode拡張機能14選+3選の紹介</title><link>https://amatsukiurato.github.io/2019/good-extentions/</link><pubDate>Thu, 14 Nov 2019 00:42:17 +0900</pubDate><guid>https://amatsukiurato.github.io/2019/good-extentions/</guid><description>一軍 この枠で紹介している拡張機能は、高い汎用性を持っており私自身も良く使っている拡張機能たちです。 Settings Sync♻️ VS Codeの拡張機能を移行する場合や、バックアップするときに大活躍！ とりあえず入れとけスタイルでオッケーな拡張機能。 かったるい移行作業をめちゃくちゃ楽にしてくれる。端末が壊れても安心だし、真っ先に入れても良い拡張機能かも。自分で管理しても良いけどね。 Download Page テキスト校正くん👨‍🎓 VS Code上にあるテキストを自動で添削してくれるスグレモノ。 どこかに議事録やまとめた文章を提出する前に少し確認す</description></item><item><title>Hugoで記事が一年以上過ぎた場合はnoticeを表示するようにした</title><link>https://amatsukiurato.github.io/2019/show-notification-if-now-greater-equal-updated-time/</link><pubDate>Tue, 12 Nov 2019 21:36:21 +0900</pubDate><guid>https://amatsukiurato.github.io/2019/show-notification-if-now-greater-equal-updated-time/</guid><description>TL;DR 以下の書き方で実装可（⚠️Bulmaでの実装） {{$year:=(div(subnow.Unix.Lastmod.Unix)31536000)}} {{ifle1$year}} &amp;lt;div class=&amp;#34;notification is-warning&amp;#34;&amp;gt; この記事は、掲載されてから {{$year}} 年間修正されておりません。 &amp;lt;/div&amp;gt; {{end}} Hugo公式の.Unixページを見よ はじめに 唐突に、「記事が老朽化している表示」はほしいなと思い、色々と検索して実装ができた感じです。Goのテンプレートエンジンにだけ詳しくなっていく… 方法 一番上に書いてあるとおり、 &amp;lt;!-- 再掲 --&amp;gt; {{$year:=(div(subnow.Unix.Lastmod.Unix)31536000)}} {{ifle1$year}} &amp;lt;div class=&amp;#34;notification is-warning&amp;#34;&amp;gt; この記事は、掲載されてから {{$year}} 年間修正されておりません。 &amp;lt;/div&amp;gt; {{end}} で実装できる。 実際の表示はこんな感じ😗 多分上記のコードを読んだらわかると思いますが、一応解説し</description></item><item><title>Three.jsを学習する【第一回】</title><link>https://amatsukiurato.github.io/2019/study-three.js-1/</link><pubDate>Sat, 09 Nov 2019 17:35:48 +0900</pubDate><guid>https://amatsukiurato.github.io/2019/study-three.js-1/</guid><description>前回のブラウザでARを使ってみたを触って、オブジェクトをThree.jsで作りたいと思いました。 Three.jsを学習するにあたって、良さげなサイトがあったので、こちらを参考に学習していこうと思います。忘備録です。 functionをアロー関数に変える なんでアロー関数にしたいのかは、関数宣言 vs 関数式 | ES2015+を参照。 window.addEventListener(&amp;#39;load&amp;#39;, init); function init() { // 処理 } から const init = () =&amp;gt; { // 処理 } window.addEventListener(&amp;#39;load&amp;#39;, init); に変える。 Three.jsでオブジェクトを表示させるには レンダラーを作成する シーンを作成する 意味 レンダラー 描画するシステムのこと レン</description></item><item><title>git-secretsのawsトークン保護を検証してみた</title><link>https://amatsukiurato.github.io/2019/tried-using-git-secrets/</link><pubDate>Thu, 07 Nov 2019 22:16:44 +0900</pubDate><guid>https://amatsukiurato.github.io/2019/tried-using-git-secrets/</guid><description>はじめに 昨日、日課のはてなブックマークを漁っていたところ、Developers.IOさんの AWSでのセキュリティ対策全部盛り[初級から中級まで]というスライドを見つけました。 こちらのスライドの中で、git-secretsというAWSなどのtoken情報をgitに乗せてしまうのを防ぐソフトが紹介されており、以下のパターンの場合に正しく検知できるのかが気になったため検証しました。 既にtokenがコミットされていた場合 どのように検知するのか？ 既にtokenが混入してるコミットをプッシュした際には検</description></item><item><title>マルチAZとクロスリージョンレプリケーションの違い</title><link>https://amatsukiurato.github.io/2019/difference-between-multiaz-and-cross-region/</link><pubDate>Wed, 06 Nov 2019 22:21:12 +0900</pubDate><guid>https://amatsukiurato.github.io/2019/difference-between-multiaz-and-cross-region/</guid><description>つい最近、表題について調べることが合ったため、忘備録として記載しておきます。 違いについて 結論から書くと、 クロスリージョンレプリカはサブがリードレプリカなのに対して、マルチAZではスタンバイレプリカになっている クロスリージョンレプリカは複数リージョンを利用するのに対し、マルチAZでは同一リージョンを利用する が大きな違いかなと思います。 MultiAZ構成について RDSをマルチAZ構成で起動するとMasterとは別のAZにSlaveのRDSが立ち上げられ、同期レプリケーションが行われます。俗に言うMa</description></item><item><title>ブラウザでARを使ってみた</title><link>https://amatsukiurato.github.io/2019/try-to-create-ar-page/</link><pubDate>Mon, 04 Nov 2019 13:47:45 +0900</pubDate><guid>https://amatsukiurato.github.io/2019/try-to-create-ar-page/</guid><description>はじめに ふと、名刺にARマーカーが記載されていて、 川島教授の顔みたいな（脳トレ）のが出てきたら、とてもおもしろいなと思いついて触ってみました。 もっと脳を鍛える大人のDSトレーニング™ （余談ですが、脳トレのSwitch版がでるみたいです） ARの実現方法 軽く検索したところ、Unityで実現する方法とWeb技術で実現する方法が見つかりました。 ネイティブで実現する方法もあると思いますが、今回はこの2つを見ていきます。 Unity どうやら、Vuforiaという外部ツールと連携して使うのが主流みたいです。 iOSだとA</description></item><item><title>Marpが前よりも使いやすくなっていたので、触ってみた</title><link>https://amatsukiurato.github.io/2019/updated-marp/</link><pubDate>Thu, 31 Oct 2019 22:41:35 +0900</pubDate><guid>https://amatsukiurato.github.io/2019/updated-marp/</guid><description>はじめに ずっと前から、スライドを何とかMarkdownでかけないかをずっと考えていまして、昔はMarpを使っていました。 しかし、かゆいところに手が届かないのが欠点で、ここ最近はrevealjsというライブラリのVSCode拡張機能版cscode-revealを利用しておりました。 こちらもめちゃくちゃ良くて、htmlでイカしたスライドを作りたいなら、めちゃくちゃありな選択肢だと思います。 ずっとcscode-revealを利用していたのですが、こちらはpdf化を行うときがうまく行かず、pptxやpd</description></item><item><title>Amazon Game Tech Night Osakaに行ってみた</title><link>https://amatsukiurato.github.io/2019/game-tech-night-cloud2.0/</link><pubDate>Thu, 31 Oct 2019 02:19:44 +0900</pubDate><guid>https://amatsukiurato.github.io/2019/game-tech-night-cloud2.0/</guid><description>畑違いの業種なのですが、 AWS Pop-Up Loft Osakaが行われるとのことだったので、Game Tech Nightへ参加しました！ 会場は最初から最後まで、飲食ありのラフな感じで開催されておりました😊 登壇者は全員おもしろい発表をされていましたが、とくに面白かったCloud2.0についての所感を記載しております。 もうそこまで迫っている！ Cloud2.0時代の開発 info 登壇者 丹羽さん/GS2のCEO HP https://gs2.io/ フルマネージドサービスを使おう 処理をフルマネージドにすることで、復旧対策や管理までAWSが担保してくれる あえてロックインされにい</description></item><item><title>iCloudのディレクトリをホームディレクトリに持ってくる方法</title><link>https://amatsukiurato.github.io/2019/how-to-display-icloud-doc-on-home/</link><pubDate>Tue, 29 Oct 2019 05:47:19 +0900</pubDate><guid>https://amatsukiurato.github.io/2019/how-to-display-icloud-doc-on-home/</guid><description>クラウドストレージを比較している途中で、 iCloudをhomeディレクトリに移す(シンボリックリンクを貼る)作業が少し手間だったので、メモとして載せてます。 ターミナルからアクセスしづらい問題 ターミナル上からiCloud Driveのファイルへアクセスしようとするには、 Users/[userName]/Library/Mobile\ Documents/com~apple~CloudDocs にまでアクセスしなければならないです。 一応シンボリックリンクは貼れますが、これも少し曲者でリンク元の方にスペース が入っているため、クォーテーションでくくってあげないとだめです(自分は気づかずに10分ぐらい悩んだ)。 ln -s &amp;quot;/Users/$USER/Library/Mobile Documents/com~apple~CloudDocs&amp;quot; iCloud 参考 Make</description></item><item><title>CloudStrageのBoxを使ってみた</title><link>https://amatsukiurato.github.io/2019/tried-to-use-box/</link><pubDate>Sun, 27 Oct 2019 18:28:29 +0900</pubDate><guid>https://amatsukiurato.github.io/2019/tried-to-use-box/</guid><description>最近MacBookProを買ったこともあり、ローカルの環境を見直しておりました。 その際にバックアップ用のクラウドストレージを再検討してみたところ、Boxが良さげだったので使ってみた話です。 TL;DR 無料でクラウドストレージを利用する場合の検討です ファイルの特徴で併用していくのが良さげ 無難に行くならDropBox、容量がほしいならBox 同期時間を気にしないならOneDrive Apple製品統一ならiCloud Driveでもいいかも 以前はDropBoxを利用していた Dropboxはローカルで同期させる際も普</description></item><item><title>hugoの.GitInfoが適応された話(理由は不明です…)</title><link>https://amatsukiurato.github.io/2019/adapted-hugo-gitinfo/</link><pubDate>Sun, 20 Oct 2019 12:47:18 +0900</pubDate><guid>https://amatsukiurato.github.io/2019/adapted-hugo-gitinfo/</guid><description>ずっと前から、記事の更新はgitのコミット履歴を使いたいと思っていたのですが、 .GitInfoの情報が記事にうまく反映されずnilになっていたため、手動で作業してました😇 .GitInfoが使えるようになった原因は恐らく、記事のパスを /content/post/[記事].md→/content/post/[分類用フォルダ]/[記事].md ※[]内はそれぞれの用途で変更する としたことです。 何故これで.GitInfoが適応されたのかは不明ですが、とにかくずっとやりたかったことなので、大満足😭</description></item><item><title>新卒と２人でhtml5を勉強した話👨‍👦</title><link>https://amatsukiurato.github.io/2019/study-html5-with-new-employee/</link><pubDate>Thu, 17 Oct 2019 03:07:18 +0900</pubDate><guid>https://amatsukiurato.github.io/2019/study-html5-with-new-employee/</guid><description>TL;DR 何かをやらせるときは極力その子がやりたいことに沿って学習させる ちゃんと意見を聞けていたら、その子からアクションを起こしてくれる 相手が自由にできるように幅をもたせておくことは大切 コミュニケーションを取る 相手のレベルを考える 自分も知識が広がるようなものを取り組むと👍 概要 9月頃から、上司から 「新卒の面倒を見てやってほしい」 「案件で使う技術を使えるようにしてほしい」 と唐突に言われ、 WTFと心で思いつつ学習プランを新卒と練り、１ヶ月半過ごしました。 新卒は経済学部出身なので、ちょろっと研修(2ヶ月)+OJ</description></item><item><title>Material-uiのmakestyleにて、複数のクラスを動的に指定する方法</title><link>https://amatsukiurato.github.io/2019/how-to-select-multipulclass-material-ui/</link><pubDate>Mon, 14 Oct 2019 15:28:36 +0900</pubDate><guid>https://amatsukiurato.github.io/2019/how-to-select-multipulclass-material-ui/</guid><description>TL;DR classデータをstring配列として持つ 配列.join(' ')を該当のclassName={}の中に記述する 概要 最近、Reactについての勉強を行っていたところ、classの指定に手間取ってしまったのでメモ。 方法としては、探したところ、以下2つがあるみたい。 class名の配列を作成して、最後にjoinで配列の間に を入れて出力 classNameの中で、２つのclass名を呼び出す。 汎用性があるのは方法1のほうだと思われます。 面倒くさいのでソースベタ貼りしてます。 BoxはMaterial-ui</description></item><item><title>Windows10のVSCodeでvscode Revealが正しく動かなかった問題の解決法</title><link>https://amatsukiurato.github.io/2019/fixed-revealjs-vscode-extention-on-windows10/</link><pubDate>Thu, 18 Jul 2019 05:18:30 +0900</pubDate><guid>https://amatsukiurato.github.io/2019/fixed-revealjs-vscode-extention-on-windows10/</guid><description>TL;DR 方法1 改行コードをLFに変える 方法2 拡張機能でLFで書かれている部分をCRLFで書き直す 原因 TL;DRでだいたい判ると思いますが、vscode-revealのスライド仕切りの---がデフォではLFの設定で登録されているのが問題でした。 revealjsの改行コード指摘ページ 日本語訳版 解決法 普通に使う場合は前者の方を実施したほうがいいと思います。 後者のやり方だと設定ファイルに書かない限り、正しく表示させる作業が毎日必要になります。 revealjsに読み込ませる改行コードを変える場合 拡張機能の設定画</description></item><item><title>Route53のルーティング問題を解決した話</title><link>https://amatsukiurato.github.io/2019/resolved-routing-problem-on-route53/</link><pubDate>Mon, 15 Jul 2019 18:58:56 +0900</pubDate><guid>https://amatsukiurato.github.io/2019/resolved-routing-problem-on-route53/</guid><description>TL;DR 外部からホストゾーンのネームサーバを指定してあげないと、レコードが帰ってこなかった Route53のドメインのネームサーバとホストゾーンのネームサーバを一緒にする 概要 前に[Route53] -&amp;gt; [S3のリダイレクト] -&amp;gt; [リダイレクト先ページ] のルーティングを行おうと思いましたがうまく行きませんでした。 該当記事 原因 Route53にて、登録していたドメインに記述されているネームサーバの一覧と ホストゾーンに記載されているNSレコードの値が違っていたため、 正しくルーティングされなかったみたいです。 解決方法と</description></item><item><title>Onsen-UIのDialogコンポーネントサイズを変更する</title><link>https://amatsukiurato.github.io/2019/change-onsen-ui-dialog-component-size/</link><pubDate>Thu, 04 Jul 2019 03:01:22 +0900</pubDate><guid>https://amatsukiurato.github.io/2019/change-onsen-ui-dialog-component-size/</guid><description>TL;DR Onsen-UI読み込み後に出力されるDialogをコピーして手動で使う Dialog群の形だけ取得しているので、Show, Hide共にこちら側で呼ぶ必要あり Onsen-UIのタグオブジェクトから、Onsen-UI側で用意されているshow(), hide()などが呼び出せる これを使って自分で制御を行う 概要 以下の画像のような、アラートのサイズを変更したいのにできない。 Onsen-UIの公式リファレンスを見てもDialogの項目にそれっぽい動作をしてくれるDialogはない。。 解決方法🤗 ons.no</description></item><item><title>S3のリダイレクト機能でgithubのpageへ飛ばしたい</title><link>https://amatsukiurato.github.io/2019/want-to-use-s3-redirect/</link><pubDate>Tue, 02 Jul 2019 23:33:13 +0000</pubDate><guid>https://amatsukiurato.github.io/2019/want-to-use-s3-redirect/</guid><description>表題の通りです。 完成してないです。 前に取得した.netのドメインを踏んだときにS3のリダイレクト機能を使ってこのページに飛べるようにしようと思い設定してました。 出来たこと s3のエンドポイント(httpのリンク)にアクセスするとgithubPageにリダイレクトする s3のエイリアスを作成する 出来てないところ .netドメインにアクセスしてもs3のリダイレクト用エンドポイントにまでたどり着かない not foundエラーが発生する Route53での設定が正しく行えていないと予想</description></item><item><title>UbuntuのClibor的存在CopyQ</title><link>https://amatsukiurato.github.io/2019/copyq-like-clibor-can-use-on-ubuntu/</link><pubDate>Sun, 30 Jun 2019 23:38:31 +0900</pubDate><guid>https://amatsukiurato.github.io/2019/copyq-like-clibor-can-use-on-ubuntu/</guid><description>概要 普段WindowsではClipBoardの履歴にcliborを使っています。 最近OSをubuntuで利用することがあり、ubuntuでコピー履歴管理を探していたところ、 Windows/MacOS/Linux対応のCopyQってのが見つかりました。 さわってみて Cliborみたいに、ショートカットにAlt*2とかの設定はできませんでしたが、 無変換に割り当てられたので概ね満足。 CopyQには、履歴管理以外にも機能があるみたいですが、 とりあえずやりたいことができたのでOK。 参考 https://qualiartz.jp/digitaltransformation/automation/recommend-oss-copyq-clipboard-manager/ https://www.tecmint.com/best-clipboard-managers-for-linux/</description></item><item><title>IntelliJでwebpack導入後、フォルダが見えなくなる問題の解決法</title><link>https://amatsukiurato.github.io/2019/why-did-webpack-hide-outputfile-on-intellij/</link><pubDate>Sun, 30 Jun 2019 20:08:06 +0900</pubDate><guid>https://amatsukiurato.github.io/2019/why-did-webpack-hide-outputfile-on-intellij/</guid><description>TL;DR 設定からWebpackを開いて、configuration fileのパスを消す 原因 IntelliJが賢すぎた。 というのも、webpackのアウトプット先がintelliJ IDEA上でExcluded(非表示になりIntellij上から閲覧できなくなる)のは、 webpackの出力先フォルダだからです。 設定は以下の場所にあり、 Preferences | Languages &amp;amp; Frameworks | JavaScript | Webpackwebpack のconfiguration file:の項目を空文字列にすることによってIntelliJ上から編集できるようになります。 消している理由は パフォーマンスのため</description></item><item><title>Light Sailからの移行</title><link>https://amatsukiurato.github.io/2019/migration-from-lightsail/</link><pubDate>Tue, 16 Apr 2019 04:52:33 +0900</pubDate><guid>https://amatsukiurato.github.io/2019/migration-from-lightsail/</guid><description>移行しました AWSのLight Sail + WordPressでやってましたが、 WordPressがだるすぎたので AWSの~~[AWS Amplify + Hugo]に移行しました。~~ 現在は[github pages + Hugo] github pages とかをそのまま使うのも良かったけど、 AWSのサービスを触ってみたかったのでこっちで立ててみました。 Hugoに移って最初に記事書いていて思うけど、 やっぱMarkdownが最強なんだわ。 スラスラ書ける😎 一応WordPressでもMarkdownで書けるプラグイン📕は少し出てたけど、 めっちゃこれいいやん、みたいなプラ</description></item></channel></rss>