<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on ぎじゅつわふたー</title><link>https://tech-wafter.net/post/</link><description>Recent content in Posts on ぎじゅつわふたー</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Wed, 29 Jul 2020 14:09:28 +0900</lastBuildDate><atom:link href="https://tech-wafter.net/post/index.xml" rel="self" type="application/rss+xml"/><item><title>gitのデフォルトブランチを試した</title><link>https://tech-wafter.net/2020/tried-git-defaultbranch/</link><pubDate>Wed, 29 Jul 2020 14:09:28 +0900</pubDate><guid>https://tech-wafter.net/2020/tried-git-defaultbranch/</guid><description>はじめに ここ最近、一部の技術用語が聞く人によっては不快な単語となっていることが問題となっています。 git もその用語 master が含まれている 1 つの技術としてあげられており、今回のアップデートで変更できるようになりました。 ちょっと気になったので、実際に変更してみました。 試してみる 最新の git を落としてくる必要があるので、公式の指示に従い、ppa リポジトリを追加してインストールする。 1 2 sudo add-apt-repository ppa:git-core/ppa sudo apt update; sudo apt install git アップデートできたら、実際に試す。 ちゃんとgit initした際にmasterではなく、mainに変更されているこ</description></item><item><title>ElixirのPhoenixフレームワークで利用されているbrunchとは</title><link>https://tech-wafter.net/2020/what-is-brunch-used-by-phoenix-framework/</link><pubDate>Mon, 20 Jul 2020 02:40:12 +0900</pubDate><guid>https://tech-wafter.net/2020/what-is-brunch-used-by-phoenix-framework/</guid><description>はじめに Elixir の Framework である、Phoenix の記事を閲覧していたところ、さまざまな記事に--no-brunchと記載されていました。 しかし、2020-7-20 現在、Phoenix のチュートリアルにはbrunchの記載がありませんでした。 そこで、調べてみました。 調査結果 brunch は webpack と同じ、フロントエンドのビルドツールでした。 Phoenix の公式チュートリアルを確認したところ、v1.3.4 までは brunch を利用していたみたいですが、 v1.4.0-rc.0 から webpack に変更されたみたいです。 なので、最新バージョンの Phoenix を利用する場合、 brunch に関する記載は無視して良い</description></item><item><title>kasperskyが入っているMacでhomebrewなどのパッケージ管理ソフトを使いinstallするとエラーがでる問題を解決した</title><link>https://tech-wafter.net/2020/solved-problem-that-can-not-use-package-managers/</link><pubDate>Sun, 05 Jul 2020 22:57:30 +0900</pubDate><guid>https://tech-wafter.net/2020/solved-problem-that-can-not-use-package-managers/</guid><description>はじめに mac のパッケージマネージャーである homebrew にて、インストール時に 1 curl: (35) LibreSSL SSL_connect: SSL_ERROR_SYSCALL in connection to example.com:443 といったエラーが発生したため、調査および解決策をまとめてみました。 TL;DR ウェブ保護を無効にする 各パッケージマネージャに CA 証明書を設定する 原因調査 発生しているエラーがどういったものかを調査したところ、 エラー内容の通り、SSL 周りでエラーが発生している WSL（Windows Subsystem for Linux）でも同様の問題が起きている kaspersky がいたずらしているみたい ということが分かりました。 どうやら、ウェブ保護を行う際に Kaspersky さんが MITM（中間者攻</description></item><item><title>GCPのVMに新しいfirewallの設定を適応させる</title><link>https://tech-wafter.net/2020/how-to-add-firewall-rules-on-vm/</link><pubDate>Sun, 21 Jun 2020 21:20:42 +0900</pubDate><guid>https://tech-wafter.net/2020/how-to-add-firewall-rules-on-vm/</guid><description>はじめに gcp にて、VM インスタンスを立てた後に新しいポートを開けようとしたのですが、あまり情報が落ちてなかったので書きました。 TL;DR VM インスタンスの詳細から、新しく追加した firewall ルールのタグ名をネットワークタグに追加する。 新しい firewall のルールを VM に追加する VM を作成した段階からの手順です。 VPC ネットワークからファイアウォールを選択する ファイアウォール ルールを作成を選択する 名前、ネットワーク、優先度、ターゲットタグ、ソース IP の範囲を入力する。 ターゲットタグは後で VM 側から指定する firewall の設定グループ名になる。 作成完了後、</description></item><item><title>Bootstrap5のα版がリリースされました</title><link>https://tech-wafter.net/2020/bootstrap5-alpha-released/</link><pubDate>Fri, 19 Jun 2020 03:53:12 +0900</pubDate><guid>https://tech-wafter.net/2020/bootstrap5-alpha-released/</guid><description>概要 2020-06-16 に Bootstrap5 の α 版が公開されました!! Bootstrap 5 alpha! | Bootstrap Blog 公式のブログを読むと、以下の対応が挙げられていました。 jQuery を捨てたよ IE サポートを捨てたよ 公式ドキュメントを改善したよ Hugo を使っているよ ロゴを新しくしたよ form 系の要素を見直したよ Utilities を強化したよ html と css のみでボタンのトグルを実装したよ CSS のカスタムプロパティを使い始めたよ カラーパレット拡張したよ 近日公開予定のものは割愛しております。 Bootstrap のために jQuery 入れてたりしてたので、脱 jQuery は嬉しいですね。 容量を測ってみる 公式で CDN 提供されているものから取得しました。 少なくとも jQuery の分だ</description></item><item><title>SpringSecurityのconfigureにて、静的ファイルが対象外にならない</title><link>https://tech-wafter.net/2020/solved-problem-couldnt-ignore-static-resources-in-spring-security/</link><pubDate>Mon, 01 Jun 2020 01:55:26 +0900</pubDate><guid>https://tech-wafter.net/2020/solved-problem-couldnt-ignore-static-resources-in-spring-security/</guid><description>概要 SpringSecurity を導入している SpringBoot のプロジェクトにて、静的ファイルを対象外にするための設定が反映されてなかったです。 原因 静的リソースフォルダとして扱われるフォルダ内が、ルートとして扱われるみたいです。 1 2 3 4 src/main/resources/public └── js/ └── css/ └── file1/ 上記のようなフォルダ構成の場合で、js と css を open にしたい場合は下記のように設定します。 1 2 3 4 @Override public void configure(WebSecurity web) throws Exception { web.ignoring().antMatchers(&amp;#34;/js/**&amp;#34;, &amp;#34;/css/**&amp;#34;); } public で指定しても、SpringSecurity の保護対象外にならないです。 1 2 3 4 5 @Override public void configure(WebSecurity web) throws Exception { // 意味ない web.ignoring().antMatchers(&amp;#34;/public/**&amp;#34;); }</description></item><item><title>yarn実行時にwarning: No license fieldが出ていたのでlicenseをセットした</title><link>https://tech-wafter.net/2020/set-license-on-package-json/</link><pubDate>Sun, 31 May 2020 22:10:47 +0900</pubDate><guid>https://tech-wafter.net/2020/set-license-on-package-json/</guid><description>yarn を走らせると、license を正しくセットしていない場合、 1 warning package.json: No license field と表示されます。 エラー名の通り、package.json 内に license がセットされていないためです。 license をセットしましょう。 1 2 3 { &amp;#34;license&amp;#34;: &amp;#34;SPDXで指定されているID&amp;#34; } SPDX の ID なんて言われても、わからないですよね。 SPDX License List | Software Package Data Exchange (SPDX)に Identifier という項目で記載されているので、それを上記 json の license で指定すれば OK です。 いや、俺は license 指定なんてしたくないんやが &amp;ldquo;UNLICENSED&amp;quot;を入れれば良いみたい。 プラ</description></item><item><title>SpringBoot上でwebpack環境+ThymeLeafをしたい</title><link>https://tech-wafter.net/2020/wanna-introduce-webpack-thymeleaf-scss-on-springboot-pj/</link><pubDate>Sun, 31 May 2020 21:14:12 +0900</pubDate><guid>https://tech-wafter.net/2020/wanna-introduce-webpack-thymeleaf-scss-on-springboot-pj/</guid><description>はじめに テンプレートエンジンと webpack を mix してうまく作れないか奮闘した記録です。 webpack(scss/eslint/prettier/html-webpack-plugin)などを動作させた後に ThymeLeaf で読み込めるようにできないかを考えました。 結論から言うと、一部うまくいきませんでした。 やりたかったこと webpack にて、src 以下のファイル群をコンパイルする。 コンパイルした後に ThymeLeaf を噛ませたいので、html ファイルに関しては templates に配置する public には html 以外のファイルを出力する templates/以下にある html ファイルには、自</description></item><item><title>zsh上でhistoryコマンドを打つと直近15件しかでてこない</title><link>https://tech-wafter.net/2020/zsh-history-cmd-cant-show-all-history-when-using-history/</link><pubDate>Sat, 30 May 2020 18:46:10 +0900</pubDate><guid>https://tech-wafter.net/2020/zsh-history-cmd-cant-show-all-history-when-using-history/</guid><description>概要 bash を使ってたときは、historyで全履歴が表示されたのに対して、 zsh ではhistoryを叩いても、直近 15 件しか表示されなくて困ってました。 原因 bash のhistoryと zsh のhistoryコマンドでは仕様が違う。 両方とも fc コマンドの alias として用意されているみたいですけど、alias のはられ方が違うのかも。詳細は調べていないので、知っている方いたら教えてください。 デフォを全件表示にする 1 alias history=&amp;#39;history 1&amp;#39; history 1で 1~現在までの履歴が表示されるので、historyに alias を貼る。 まぁ何が困ってたかって、grep 検索できない</description></item><item><title>OSX上にインストールしたIntelliJのconfigファイル保存場所をメモする</title><link>https://tech-wafter.net/2020/take-note-intellij-config-path-on-osx/</link><pubDate>Thu, 28 May 2020 02:43:26 +0900</pubDate><guid>https://tech-wafter.net/2020/take-note-intellij-config-path-on-osx/</guid><description>メモ。以下にあります。 windows と違って散らばってるのが少し面倒くさいですね。 また、CommunityEdition と UltimateEdition では微妙に path が違います。 とはそれぞれ、リリース年とリリース月替入ります。 UltimateEdition Path target File path config ~/Library/Preferences/IntelliJIdea&amp;lt;YYYY&amp;gt;.&amp;lt;M&amp;gt; System ~/Library/Caches/IntelliJIdea&amp;lt;YYYY&amp;gt;.&amp;lt;M&amp;gt; Plugins ~/Library/Application Support/IntelliJIdea&amp;lt;YYYY&amp;gt;.&amp;lt;M&amp;gt; Logs ~/Library/Logs/IntelliJIdea&amp;lt;YYYY&amp;gt;.&amp;lt;M&amp;gt; Logs に関して、IntelliJ IDEA 9 以前のものは System location に保存されているみたいです。 CommunityEdition Path target File path config ? System ~/Library/Caches/JetBrains/IdeaIC&amp;lt;YYYY&amp;gt;.&amp;lt;M&amp;gt; Plugins ~/Library/Application Support/JetBrains/IdeaIC&amp;lt;YYYY&amp;gt;.&amp;lt;M&amp;gt; Logs ~/Library/Logs/JetBrains/IdeaIC&amp;lt;YYYY&amp;gt;.&amp;lt;M&amp;gt; CE では JetBrains というフォルダを間に噛ますみたいですね。 config だけは表示されませんでした。こっちは Plugin と違って import/export があるので、良いっちゃ良いのですが、少し気持ち悪いですね。 参考 macos - Where is IntelliJ IDEA config stored in OSX? - Stack</description></item><item><title>伝わる!...かもしれない。エンジニアの文章力向上を読んだ</title><link>https://tech-wafter.net/2020/read-maybe-transmitted-sentence-improve-your-engineer-writing-skills/</link><pubDate>Wed, 27 May 2020 19:17:33 +0900</pubDate><guid>https://tech-wafter.net/2020/read-maybe-transmitted-sentence-improve-your-engineer-writing-skills/</guid><description>はじめに 一昨日辺りに、エンジニアのための日本語文章テクニックを読んだので、引き続き日本語文章系の本を読んだ感じです。 文章での注意点 誤字・脱字をしない 表記を統一する カタカナ語の伸ばし棒有無 カタカナ or 英語 何も考えずに漢字を使うのはやめる 適切に接続語を使う 翻訳調の書き方をしない 言い換えられないかを検討する 抽象的な書き方をやめる できるだけ具体的に書く 抽象的に書いたほうがわかりやすくなる場合もあるので、相手に合わせるのがベスト 数字を入れる 主語と述語を近づける 文章は長くしすぎない 二重否定は使わない 物事を伝え</description></item><item><title>GradleのArtifactとはなんぞや</title><link>https://tech-wafter.net/2020/what-is-artifact/</link><pubDate>Wed, 27 May 2020 12:15:43 +0900</pubDate><guid>https://tech-wafter.net/2020/what-is-artifact/</guid><description>毎回忘れるのでメモ。 Artifact とはなんぞや 該当プロジェクトが、一意に参照できるようにするためのもの。 プロジェクトの名前やライブラリの名前になることが多いと思う。 java のライブラリ管理はドメイン名と Artifact で行われており、それぞれをつなげたのものファイル名にする。 そのため、example.com というドメインを所持している会社の foo-library というライブラリを配布する場合、 1 2 3 com/ └── example └── foo-library といった形になる。 また、Gradle の設定ファイルであるbuild.gradleには、ドメイン部分の 1 group = &amp;#39;com.example&amp;#39; が記載される。 じゃあ Name っ</description></item><item><title>エンジニアのための日本語文章テクニックを読んだ</title><link>https://tech-wafter.net/2020/read-japanese-sentence-technique-for-engineer/</link><pubDate>Mon, 25 May 2020 12:23:16 +0900</pubDate><guid>https://tech-wafter.net/2020/read-japanese-sentence-technique-for-engineer/</guid><description>はじめに 結構前に買った本を読んだので、メモおよび感想を書きました。 お昼の一時間にぱぱっと読めるぐらいの量なので、気軽に読めました 👍 読みやすい文章とは 読みやすい文章 = 流し読みできる文章 読みやすい文章 ≠ 魅力的な文章 流し読みできる文章のメリット 読みやすさ 読んでもらいやすさ 流し読みで読める文章じゃないと、まともに読んでもらえない。 読みやすい文章にするには 読点を使う 読点を上手に使うことが重要になる。 読点は、 文章の強弱や区切りを明確化するため に存在している。 以下の箇所に読点を入れると良くなる。 要因と結果の間</description></item><item><title>wingetのプレビュー版が公開されたので、他のパッケージ管理ソフトとかと一緒に使ってみる</title><link>https://tech-wafter.net/2020/use-windows-package-managers/</link><pubDate>Wed, 20 May 2020 19:59:35 +0900</pubDate><guid>https://tech-wafter.net/2020/use-windows-package-managers/</guid><description>はじめに 2020-5-13 に Microsoft より、 winget のプレビュー版が公開されたので、 これを気に windows で使えるパッケージソフトをひととおり試してみました。 今回は VS Code のインストールを行っていきます。 試したパッケージマネージャは winget chocolatey scoop AppGet Npackd です。 winget を使う GitHub のページから Microsoft.DesktopAppInstaller_8wekyb3d8bbwe.appxbundle をダウンロードする 起動してインストール powershell を起動して vscode をインストールをする 1 winget install vscode これで vscode がインストールされます。 結構楽にインストールできましたが、アンインストールは今のところないっぽいです。 因みに、パッケージ名が複数あった場合は同じ名前が複数個あると言われるので、Id を入</description></item><item><title>英字配列のHHKBを一ヶ月使ってみて</title><link>https://tech-wafter.net/2020/use-us-hhkb-one-month/</link><pubDate>Fri, 15 May 2020 21:54:00 +0900</pubDate><guid>https://tech-wafter.net/2020/use-us-hhkb-one-month/</guid><description>はじめに ⌨️ 1 か月前ぐらいに US キーボードの HHKB を購入したので使用感とかを書きます。 前までは REALFORCE を使っていたのですが、持ち運びが大変だったため切り替えました。 HHKB を使う前が REALFORCE だったので REALFORCE との比較を軸に書いてます。 → TL;DR 持ち運びするなら HHKB、固定なら REALFORCE プログラミングするなら US 配列がオススメ スペック比較 📊 購入してはいませんが、比較として US 配列のテンキーレスである R2TLS-US3-BK も掲載しております。 PD-KB800WS (HHKB Hybrid) R2SA-JP3-BK (REALFORCE テンキーあり) R2TLS-US3-BK (REALFORCE テンキーレス) サイズ 294mm × 120mm × 40mm 455mm x 142mm x 30mm 369mm x 142mm x 30mm 質量 540g(電池含まず) 1400g 1100g キーストローク 3.8mm</description></item><item><title>情報収集によく利用するページをまとめた</title><link>https://tech-wafter.net/2020/often-use-to-collect-information/</link><pubDate>Sat, 02 May 2020 19:42:09 +0900</pubDate><guid>https://tech-wafter.net/2020/often-use-to-collect-information/</guid><description>はじめに 自分がよく見る順で、情報収集に使っているサイトを羅列してみました。 トレンドを知りたい 自分の担当範囲外の技術情報を知りたい 自分の技術領域の知識を増やしたい という方にはオススメです。 他にもあるよ〜という方がいれば、共有してくれると嬉しいです。 Qiita Qiita ここ最近国内でもっとも有名な技術情報の共有サービス。 国内の類似サービスとしては、Qrunch（クランチ）やCrieitなどもある。 良いところ 国内のサイトなので、日本語での情報収集がしやすい 国内の技術トレンドをつかみやすい 記事に対してプルリクを送信でき</description></item><item><title>docsify用のサーバ実行をexeファイルとドキュメントファイル群だけで起動できるようにする</title><link>https://tech-wafter.net/2020/use-docsify-by-execute-file/</link><pubDate>Thu, 23 Apr 2020 03:41:43 +0900</pubDate><guid>https://tech-wafter.net/2020/use-docsify-by-execute-file/</guid><description>はじめに 調査資料などを見やすい形で保存できるように docsify という、node.js で作られたドキュメント管理ツールを利用しています。node.js で作られているので、ローカルで閲覧する際にはもちろん npm コマンドが必要です（厳密には違いますが、CORS の関係上サーバ起動したほうが手っ取り早いため）。これでは、node.js をインストールしていない人や技術的知識のない人が docsify の画面を通して確認できません。 そこで、ドキュメントファイル（markdown, index.html など）とサーバ起動用の exe だけを用意して、exe 起動するだけ</description></item><item><title>リアルフォースをMacで使えるようにする</title><link>https://tech-wafter.net/2020/use-realforce-on-macbook/</link><pubDate>Sun, 12 Apr 2020 16:35:34 +0900</pubDate><guid>https://tech-wafter.net/2020/use-realforce-on-macbook/</guid><description>はじめに リモートワークになり、会社に置いていたリアルフォースを持ち帰ったため個人用途の Mac でも利用しようと思い調べました。 個人の Mac 用に HHKB を買おうと思ったのですが、買う前に尊師スタイルでタイプする感覚を試しかったのでちょうど良かったです。 TL;DR Karabiner-Elements を使ってキーの変換を行う Win キーボードのボタンカスタマイズを行う Mac に Windows 用のキーボードを挿しても一応反応するのですが、 かな/英字の変換キーがない Windows キーがコマンドキーになるため、微妙に位置がずれる などの問題点があります。項目 2 はなんとかなるのですが、項目 1 は致命的です</description></item><item><title>github-actions上でbuildした際、lastmodの更新がすべての記事に適用される問題を解決した</title><link>https://tech-wafter.net/2020/solved-issue-with-github-actions-lastmod-updates-being-applied-to-all-the-articles/</link><pubDate>Thu, 02 Apr 2020 02:47:24 +0900</pubDate><guid>https://tech-wafter.net/2020/solved-issue-with-github-actions-lastmod-updates-being-applied-to-all-the-articles/</guid><description>はじめに hugo のジェネレートを GitHub-actions を使って、push するだけでデプロイできるようにしたのですが、全記事の最終更新日が更新されていたため原因調査をおこないました。 TL;DR git の clone を行う際に最新コミットしか取得していなかった actions/checkoutを利用する場合は以下の方法で fetch させ、全履歴を取得する 1 2 3 - uses:actions/checkout@v2with:fetch-depth:0# Fetch all history for .GitInfo and . 試したこと GitHub-actions 上と local の比較 icon 結果 ✅ 更新対象記事のみ lastmod が更新されていた ❎ すべての記事に対して更新が入っていた ローカル ✅MacOS でのビルド ✅Vagrant 内の Ubuntu:18.04.4 でのビルド CI 環境 ❎Ubuntu</description></item><item><title>DevToolsにあるSourceタブ内で閉じてしまったconsoleを再度開く（Chrome）</title><link>https://tech-wafter.net/2020/reopen-devtools-console-on-source-tab/</link><pubDate>Tue, 31 Mar 2020 16:47:29 +0900</pubDate><guid>https://tech-wafter.net/2020/reopen-devtools-console-on-source-tab/</guid><description>Sources タブを開いた状態で Esc を押す。 右上の「︙」をクリックして、「(Show|Hide) console drawer」をクリックする。 これで表示/非表示ができる。ぱっと検索したときにすぐ検索で出てこなかったのでメモ。 地味に window がでかいから、「x」でよく消してしまうんだよね。</description></item><item><title>不要ソースコードをコメントアウトするなら、削除して履歴を残して😭</title><link>https://tech-wafter.net/2020/please-delete-unnecessary-comment-out-and-use-git-commit/</link><pubDate>Tue, 31 Mar 2020 02:47:08 +0900</pubDate><guid>https://tech-wafter.net/2020/please-delete-unnecessary-comment-out-and-use-git-commit/</guid><description>信じられないだろうが、バージョン管理システムへの登録や更新も「非効率的」とか「無駄な工数」とか抜かすSEもプログラマも多い。 &amp;mdash; Yuichi Onodera (@mokemoke6502) March 25, 2020 に対して、 gitは使ってるけどコメントが ・画面の修正をした ・バグを直した ・一旦コミット とかの意味がほぼ無いコメントで埋もれてるgitは見かける https://t.co/9A6NV7nwoA &amp;mdash; matsuaki (@matsu4ki) March 26, 2020 と引用リツイートしたのですが、もう少し自分で整理しておきたいと思い記事にしました。 はじめに git でソースコード管理をしている際、仕様変更などで特定の関数自体が不要になる場合があります。 その時、対応しているエンジ</description></item><item><title>VSCode上でIntelliJライクなgitのannotate diffができるらしい</title><link>https://tech-wafter.net/2020/try-to-hard-to-display-intellij-like-annotate-diff/</link><pubDate>Tue, 24 Mar 2020 22:42:19 +0900</pubDate><guid>https://tech-wafter.net/2020/try-to-hard-to-display-intellij-like-annotate-diff/</guid><description>はじめに IntelliJ には Git の履歴確認方法の 1 つとして、Annotate 機能が用意されています。 これがめちゃクソ便利なので、なんとかして VS Code 内でも再現できないかと模索した話になります。 Git Lens は VS Code 内の良い拡張機能として紹介されていることが多いけど、Git Lens の機能の 1 つである annotation diff についてはあまり紹介されていないように思えるので紹介してみた。 TL;DR プラグインの Git Lens を入れて、以下の設定に変更すればそれっぽくなる SettingName Value Avatars チェックを外す Compact チェックを外す Date Format YYYY/MM/DD Format ${id} ${date} ${author|10?} 設定する Git Lens が必要なので、Extensions から Git Lens をダウ</description></item><item><title>GitHub-ActionsでカスタムドメインのGitHub-Pagesをデプロイすると、カスタムドメインの登録が消える</title><link>https://tech-wafter.net/2020/deploy-custom-domain-github-pages-on-github-actions/</link><pubDate>Sun, 01 Mar 2020 22:24:43 +0900</pubDate><guid>https://tech-wafter.net/2020/deploy-custom-domain-github-pages-on-github-actions/</guid><description>GitHub-Actions でデプロイを行うと、custom ドメインで設定したものが初期化されていました。 原因は GitHub-Actions で利用しているactions-gh-pagesにて、cname の設定を忘れていたためでした。 こちらに乗っている通り、with.cnameに自身のカスタムドメイン名を記入すれば正常にデプロイされるはずです。 1 2 3 4 5 6 - name:Deployuses:peaceiris/actions-gh-pages@v3with:github_token:${{secrets.GITHUB_TOKEN}}publish_dir:./publiccname:github.com</description></item><item><title>アフターデジタルを読んだ</title><link>https://tech-wafter.net/2020/read-after-digital/</link><pubDate>Wed, 26 Feb 2020 21:59:51 +0900</pubDate><guid>https://tech-wafter.net/2020/read-after-digital/</guid><description>はじめに アフターデジタルという本を読みました。 感想にも書いてますが、IT に関わるすべての人が読んで良いと思う一冊だったので、 本屋で見かけた際は手にとってみては？ 自分は Kindle で読みましたが…ｗ 感想 アフターデジタル オフラインのない時代に生き残る著者 : 藤井保文日経BP発売日 : 2019-03-23ブクログでレビューを見る»IT技術者やIT技術に関わる人は手にとって良い一冊だと思います。 TL;DR この本を読むと ・中国で行われているOMOの考え方 ・個人データの重要性/使い方 ・個人データに対する考え方 ・日本でOMOへシフ</description></item><item><title>社内のLT大会に参加してみた（自分のテーマは[Gasを用いた確認作業の自動化]）</title><link>https://tech-wafter.net/2020/tried-lightningtalk-in-the-office/</link><pubDate>Tue, 25 Feb 2020 22:24:40 +0900</pubDate><guid>https://tech-wafter.net/2020/tried-lightningtalk-in-the-office/</guid><description>はじめに 1 月 21 日に社内で LT 大会があったので、参加してみました！ 誰かが企画した LT 大会というものには参加したことがなかったため、非常に良い経験をしたと感じてます。こちらの記事は LT の体験談となります。 TL;DR LT 発表は自分の成果を簡単に発表できる場 LT に自身がないマンは小さめの LT で発表するべし 他人から評価してもらうことでモチベがちょっと上がる いい区切りになる テーマについて 何個か候補はあったので、主催グループの一人にどれが良いか聞いて決めました。内容はタイトルにもある通り GoogleAppScript を利用して、フロントの確認作業を少し自動</description></item><item><title>configの設定からHugoで表示するコードに番号を表示する</title><link>https://tech-wafter.net/2020/hugo-can-show-numberline-on-code-by-config/</link><pubDate>Tue, 18 Feb 2020 21:50:42 +0900</pubDate><guid>https://tech-wafter.net/2020/hugo-can-show-numberline-on-code-by-config/</guid><description>以前 昔（v0.60.0 以前）はソースコードに行数を入れるには、以下のような記述が必要でした。 1 2 3 {{&amp;lt; highlight go &amp;#34;linenos=table,hl_lines=8 15-17,linenostart=199&amp;#34; &amp;gt;}} // ... code {{&amp;lt; / highlight &amp;gt;}} 今 今は以下の config（config.toml）を設定しておくことで、 バッククォート（`）だけのコードでも行数が付くようになってます。 1 2 3 4 5 6 7 8 9 10 11 [markup] [markup.highlight] codeFences = true guessSyntax = false hl_Lines = &amp;#34;&amp;#34; lineNoStart = 1 lineNos = false lineNumbersInTable = true noClasses = true style = &amp;#34;monokai&amp;#34; tabWidth = 4 意味を乗っけておくと、 Name Description codeFences syntaxHighlight を使うかの設定。 guessSyntax 書かれている言語を推測してハイライトするかの設定。 hl_Lines highLight する範囲の設定で、monokai だと黄色くなる。書き方は&amp;</description></item><item><title>Github-Actionsでhugoのデプロイを自動化してみた</title><link>https://tech-wafter.net/2020/build-hugo-homepage-by-github-action/</link><pubDate>Mon, 10 Feb 2020 12:46:44 +0900</pubDate><guid>https://tech-wafter.net/2020/build-hugo-homepage-by-github-action/</guid><description>はじめに 結構前から GitHub-Actions を使ってみたいなと思っていましたが、題材がなく困ってました。 そこで、「なにか定期的にデプロイしてるやつってあったっけ」と考えたところ 「そういや hugo のデプロイって自動化できるんじゃね？」という考えに行き着き、実際にやってみた感じです。 TL;DR この記事は hugo 用リポジトリと homepage 用リポジトリで分割している場合の説明です GitHub-Actions を利用してデプロイすることは可能 hugo 用の action がすでに存在するので、そちらを利用すると良い GitHub-Actions 用の yml ファイルを下に記載しているので、参考になるかも 別リポジトリにデプロイする場合はアクセス</description></item><item><title>Hugoで一度publishしてしまったファイルをデプロイ時に消す</title><link>https://tech-wafter.net/2020/how-to-clear-old-publish-files/</link><pubDate>Tue, 04 Feb 2020 02:40:26 +0900</pubDate><guid>https://tech-wafter.net/2020/how-to-clear-old-publish-files/</guid><description>はじめに hugoでデプロイする際に、よくミスって不要記事を publish してしまうことがあります。 その後再度公開を行うと、出力元のフォルダからは消えているのにもかかわらず残り続けます。 今回はそれの解決を行いました。 （今までは public 以下をスクリプトで消してた…） TL;DR hugo --cleanDestinationDirでおｋ How to ほぼほぼ TL;DR で終わっちゃってますが、個人的に TL;DR がある記事のほうが手っ取り早く答えを見つけられると思っているので記載してます。 ググってもあんまり情報がなかったので、こういうときはとりあえず、help を見よ</description></item><item><title>しょぼい記事の投稿でも、何もしないよりは良いと思う今日このごろ</title><link>https://tech-wafter.net/2020/subtle-post-is-better-than-nothing/</link><pubDate>Mon, 03 Feb 2020 22:00:00 +0900</pubDate><guid>https://tech-wafter.net/2020/subtle-post-is-better-than-nothing/</guid><description>はじめに ここ一ヶ月、何も更新できていませんでした。 ネタはあったのですが、明日書けばいいや病にかかってしまい結局何もできていなかったという感じです。今回の問題をちょっと自分なりに振り返ってみようと思いました。 TL;DR 環境を変えよう ♻️ 記事の量は自分に合わせよう 📄 業務は程々に、僅かな時間をみつけて勉強時間をこしらえる 🏃‍♂️ 原因 「さぁ書こう」という環境に身を置かなかった 自分は基本的に家にいると、一日中動画かゲームをしてしまいします 🎮 勉強とか読書とかは、なんかめちゃくちゃやりたいという周期がありまして、その</description></item><item><title>PowerShellの色を変えようと思ってたら、Windows Terminal(Preview)で変更してた</title><link>https://tech-wafter.net/2019/tried-to-change-powershell-color/</link><pubDate>Mon, 02 Dec 2019 13:21:43 +0900</pubDate><guid>https://tech-wafter.net/2019/tried-to-change-powershell-color/</guid><description>TL;DR Color Toolでもできるっぽいが、今後はWindows Terminalを使う Settingsのprofilesに設定を記述すると適応される 詳細はここを確認すること はじめに プライベートでは MacBook Pro を使用しているのですが、会社では ThinkPad の WindowsPC を開発 PC として利用しています。 ちょっとした作業をする際には、WSLを利用して行うようにしているのですが、どうしてもPowerShellで処理を走らせないと駄目な場面がでてきます。そこでようやくPowerShellを開くのですが、デフォルトの色が嫌がらせレベルで見ずらい… とい</description></item><item><title>バージョンの付け方を調べてみた</title><link>https://tech-wafter.net/2019/what-kind-of-management-version/</link><pubDate>Mon, 25 Nov 2019 21:20:19 +0900</pubDate><guid>https://tech-wafter.net/2019/what-kind-of-management-version/</guid><description>はじめに 今日、別部門の先輩から 「お前のところのプロジェクトはどんな感じでバージョンの番号つけてる？」 と聞かれたので、 「年月日で付けてます。」 と返したのですが、世間ではどういった感じで付けてるかをしっかりと意識してみたことはないと思い、調べてみました。 さまざまな命名方法 いくつか、慣習で決められているものもあるようです。 丸投げになってしまいますが、めちゃくちゃまとめられた記事を見つけたのでこちらを見るとわかりやすいです。 バージョンにあれこれ考えを巡らせてみる 各ソフトウェアのバージョン定義 自分が思いつ</description></item><item><title>使ってよかったVSCode拡張機能14選+3選の紹介</title><link>https://tech-wafter.net/2019/good-extentions/</link><pubDate>Thu, 14 Nov 2019 00:42:17 +0900</pubDate><guid>https://tech-wafter.net/2019/good-extentions/</guid><description>一軍 この枠で紹介している拡張機能は、高い汎用性を持っており私自身も良く使っている拡張機能たちです。 Settings Sync♻️ VS Code の拡張機能を移行する場合や、バックアップするときに大活躍！ とりあえず入れとけスタイルでオッケーな拡張機能。 かったるい移行作業をめちゃくちゃ楽にしてくれる。端末が壊れても安心だし、真っ先に入れても良い拡張機能かも。自分で管理しても良いけどね。 Download Page テキスト校正くん 👨‍🎓 VS Code 上にあるテキストを自動で添削してくれるスグレモノ。 どこかに議事録やまとめた文章を提出する前に少し確認するだけで、最</description></item><item><title>Hugoで記事が一年以上過ぎた場合はnoticeを表示するようにした</title><link>https://tech-wafter.net/2019/show-notification-if-now-greater-equal-updated-time/</link><pubDate>Tue, 12 Nov 2019 21:36:21 +0900</pubDate><guid>https://tech-wafter.net/2019/show-notification-if-now-greater-equal-updated-time/</guid><description>TL;DR 以下の書き方で実装可（⚠️Bulmaでの実装） 1 2 3 4 5 6 {{$year:=(div(subnow.Unix.Lastmod.Unix)31536000)}} {{ifle1$year}} &amp;lt;div class=&amp;#34;notification is-warning&amp;#34;&amp;gt; この記事は、掲載されてから {{$year}} 年間修正されておりません。 &amp;lt;/div&amp;gt; {{end}} Hugo 公式の.Unixページを見よ はじめに 唐突に、「記事が老朽化している表示」はほしいなと思い、色々と検索して実装ができた感じです。Goのテンプレートエンジンにだけ詳しくなっていく… 方法 一番上に書いてあるとおり、 1 2 3 4 5 6 7 &amp;lt;!-- 再掲 --&amp;gt; {{$year:=(div(subnow.Unix.Lastmod.Unix)31536000)}} {{ifle1$year}} &amp;lt;div class=&amp;#34;notification is-warning&amp;#34;&amp;gt; この記事は、掲載されてから {{$year}} 年間修正されておりません。 &amp;lt;/div&amp;gt; {{end}} で実装できる。 実際の表示はこんな感じ 😗 多分上記のコードを読んだらわかると思</description></item><item><title>Three.jsを学習する【第一回】</title><link>https://tech-wafter.net/2019/study-three.js-1/</link><pubDate>Sat, 09 Nov 2019 17:35:48 +0900</pubDate><guid>https://tech-wafter.net/2019/study-three.js-1/</guid><description>前回のブラウザで AR を使ってみたを触って、オブジェクトをThree.jsで作りたいと思いました。 Three.jsを学習するにあたって、良さげなサイトがあったので、こちらを参考に学習していこうと思います。忘備録です。 function をアロー関数に変える なんでアロー関数にしたいのかは、関数宣言 vs 関数式 | ES2015+を参照。 1 2 3 4 5 window.addEventListener(&amp;#39;load&amp;#39;, init); function init() { // 処理 } から 1 2 3 4 const init = () =&amp;gt; { // 処理 }; window.addEventListener(&amp;#39;load&amp;#39;, init); に変える。 Three.js でオブジェクトを表示させるには レンダラーを作成する シーンを作成する 意味 レンダラー 描画するシステムのこと レンダリングエン</description></item><item><title>git-secretsのawsトークン保護を検証してみた</title><link>https://tech-wafter.net/2019/tried-using-git-secrets/</link><pubDate>Thu, 07 Nov 2019 22:16:44 +0900</pubDate><guid>https://tech-wafter.net/2019/tried-using-git-secrets/</guid><description>はじめに 昨日、日課のはてなブックマークを漁っていたところ、Developers.IO さんの AWS でのセキュリティ対策全部盛り[初級から中級まで]というスライドを見つけました。 こちらのスライドの中で、git-secretsという AWS などの token 情報をgitに乗せてしまうのを防ぐソフトが紹介されており、以下のパターンの場合に正しく検知できるのかが気になったため検証しました。 既に token がコミットされていた場合 どのように検知するのか？ 既に token が混入してるコミットをプッシュした際には検知できるのか 既に token がコミットされ</description></item><item><title>マルチAZとクロスリージョンレプリケーションの違い</title><link>https://tech-wafter.net/2019/difference-between-multiaz-and-cross-region/</link><pubDate>Wed, 06 Nov 2019 22:21:12 +0900</pubDate><guid>https://tech-wafter.net/2019/difference-between-multiaz-and-cross-region/</guid><description>つい最近、表題について調べることが合ったため、忘備録として記載しておきます。 違いについて 結論から書くと、 クロスリージョンレプリカはサブがリードレプリカなのに対して、マルチ AZ ではスタンバイレプリカになっている クロスリージョンレプリカは複数リージョンを利用するのに対し、マルチ AZ では同一リージョンを利用する が大きな違いかなと思います。 MultiAZ 構成について RDS をマルチ AZ 構成で起動すると Master とは別の AZ に Slave の RDS が立ち上げられ、同期レプリケーションが行われます。俗に言う Master-Slave 構成。 Master がサーバダウンすれば、Slave くんが変</description></item><item><title>ブラウザでARを使ってみた</title><link>https://tech-wafter.net/2019/try-to-create-ar-page/</link><pubDate>Mon, 04 Nov 2019 13:47:45 +0900</pubDate><guid>https://tech-wafter.net/2019/try-to-create-ar-page/</guid><description>はじめに ふと、名刺に AR マーカーが記載されていて、 川島教授の顔みたいな（脳トレ）のが出てきたら、とてもおもしろいなと思いついて触ってみました。 もっと脳を鍛える大人の DS トレーニング ™ （余談ですが、脳トレのSwitch 版がでるみたいです） AR の実現方法 軽く検索したところ、Unity で実現する方法と Web 技術で実現する方法が見つかりました。 ネイティブで実現する方法もあると思いますが、今回はこの 2 つを見ていきます。 Unity どうやら、Vuforiaという外部ツールと連携して使うのが主流みたいです。 iOS だとARkit、An</description></item><item><title>Marpが前よりも使いやすくなっていたので、触ってみた</title><link>https://tech-wafter.net/2019/updated-marp/</link><pubDate>Thu, 31 Oct 2019 22:41:35 +0900</pubDate><guid>https://tech-wafter.net/2019/updated-marp/</guid><description>はじめに ずっと前から、スライドを何とか Markdown でかけないかをずっと考えていまして、昔は Marp を使っていました。 しかし、かゆいところに手が届かないのが欠点で、ここ最近はrevealjsというライブラリの VSCode 拡張機能版cscode-revealを利用しておりました。 こちらもめちゃくちゃ良くて、html でイカしたスライドを作りたいなら、めちゃくちゃありな選択肢だと思います。 ずっとcscode-revealを利用していたのですが、こちらは pdf 化を行うときがうまく行かず、pptxやpdfの資料として作成するには少し辛い</description></item><item><title>Amazon Game Tech Night Osakaに行ってみた</title><link>https://tech-wafter.net/2019/game-tech-night-cloud2.0/</link><pubDate>Thu, 31 Oct 2019 02:19:44 +0900</pubDate><guid>https://tech-wafter.net/2019/game-tech-night-cloud2.0/</guid><description>畑違いの業種なのですが、 AWS Pop-Up Loft Osaka が行われるとのことだったので、Game Tech Night へ参加しました！ 会場は最初から最後まで、飲食ありのラフな感じで開催されておりました 😊 登壇者は全員おもしろい発表をされていましたが、とくに面白かった Cloud2.0 についての所感を記載しております。 もうそこまで迫っている！ Cloud2.0 時代の開発 info 登壇者 丹羽さん/GS2 の CEO HP https://gs2.io/ フルマネージドサービスを使おう 処理をフルマネージドにすることで、復旧対策や管理まで AWS が担保してくれる あえてロックインされにいく コントローラブルなものを利用する=問題が発生したら</description></item><item><title>iCloudのディレクトリをホームディレクトリに持ってくる方法</title><link>https://tech-wafter.net/2019/how-to-display-icloud-doc-on-home/</link><pubDate>Tue, 29 Oct 2019 05:47:19 +0900</pubDate><guid>https://tech-wafter.net/2019/how-to-display-icloud-doc-on-home/</guid><description>クラウドストレージを比較している途中で、 iCloud を home ディレクトリに移す(シンボリックリンクを貼る)作業が少し手間だったので、メモとして載せてます。 ターミナルからアクセスしづらい問題 ターミナル上から iCloud Drive のファイルへアクセスしようとするには、 1 Users/[userName]/Library/Mobile\ Documents/com~apple~CloudDocs にまでアクセスしなければならないです。 一応シンボリックリンクは貼れますが、これも少し曲者でリンク元の方にスペース``が入っているため、クォーテーションでくくってあげないとだめです(自分は気づかずに 10 分ぐらい悩んだ)。 1 ln -s &amp;#34;/Users/$USER/Library/Mobile Documents/com~apple~CloudDocs&amp;#34; iCloud 参考 Make A Symbolic Link to Your iCloud Drive ターミナルから</description></item><item><title>CloudStorageのBoxを使ってみた</title><link>https://tech-wafter.net/2019/tried-to-use-box/</link><pubDate>Sun, 27 Oct 2019 18:28:29 +0900</pubDate><guid>https://tech-wafter.net/2019/tried-to-use-box/</guid><description>最近 MacBookPro を買ったこともあり、ローカルの環境を見直しておりました。 その際にバックアップ用のクラウドストレージを再検討してみたところ、Box が良さげだったので使ってみた話です。 TL;DR 無料でクラウドストレージを利用する場合の検討です ファイルの特徴で併用していくのが良さげ 無難に行くならDropBox、容量がほしいならBox 同期時間を気にしないならOneDrive Apple 製品統一ならiCloud Driveでもいいかも 以前は DropBox を利用していた Dropbox はローカルで同期させる際も普通のファイルと同様に扱えて非常に便利だったのですが</description></item><item><title>hugoの.GitInfoが適応された話(理由は不明です…)</title><link>https://tech-wafter.net/2019/adapted-hugo-gitinfo/</link><pubDate>Sun, 20 Oct 2019 12:47:18 +0900</pubDate><guid>https://tech-wafter.net/2019/adapted-hugo-gitinfo/</guid><description>ずっと前から、記事の更新は git のコミット履歴を使いたいと思っていたのですが、 .GitInfoの情報が記事にうまく反映されずnilになっていたため、手動で作業してました 😇 .GitInfoが使えるようになった原因は恐らく、記事のパスを /content/post/[記事].md→/content/post/[分類用フォルダ]/[記事].md ※[]内はそれぞれの用途で変更する としたことです。 何故これで.GitInfoが適応されたのかは不明ですが、とにかくずっとやりたかったことなので、大満足 😭</description></item><item><title>新卒と２人でhtml5を勉強した話👨‍👦</title><link>https://tech-wafter.net/2019/study-html5-with-new-employee/</link><pubDate>Thu, 17 Oct 2019 03:07:18 +0900</pubDate><guid>https://tech-wafter.net/2019/study-html5-with-new-employee/</guid><description>TL;DR 何かをやらせるときは極力その子がやりたいことに沿って学習させる ちゃんと意見を聞けていたら、その子からアクションを起こしてくれる 相手が自由にできるように幅をもたせておくことは大切 コミュニケーションを取る 相手のレベルを考える 自分も知識が広がるようなものを取り組むと 👍 概要 9 月頃から、上司から 「新卒の面倒を見てやってほしい」 「案件で使う技術を使えるようにしてほしい」 と唐突に言われ、 WTF と心で思いつつ学習プランを新卒と練り、１ヶ月半過ごしました。 新卒は経済学部出身なので、ちょろっと研修(2 ヶ月)+OJT で</description></item><item><title>Material-uiのmakestyleにて、複数のクラスを動的に指定する方法</title><link>https://tech-wafter.net/2019/how-to-select-multipulclass-material-ui/</link><pubDate>Mon, 14 Oct 2019 15:28:36 +0900</pubDate><guid>https://tech-wafter.net/2019/how-to-select-multipulclass-material-ui/</guid><description>TL;DR class データを string 配列として持つ 配列.join(' ')を該当のclassName={}の中に記述する 概要 最近、React についての勉強を行っていたところ、classの指定に手間取ってしまったのでメモ。 方法としては、探したところ、以下 2 つがあるみたい。 class 名の配列を作成して、最後に join で配列の間に``を入れて出力 classNameの中で、２つの class 名を呼び出す。 汎用性があるのは方法 1 のほうだと思われます。 面倒くさいのでソースベタ貼りしてます。 BoxはMaterial-uiの Util-component です。 最後に各クラスを join でくっつ</description></item><item><title>Windows10のVSCodeでvscode Revealが正しく動かなかった問題の解決法</title><link>https://tech-wafter.net/2019/fixed-revealjs-vscode-extention-on-windows10/</link><pubDate>Thu, 18 Jul 2019 05:18:30 +0900</pubDate><guid>https://tech-wafter.net/2019/fixed-revealjs-vscode-extention-on-windows10/</guid><description>TL;DR 方法 1 改行コードをLFに変える 方法 2 拡張機能でLFで書かれている部分をCRLFで書き直す 原因 TL;DR でだいたい判ると思いますが、vscode-reveal のスライド仕切りの---がデフォではLFの設定で登録されているのが問題でした。 revealjs の改行コード指摘ページ 日本語訳版 解決法 普通に使う場合は前者の方を実施したほうがいいと思います。 後者のやり方だと設定ファイルに書かない限り、正しく表示させる作業が毎日必要になります。 revealjs に読み込ませる改行コードを変える場合 拡張機能の設定画面を開く(Ctrl + ,) reveal JS の項目を探</description></item><item><title>Route53のルーティング問題を解決した話</title><link>https://tech-wafter.net/2019/resolved-routing-problem-on-route53/</link><pubDate>Mon, 15 Jul 2019 18:58:56 +0900</pubDate><guid>https://tech-wafter.net/2019/resolved-routing-problem-on-route53/</guid><description>TL;DR 外部からホストゾーンのネームサーバを指定してあげないと、レコードが帰ってこなかった Route53 のドメインのネームサーバとホストゾーンのネームサーバを一緒にする 概要 前に[Route53] -&amp;gt; [S3 のリダイレクト] -&amp;gt; [リダイレクト先ページ] のルーティングを行おうと思いましたがうまく行きませんでした。 該当記事 原因 Route53 にて、登録していたドメインに記述されているネームサーバの一覧と ホストゾーンに記載されている NS レコードの値が違っていたため、 正しくルーティングされなかったみたいです。 解決方法としては、下記画像のように値を揃</description></item><item><title>Onsen-UIのDialogコンポーネントサイズを変更する</title><link>https://tech-wafter.net/2019/change-onsen-ui-dialog-component-size/</link><pubDate>Thu, 04 Jul 2019 03:01:22 +0900</pubDate><guid>https://tech-wafter.net/2019/change-onsen-ui-dialog-component-size/</guid><description>TL;DR Onsen-UI 読み込み後に出力される Dialog をコピーして手動で使う Dialog 群の形だけ取得しているので、Show, Hide 共にこちら側で呼ぶ必要あり Onsen-UI のタグオブジェクトから、Onsen-UI 側で用意されているshow(), hide()などが呼び出せる これを使って自分で制御を行う 概要 以下の画像のような、アラートのサイズを変更したいのにできない。 Onsen-UI の公式リファレンスを見ても Dialog の項目にそれっぽい動作をしてくれる Dialog はない。。 解決方法 🤗 ons.notification.alert();を実行して、で Onsen-UI の要素を取得する。 要素を html に貼り付</description></item><item><title>S3のリダイレクト機能でgithubのpageへ飛ばしたい</title><link>https://tech-wafter.net/2019/want-to-use-s3-redirect/</link><pubDate>Tue, 02 Jul 2019 23:33:13 +0000</pubDate><guid>https://tech-wafter.net/2019/want-to-use-s3-redirect/</guid><description>完成してないです。 動きました。 前に取得した.netのドメインを踏んだときに S3 のリダイレクト機能を使ってこのページに飛べるようにしようと思い設定してました。 出来たこと s3 のエンドポイント(http のリンク)にアクセスすると githubPage にリダイレクトする s3 のエイリアスを作成する 出来てないところ .netドメインにアクセスしても s3 のリダイレクト用エンドポイントにまでたどり着かない - not found エラーが発生する - Route53 での設定が正しく行えていないと予想 追記 Route53 の DNS を正しく設定できていなかったことが原因でした。 詳しくはこちらの記事を</description></item><item><title>UbuntuのClibor的存在CopyQ</title><link>https://tech-wafter.net/2019/copyq-like-clibor-can-use-on-ubuntu/</link><pubDate>Sun, 30 Jun 2019 23:38:31 +0900</pubDate><guid>https://tech-wafter.net/2019/copyq-like-clibor-can-use-on-ubuntu/</guid><description>概要 普段 Windows では ClipBoard の履歴にcliborを使っています。 最近 OS を ubuntu で利用することがあり、ubuntu でコピー履歴管理を探していたところ、 Windows/MacOS/Linux 対応の CopyQってのが見つかりました。 さわってみて Clibor みたいに、ショートカットにAlt*2とかの設定はできませんでしたが、 無変換に割り当てられたので概ね満足。 CopyQ には、履歴管理以外にも機能があるみたいですが、 とりあえずやりたいことができたので OK。 参考 https://qualiartz.jp/digitaltransformation/automation/recommend-oss-copyq-clipboard-manager/ https://www.tecmint.com/best-clipboard-managers-for-linux/</description></item><item><title>IntelliJでwebpack導入後、フォルダが見えなくなる問題の解決法</title><link>https://tech-wafter.net/2019/why-did-webpack-hide-outputfile-on-intellij/</link><pubDate>Sun, 30 Jun 2019 20:08:06 +0900</pubDate><guid>https://tech-wafter.net/2019/why-did-webpack-hide-outputfile-on-intellij/</guid><description>TL;DR 設定から Webpack を開いて、configuration file のパスを消す 原因 IntelliJが賢すぎた。 というのも、webpack のアウトプット先が intelliJ IDEA 上で Excluded(非表示になり Intellij 上から閲覧できなくなる)のは、 webpack の出力先フォルダだからです。 設定は以下の場所にあり、 Preferences | Languages &amp;amp; Frameworks | JavaScript | Webpackwebpack のconfiguration file:の項目を空文字列にすることによって IntelliJ 上から編集できるようになります。 消している理由は パフォーマンスのため そもそも編集する必要がないため みたいですね。 これ解決するのに結構時間かかりまし</description></item><item><title>Light Sailからの移行</title><link>https://tech-wafter.net/2019/migration-from-lightsail/</link><pubDate>Tue, 16 Apr 2019 04:52:33 +0900</pubDate><guid>https://tech-wafter.net/2019/migration-from-lightsail/</guid><description>移行しました AWS の 「Light Sail + WordPress」 でブログを立ててましたが、WordPress がだるすぎたので AWS の [AWS Amplify + Hugo]に移行しました。 ※現在は「GitHub Pages + Hugo」の構成です GitHub Pages とかをそのまま使うのも良かったけど、AWS のサービスを触ってみたかったのでこっちで立ててみました。 Hugo に移って最初に記事書いていて思うけど、やっぱMarkdownが最強なんだわ。 スラスラ書ける 😎 一応 WordPress でも Markdown で書けるプラグイン 📕 は少し出てたけど、 「めっちゃこれいいやん」 みたいなプラグインは見当たりませんで</description></item><item><title>RaspberryPi 3 Model Bで遊ぶ</title><link>https://tech-wafter.net/2017/create-live-camera-by-raspberrypi-model-b/</link><pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate><guid>https://tech-wafter.net/2017/create-live-camera-by-raspberrypi-model-b/</guid><description>旧サイトの記事を移行してきたものとなります。 今日のご飯が何かを確認したいためのラズパイカメラ作成を行います この前 RaspberryPi 3 Model B を買ってそこら辺に転がってた USB カメラと繋げて台所に出て来るご飯をブラウザ上から見られるようにしたのでその時の経緯を記載。 NOOBS を使って Raspbian を入れる お前初心者かよｗｗと煽っているわけではないです。 NOOBS とは、ラズパイ用に作られた Debian ベースの OS である Raspbian とかを簡単にインストールできるようにしたインストーラーです。 NOOBS ダウンロードページで NOOBS 落として SD カードにブチ込んで終了。 Raspbian を起動して sshd を Raspbian 起動時に</description></item><item><title>MacOSを入れ直したらbrew upgradeでエラーが出るようになった</title><link>https://tech-wafter.net/2016/fixed-homebrew-error-that-reinstall-macos/</link><pubDate>Mon, 31 Oct 2016 00:00:00 +0000</pubDate><guid>https://tech-wafter.net/2016/fixed-homebrew-error-that-reinstall-macos/</guid><description>旧サイトの記事を移行してきたものとなります。 1 2 3 ==&amp;gt; Using the sandbox Error: /usr/local/opt/jpeg not present or broken Please reinstall jpeg. Sorry :( why!?? 結構悩みましたが、以下のコマンドで直りました。 1 brew unlink jpeg &amp;amp;&amp;amp; brew link jpeg こういう系の問題って目的の記事とかが見つかれば一瞬なんですけど、 見つかるまで永遠に解決しないので本当に辛い・・・。 参考 Library not loaded: /usr/local/opt/jpeg/lib/libjpeg.8.dylib #323</description></item><item><title>カスペルスキーのプロセス「kav」がくっそ重くてターミナル起動が8秒ぐらいかかる問題</title><link>https://tech-wafter.net/2016/very-slow-kav-on-terminal/</link><pubDate>Fri, 19 Aug 2016 00:00:00 +0000</pubDate><guid>https://tech-wafter.net/2016/very-slow-kav-on-terminal/</guid><description>旧サイトの記事を移行してきたものとなります。 TL;DR サポセンに連絡しましたが、現在調査中で 2015 年版を利用すればなんとかなるかもとのこと。 2019 年現在は直っている可能性があります（未検証）。 概要 Kaspersky for Macが入っている PC にrbenvを入れると、ターミナルの動作がめちゃくちゃ重たくなります。 起動に 8s もかかると、使い物にならないので カスペルスキーのサポセンにぶん投げてました。 rbenvの測定を行ったのが、以下の画像です。 回答 2015 年版を使えば直るかもしれないので、そっちを使ってくださいとのこと。 自分はマルウェア対策ソフ</description></item><item><title>Eclipseのタブを可視化するための > を消したい</title><link>https://tech-wafter.net/2016/want-to-delete-tab-marker/</link><pubDate>Fri, 15 Apr 2016 00:00:00 +0000</pubDate><guid>https://tech-wafter.net/2016/want-to-delete-tab-marker/</guid><description>旧サイトの記事を移行してきたものとなります。 Eclipse のタブを可視化した際に表示される、&amp;gt;を消したかった。 これがあると個人的には見づらいです。 外す方法ですが、解決法が以下に掲載されてました。 ウィンドウ＞設定＞一般＞ JStyle ＞タブのチェックを外す Eclipse の改行、タブ文字非表示 JStyle ってのを弄れば良かったらしいです。</description></item></channel></rss>